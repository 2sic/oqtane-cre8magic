@inherits MagicMenuRoot
@*
File Purpose:       Add a menu based on the parameter 'ConfigName'
Recommendations:    -
Nice to know:
    - Inherits from a base class that prepares everything
    - The <ThemePackageSettings> in the @inherits tells the system what will provide the settings
    - Prepares the menu structure and then renders using one of various menu controls
    - Can be configured directly on the tag, or can load a config from JSON
      The exact properties are defined in the base class
    - If necessary, you can create another type of menu and just add it to the list below
    - WIP: Later it will also be able to load a config from the page/theme settings
*@

@* Special Debugging *@
@if (true)
{
    <div>
        ConfigName: @(Menu?.Settings.ConfigName) <br/>
        HasChildren: @(Menu?.HasChildren) - @Menu?.Children.Count <br/>
        This: @Menu?.Name (@Menu?.Link) <br/>
        Direction: @(IsVertical ? "Vertical" : "Horizontal") <br/>
        Ul-Classes: @Menu?.Classes("ul") <br/>
        Li-Classes: @Menu?.Classes("li") <br/>
        A-Classes: @Menu?.Classes("a") <br/>
    </div>
}

@* Show the desired menu - in this setup we have 2 options. If you need more, change the conditions to check for Menu?.Settings.Template *@
@if (IsVertical)
{
    <MenuVertical Menu="@Menu"></MenuVertical>
}
else
{
    <MenuHorizontal Menu="@Menu"></MenuHorizontal>
}
@if (Menu?.HasChildren == false)
{
    @* Debug Information in cases where the menu doesn't even show *@
    <MagicMenuDebug Menu="@Menu" Standalone="true"></MagicMenuDebug>
}
@if (true)
{
    <div>End-Of-Menu-@(Menu?.Settings.ConfigName)</div>
}