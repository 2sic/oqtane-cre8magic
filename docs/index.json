{
  "api/ToSic.Cre8magic.Client.Analytics.MagicAnalyticsService.html": {
    "href": "api/ToSic.Cre8magic.Client.Analytics.MagicAnalyticsService.html",
    "title": "Class MagicAnalyticsService | cre8magic",
    "keywords": "Class MagicAnalyticsService Namespace ToSic.Cre8magic.Client.Analytics Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicAnalyticsService Inheritance object MagicAnalyticsService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicAnalyticsService(IJSRuntime) public MagicAnalyticsService(IJSRuntime jsRuntime) Parameters jsRuntime IJSRuntime Properties JsRuntime public IJSRuntime JsRuntime { get; } Property Value IJSRuntime"
  },
  "api/ToSic.Cre8magic.Client.Analytics.MagicAnalyticsSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Analytics.MagicAnalyticsSettings.html",
    "title": "Class MagicAnalyticsSettings | cre8magic",
    "keywords": "Class MagicAnalyticsSettings Namespace ToSic.Cre8magic.Client.Analytics Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicAnalyticsSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicAnalyticsSettings Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GtmId public string? GtmId { get; set; } Property Value string PageViewEvent public string? PageViewEvent { get; set; } Property Value string PageViewJs public string? PageViewJs { get; set; } Property Value string PageViewTrack public bool? PageViewTrack { get; set; } Property Value bool? PageViewTrackFirst public bool? PageViewTrackFirst { get; set; } Property Value bool?"
  },
  "api/ToSic.Cre8magic.Client.Analytics.html": {
    "href": "api/ToSic.Cre8magic.Client.Analytics.html",
    "title": "Namespace ToSic.Cre8magic.Client.Analytics | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Analytics Classes MagicAnalyticsService MagicAnalyticsSettings"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumb.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumb.html",
    "title": "Class MagicBreadcrumb | cre8magic",
    "keywords": "Class MagicBreadcrumb Namespace ToSic.Cre8magic.Client.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicBreadcrumb : MagicBreadcrumbItem, IMagicPage Inheritance object MagicPageBase MagicPage MagicPageWithDesign MagicBreadcrumbItem MagicBreadcrumb Implements IMagicPage Inherited Members MagicPageWithDesign.Classes(string) MagicPageWithDesign.Value(string) MagicPage.PageFactory MagicPage.MenuLevel MagicPage.IsCurrent MagicPage.Link MagicPage.Target MagicPage.Breadcrumb MagicPage.InBreadcrumb MagicPageBase.OriginalPage MagicPageBase.PageId MagicPageBase.ParentId MagicPageBase.Path MagicPageBase.Name MagicPageBase.Url MagicPageBase.IsClickable MagicPageBase.Level MagicPageBase.HasChildren object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicBreadcrumb(PageState) public MagicBreadcrumb(PageState pageState) Parameters pageState PageState MagicBreadcrumb(MagicSettings) public MagicBreadcrumb(MagicSettings magicSettings) Parameters magicSettings MagicSettings Properties Items public IEnumerable<MagicBreadcrumbItem> Items { get; } Property Value IEnumerable<MagicBreadcrumbItem> Methods Designer(IPageDesigner) public MagicBreadcrumb Designer(IPageDesigner designer) Parameters designer IPageDesigner Returns MagicBreadcrumb Setup(MagicBreadcrumbSettings) public MagicBreadcrumb Setup(MagicBreadcrumbSettings settings) Parameters settings MagicBreadcrumbSettings Returns MagicBreadcrumb"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumbItem.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumbItem.html",
    "title": "Class MagicBreadcrumbItem | cre8magic",
    "keywords": "Class MagicBreadcrumbItem Namespace ToSic.Cre8magic.Client.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicBreadcrumbItem : MagicPageWithDesign, IMagicPage Inheritance object MagicPageBase MagicPage MagicPageWithDesign MagicBreadcrumbItem Implements IMagicPage Derived MagicBreadcrumb Inherited Members MagicPageWithDesign.Classes(string) MagicPageWithDesign.Value(string) MagicPage.PageFactory MagicPage.MenuLevel MagicPage.IsCurrent MagicPage.Link MagicPage.Target MagicPage.Breadcrumb MagicPage.InBreadcrumb MagicPageBase.OriginalPage MagicPageBase.PageId MagicPageBase.ParentId MagicPageBase.Path MagicPageBase.Name MagicPageBase.Url MagicPageBase.IsClickable MagicPageBase.Level MagicPageBase.HasChildren object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumbs.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumbs.html",
    "title": "Class MagicBreadcrumbs | cre8magic",
    "keywords": "Class MagicBreadcrumbs Namespace ToSic.Cre8magic.Client.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicBreadcrumbs : MagicControl, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControl MagicBreadcrumbs Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicControl.Settings MagicControl.PageFactory MagicControl.UserIsAdmin MagicControl.UserIsEditor MagicControl.UserIsLoggedIn MagicControl.Designer MagicControl.Classes(string) MagicControl.ClassesOrDefault(string, string) MagicControl.Value(string) MagicControl.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Breadcrumbs protected List<IMagicPage> Breadcrumbs { get; } Property Value List<IMagicPage> HomePage protected IMagicPage HomePage { get; } Property Value IMagicPage"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbDesign.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbDesign.html",
    "title": "Class MagicBreadcrumbDesign | cre8magic",
    "keywords": "Class MagicBreadcrumbDesign Namespace ToSic.Cre8magic.Client.Breadcrumbs.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicBreadcrumbDesign : DesignSetting Inheritance object DesignSetting MagicBreadcrumbDesign Inherited Members DesignSetting.Classes DesignSetting.Value DesignSetting.Id DesignSetting.IsActive DesignSetting.IsPublished DesignSetting.IsAdmin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HasChildren Classes to add if this node is a parent (has-children). public PairOnOff? HasChildren { get; set; } Property Value PairOnOff IsDisabled Classes to add if the node is disabled. TODO: unclear why it's disabled, what would cause this... public PairOnOff? IsDisabled { get; set; } Property Value PairOnOff"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbDesigner.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbDesigner.html",
    "title": "Class MagicBreadcrumbDesigner | cre8magic",
    "keywords": "Class MagicBreadcrumbDesigner Namespace ToSic.Cre8magic.Client.Breadcrumbs.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Special helper to provide Css classes to menus public class MagicBreadcrumbDesigner : IPageDesigner Inheritance object MagicBreadcrumbDesigner Implements IPageDesigner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Classes(string, IMagicPage) public string Classes(string tag, IMagicPage item) Parameters tag string item IMagicPage Returns string Value(string, IMagicPage) public string Value(string key, IMagicPage item) Parameters key string item IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbSettings.html",
    "title": "Class MagicBreadcrumbSettings | cre8magic",
    "keywords": "Class MagicBreadcrumbSettings Namespace ToSic.Cre8magic.Client.Breadcrumbs.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicBreadcrumbSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicBreadcrumbSettings Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicBreadcrumbSettings() Empty constructor is important for JSON deserialization public MagicBreadcrumbSettings() Fields DisplayDefault public const bool DisplayDefault = true Field Value bool Properties BreadcrumbId public string BreadcrumbId { get; } Property Value string ConfigName Name to identify this configuration public string? ConfigName { get; set; } Property Value string Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; set; } Property Value MagicDebugSettings DesignSettings public NamedSettings<MagicBreadcrumbDesign>? DesignSettings { get; set; } Property Value NamedSettings<MagicBreadcrumbDesign> Display Determines if this breadcrumb should be shown. public bool? Display { get; set; } Property Value bool? Id A unique ID to identify the breadcrumb. public string? Id { get; set; } Property Value string Start Start page of this breadcrumb - like home or another specific page. Can be a specific ID blank / null, current page public int? Start { get; set; } Property Value int?"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Breadcrumbs.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Breadcrumbs.Settings Classes MagicBreadcrumbDesign MagicBreadcrumbDesigner Special helper to provide Css classes to menus MagicBreadcrumbSettings"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.html",
    "title": "Namespace ToSic.Cre8magic.Client.Breadcrumbs | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Breadcrumbs Classes MagicBreadcrumb MagicBreadcrumbItem MagicBreadcrumbs"
  },
  "api/ToSic.Cre8magic.Client.Containers.MagicContainer.html": {
    "href": "api/ToSic.Cre8magic.Client.Containers.MagicContainer.html",
    "title": "Class MagicContainer | cre8magic",
    "keywords": "Class MagicContainer Namespace ToSic.Cre8magic.Client.Containers Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicContainer : ContainerBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IContainerControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ContainerBase MagicContainer Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IContainerControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members ContainerBase.ShouldRender() ContainerBase.ModuleState ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties NavigationManager [Inject] public NavigationManager? NavigationManager { get; set; } Property Value NavigationManager Settings [CascadingParameter] public MagicSettings Settings { get; set; } Property Value MagicSettings UseAdminContainer Modules are treated as admin modules (and must use the the admin container) if they are marked as such, or come from the Oqtane ....Admin... type protected bool UseAdminContainer { get; } Property Value bool Methods Classes(string) public string? Classes(string target) Parameters target string Returns string CloseModal() protected void CloseModal() Id(string) public string? Id(string name) Parameters name string Returns string Value(string) public string? Value(string key) Parameters key string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Containers.Settings.MagicContainerSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Containers.Settings.MagicContainerSettings.html",
    "title": "Class MagicContainerSettings | cre8magic",
    "keywords": "Class MagicContainerSettings Namespace ToSic.Cre8magic.Client.Containers.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicContainerSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicContainerSettings Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Custom public NamedSettings<DesignSetting> Custom { get; set; } Property Value NamedSettings<DesignSetting>"
  },
  "api/ToSic.Cre8magic.Client.Containers.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Containers.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Containers.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Containers.Settings Classes MagicContainerSettings"
  },
  "api/ToSic.Cre8magic.Client.Containers.html": {
    "href": "api/ToSic.Cre8magic.Client.Containers.html",
    "title": "Namespace ToSic.Cre8magic.Client.Containers | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Containers Classes MagicContainer"
  },
  "api/ToSic.Cre8magic.Client.Controls.IMagicControlWithSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.IMagicControlWithSettings.html",
    "title": "Interface IMagicControlWithSettings | cre8magic",
    "keywords": "Interface IMagicControlWithSettings Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicControlWithSettings : IHasMagicSettings, IMagicDesigner Inherited Members IMagicDesigner.Classes(string) IMagicDesigner.Value(string) IMagicDesigner.Id(string) Properties Settings [CascadingParameter] MagicSettings Settings { get; set; } Property Value MagicSettings"
  },
  "api/ToSic.Cre8magic.Client.Controls.IMagicDesigner.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.IMagicDesigner.html",
    "title": "Interface IMagicDesigner | cre8magic",
    "keywords": "Interface IMagicDesigner Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicDesigner Methods Classes(string) string? Classes(string target) Parameters target string Returns string Id(string) string? Id(string target) Parameters target string Returns string Value(string) string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicComponent.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicComponent.html",
    "title": "Class MagicComponent | cre8magic",
    "keywords": "Class MagicComponent Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll Non-Oqtane Blazor component with Settings as base for your controls public abstract class MagicComponent : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase MagicComponent Implements IComponent IHandleEvent IHandleAfterRender IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Settings [CascadingParameter] public MagicSettings Settings { get; set; } Property Value MagicSettings Methods Classes(string) public string? Classes(string target) Parameters target string Returns string Id(string) public string? Id(string name) Parameters name string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicControl.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicControl.html",
    "title": "Class MagicControl | cre8magic",
    "keywords": "Class MagicControl Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll Oqtane Blazor Control with Settings public abstract class MagicControl : ThemeControlBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControl Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Derived MagicBreadcrumbs MagicLanguageMenu Inherited Members ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Designer protected virtual IMagicDesigner Designer { get; } Property Value IMagicDesigner PageFactory protected MagicPageFactory PageFactory { get; } Property Value MagicPageFactory Settings [CascadingParameter] public MagicSettings Settings { get; set; } Property Value MagicSettings UserIsAdmin protected bool UserIsAdmin { get; } Property Value bool UserIsEditor protected bool UserIsEditor { get; } Property Value bool UserIsLoggedIn protected bool UserIsLoggedIn { get; } Property Value bool Methods Classes(string) public string? Classes(string target) Parameters target string Returns string ClassesOrDefault(string, string) public string? ClassesOrDefault(string target, string defaultValue) Parameters target string defaultValue string Returns string Id(string) public string? Id(string name) Parameters name string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicDynamicComponent.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicDynamicComponent.html",
    "title": "Class MagicDynamicComponent | cre8magic",
    "keywords": "Class MagicDynamicComponent Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicDynamicComponent Inheritance object MagicDynamicComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicDynamicComponent(string, Type, Dictionary<string, object>?) public MagicDynamicComponent(string group, Type type, Dictionary<string, object>? parameters) Parameters group string type Type parameters Dictionary<string, object> Properties Group public string Group { get; set; } Property Value string Parameters public Dictionary<string, object>? Parameters { get; set; } Property Value Dictionary<string, object> Type public Type Type { get; set; } Property Value Type"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicLogin.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicLogin.html",
    "title": "Class MagicLogin | cre8magic",
    "keywords": "Class MagicLogin Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicLogin : LoginBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase LoginBase MagicLogin Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members LoginBase.loginurl LoginBase.logouturl LoginBase.returnurl LoginBase.OnParametersSet() LoginBase.LoginUser() LoginBase.LogoutUser() LoginBase.NavigationManager LoginBase.UserService LoginBase.SettingService LoginBase.jsRuntime LoginBase.ServiceProvider ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsLoggedIn protected bool IsLoggedIn { get; } Property Value bool LocalizedLabel protected string LocalizedLabel { get; } Property Value string Settings [CascadingParameter] public MagicSettings Settings { get; set; } Property Value MagicSettings Methods ChangeLogin() protected Task ChangeLogin() Returns Task Classes(string) public string? Classes(string target) Parameters target string Returns string Id(string) public string? Id(string name) Parameters name string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Controls.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.html",
    "title": "Namespace ToSic.Cre8magic.Client.Controls | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Controls Classes MagicComponent Non-Oqtane Blazor component with Settings as base for your controls MagicControl Oqtane Blazor Control with Settings MagicDynamicComponent MagicLogin Interfaces IMagicControlWithSettings IMagicDesigner"
  },
  "api/ToSic.Cre8magic.Client.DictionaryExtensions.html": {
    "href": "api/ToSic.Cre8magic.Client.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | cre8magic",
    "keywords": "Class DictionaryExtensions Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class DictionaryExtensions Inheritance object DictionaryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.JsModules.MagicJsServiceBase.html": {
    "href": "api/ToSic.Cre8magic.Client.JsModules.MagicJsServiceBase.html",
    "title": "Class MagicJsServiceBase | cre8magic",
    "keywords": "Class MagicJsServiceBase Namespace ToSic.Cre8magic.Client.JsModules Assembly ToSic.Cre8magic.Client.Oqtane.dll Base for any JS Module Helper class public abstract class MagicJsServiceBase Inheritance object MagicJsServiceBase Derived MagicThemeJsServiceTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicJsServiceBase(IJSRuntime, string) Constructor protected MagicJsServiceBase(IJSRuntime jsRuntime, string modulePath) Parameters jsRuntime IJSRuntime JS Runtime of the control, usually available later, like in the OnAfterRenderAsync modulePath string Path to the javascript file, must be a JS6 Module Properties JsRuntime protected IJSRuntime JsRuntime { get; } Property Value IJSRuntime ModulePath protected string ModulePath { get; } Property Value string Methods InvokeAsync<TValue>(string) protected Task<TValue> InvokeAsync<TValue>(string identifier) Parameters identifier string Returns Task<TValue> Type Parameters TValue InvokeAsync<TValue>(string, params object[]) protected Task<TValue> InvokeAsync<TValue>(string identifier, params object[] args) Parameters identifier string args object[] Returns Task<TValue> Type Parameters TValue Log(params object[]) public Task Log(params object[] args) Parameters args object[] Returns Task Module() The JsObjectReference to the real module. Will need to load it on first access, so it's async. public Task<IJSObjectReference> Module() Returns Task<IJSObjectReference>"
  },
  "api/ToSic.Cre8magic.Client.JsModules.html": {
    "href": "api/ToSic.Cre8magic.Client.JsModules.html",
    "title": "Namespace ToSic.Cre8magic.Client.JsModules | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.JsModules Classes MagicJsServiceBase Base for any JS Module Helper class"
  },
  "api/ToSic.Cre8magic.Client.Languages.MagicLanguageMenu.html": {
    "href": "api/ToSic.Cre8magic.Client.Languages.MagicLanguageMenu.html",
    "title": "Class MagicLanguageMenu | cre8magic",
    "keywords": "Class MagicLanguageMenu Namespace ToSic.Cre8magic.Client.Languages Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicLanguageMenu : MagicControl, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControl MagicLanguageMenu Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicControl.Settings MagicControl.PageFactory MagicControl.UserIsAdmin MagicControl.UserIsEditor MagicControl.UserIsLoggedIn MagicControl.Classes(string) MagicControl.ClassesOrDefault(string, string) MagicControl.Value(string) MagicControl.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Designer protected override IMagicDesigner Designer { get; } Property Value IMagicDesigner LanguageService [Inject] protected LanguageService LanguageService { get; set; } Property Value LanguageService Languages public List<MagicLanguage> Languages { get; } Property Value List<MagicLanguage> Show Determines if the languages should be shown. Will be retrieved from the settings protected bool? Show { get; } Property Value bool? Methods Classes(MagicLanguage?, string) public string? Classes(MagicLanguage? lang, string tag) Parameters lang MagicLanguage tag string Returns string OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A Task representing any asynchronous operation. SetLanguage(string) public Task SetLanguage(string culture) Parameters culture string Returns Task"
  },
  "api/ToSic.Cre8magic.Client.Languages.Settings.MagicLanguage.html": {
    "href": "api/ToSic.Cre8magic.Client.Languages.Settings.MagicLanguage.html",
    "title": "Class MagicLanguage | cre8magic",
    "keywords": "Class MagicLanguage Namespace ToSic.Cre8magic.Client.Languages.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicLanguage Inheritance object MagicLanguage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicLanguage() Empty constructor for deserialization public MagicLanguage() Properties Culture public string? Culture { get; set; } Property Value string Description Description to show for this language. Will auto-default to the system name for this language. public string? Description { get; set; } Property Value string IsActive public bool IsActive { get; } Property Value bool Label Label to show for this culture. Will auto-default to first two characters. public string? Label { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Languages.Settings.MagicLanguagesSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Languages.Settings.MagicLanguagesSettings.html",
    "title": "Class MagicLanguagesSettings | cre8magic",
    "keywords": "Class MagicLanguagesSettings Namespace ToSic.Cre8magic.Client.Languages.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicLanguagesSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicLanguagesSettings Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicLanguagesSettings() Dummy constructor so better find cases where it's created Note it must be without parameters for json deserialization public MagicLanguagesSettings() Properties Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; set; } Property Value MagicDebugSettings HideOthers If true, will only show the languages which are explicitly configured. If false, will first show the configured languages, then the rest. public bool HideOthers { get; set; } Property Value bool Languages List of languages public NamedSettings<MagicLanguage>? Languages { get; set; } Property Value NamedSettings<MagicLanguage>"
  },
  "api/ToSic.Cre8magic.Client.Languages.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Languages.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Languages.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Languages.Settings Classes MagicLanguage MagicLanguagesSettings"
  },
  "api/ToSic.Cre8magic.Client.Languages.html": {
    "href": "api/ToSic.Cre8magic.Client.Languages.html",
    "title": "Namespace ToSic.Cre8magic.Client.Languages | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Languages Classes MagicLanguageMenu"
  },
  "api/ToSic.Cre8magic.Client.Logging.CodeRef.html": {
    "href": "api/ToSic.Cre8magic.Client.Logging.CodeRef.html",
    "title": "Class CodeRef | cre8magic",
    "keywords": "Class CodeRef Namespace ToSic.Cre8magic.Client.Logging Assembly ToSic.Cre8magic.Client.Oqtane.dll Reference to code - containing the path to the file, the method name and the line in the code. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class CodeRef Inheritance object CodeRef Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CodeRef(bool, string, string, int) This constructor should be called without params, so that the compiler automatically injects all values. public CodeRef(bool autoPickup = true, string cPath = null, string cName = null, int cLine = 0) Parameters autoPickup bool Dummy parameter just to have a different signature. cPath string auto pre filled by the compiler - the path to the code file cName string auto pre filled by the compiler - the method name cLine int auto pre filled by the compiler - the code line CodeRef(string, string, int) Default constructor to set the values public CodeRef(string cPath, string cName, int cLine) Parameters cPath string cName string cLine int Fields Line Line of code where the code was running public int Line Field Value int Name Name of the method/property accessed public string Name Field Value string Path Path to the code file public string Path Field Value string"
  },
  "api/ToSic.Cre8magic.Client.Logging.LogCall-1.html": {
    "href": "api/ToSic.Cre8magic.Client.Logging.LogCall-1.html",
    "title": "Class LogCall<T> | cre8magic",
    "keywords": "Class LogCall<T> Namespace ToSic.Cre8magic.Client.Logging Assembly ToSic.Cre8magic.Client.Oqtane.dll public class LogCall<T> : LogCallBase Type Parameters T Inheritance object LogCallBase LogCall<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Return(T) public T Return(T result) Parameters result T Returns T Return(T, string) public T Return(T result, string message) Parameters result T message string Returns T ReturnAndKeepData(T, string) public T ReturnAndKeepData(T result, string message) Parameters result T message string Returns T ReturnAndLog(T) public T ReturnAndLog(T result) Parameters result T Returns T ReturnNull() public T ReturnNull() Returns T ReturnNull(string) public T ReturnNull(string message) Parameters message string Returns T"
  },
  "api/ToSic.Cre8magic.Client.Logging.LogCall.html": {
    "href": "api/ToSic.Cre8magic.Client.Logging.LogCall.html",
    "title": "Class LogCall | cre8magic",
    "keywords": "Class LogCall Namespace ToSic.Cre8magic.Client.Logging Assembly ToSic.Cre8magic.Client.Oqtane.dll public class LogCall : LogCallBase Inheritance object LogCallBase LogCall Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.Logging.LogCallBase.html": {
    "href": "api/ToSic.Cre8magic.Client.Logging.LogCallBase.html",
    "title": "Class LogCallBase | cre8magic",
    "keywords": "Class LogCallBase Namespace ToSic.Cre8magic.Client.Logging Assembly ToSic.Cre8magic.Client.Oqtane.dll public class LogCallBase Inheritance object LogCallBase Derived LogCall LogCall<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.Logging.html": {
    "href": "api/ToSic.Cre8magic.Client.Logging.html",
    "title": "Namespace ToSic.Cre8magic.Client.Logging | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Logging Classes CodeRef Reference to code - containing the path to the file, the method name and the line in the code. LogCall LogCallBase LogCall<T>"
  },
  "api/ToSic.Cre8magic.Client.MagicConstants.html": {
    "href": "api/ToSic.Cre8magic.Client.MagicConstants.html",
    "title": "Class MagicConstants | cre8magic",
    "keywords": "Class MagicConstants Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicConstants Inheritance object MagicConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Default public static string Default Field Value string DesignMobile public static string DesignMobile Field Value string InheritName If used on a name, means it should inherit the name used for the layout to find the menu/design/etc. public static string InheritName Field Value string MenuHorizontal public const string MenuHorizontal = \"Horizontal\" Field Value string MenuVertical public const string MenuVertical = \"Vertical\" Field Value string PackageId public const string PackageId = \"ToSic.Cre8magic.Oqtane\" Field Value string"
  },
  "api/ToSic.Cre8magic.Client.MagicTokens.html": {
    "href": "api/ToSic.Cre8magic.Client.MagicTokens.html",
    "title": "Class MagicTokens | cre8magic",
    "keywords": "Class MagicTokens Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicTokens Inheritance object MagicTokens Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenu.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenu.html",
    "title": "Class MagicMenu | cre8magic",
    "keywords": "Class MagicMenu Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Base class for any menu list public abstract class MagicMenu : MagicMenuBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MagicMenuBase MagicMenu Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicMenuBase.Settings MagicMenuBase.PageFactory MagicMenuBase.Classes(string) MagicMenuBase.Value(string) MagicMenuBase.Id(string) MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) MenuBase.MenuPages ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Menu [Parameter] [EditorRequired] public IMagicPageList Menu { get; set; } Property Value IMagicPageList"
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenuBase.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenuBase.html",
    "title": "Class MagicMenuBase | cre8magic",
    "keywords": "Class MagicMenuBase Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicMenuBase : MenuBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MagicMenuBase Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Derived MagicMenu MagicMenuRoot Inherited Members MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) MenuBase.MenuPages ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PageFactory protected MagicPageFactory PageFactory { get; } Property Value MagicPageFactory Settings [CascadingParameter] public MagicSettings Settings { get; set; } Property Value MagicSettings Methods Classes(string) public string? Classes(string target) Parameters target string Returns string Id(string) public string? Id(string target) Parameters target string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenuBuilder.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenuBuilder.html",
    "title": "Class MagicMenuBuilder | cre8magic",
    "keywords": "Class MagicMenuBuilder Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Will create a MenuTree based on the current pages information and configuration public class MagicMenuBuilder : MagicServiceWithSettingsBase Inheritance object MagicServiceWithSettingsBase MagicMenuBuilder Inherited Members MagicServiceWithSettingsBase.InitSettings(MagicSettings) MagicServiceWithSettingsBase.Settings object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicMenuBuilder(ILogger<MagicMenuBuilder>) Will create a MenuTree based on the current pages information and configuration public MagicMenuBuilder(ILogger<MagicMenuBuilder> logger) Parameters logger ILogger<MagicMenuBuilder> Properties Logger public ILogger Logger { get; } Property Value ILogger Methods GetTree(MagicMenuSettings, List<IMagicPage>) public MagicMenuTree GetTree(MagicMenuSettings config, List<IMagicPage> menuPages) Parameters config MagicMenuSettings menuPages List<IMagicPage> Returns MagicMenuTree"
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenuPage.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenuPage.html",
    "title": "Class MagicMenuPage | cre8magic",
    "keywords": "Class MagicMenuPage Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Represents a menu page in the MagicMenu system. public class MagicMenuPage : MagicPageWithDesign, IMagicPage, IMagicPageList Inheritance object MagicPageBase MagicPage MagicPageWithDesign MagicMenuPage Implements IMagicPage IMagicPageList Inherited Members MagicPageWithDesign.Classes(string) MagicPageWithDesign.Value(string) MagicPage.PageFactory MagicPage.IsCurrent MagicPage.Link MagicPage.Target MagicPage.Breadcrumb MagicPage.InBreadcrumb MagicPageBase.OriginalPage MagicPageBase.PageId MagicPageBase.ParentId MagicPageBase.Path MagicPageBase.Name MagicPageBase.Url MagicPageBase.IsClickable MagicPageBase.Level object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Can't provide PageState from DI because that breaks Oqtane. Properties Children Get children of the current menu page. public IList<MagicMenuPage> Children { get; } Property Value IList<MagicMenuPage> HasChildren Determines if there are sub-pages. True if this page has sub-pages. public bool HasChildren { get; } Property Value bool MenuId The ID of the menu item public string MenuId { get; } Property Value string MenuLevel Menu Level relative to the start of the menu (always starts with 1) public override int MenuLevel { get; } Property Value int Remarks This is not the same as Oqtane Page.Level (which exists in base class). Settings public MagicMenuSettings Settings { get; } Property Value MagicMenuSettings Methods GetChildren() Retrieve the children the first time it's needed. protected List<MagicMenuPage> GetChildren() Returns List<MagicMenuPage>"
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenuRoot.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenuRoot.html",
    "title": "Class MagicMenuRoot | cre8magic",
    "keywords": "Class MagicMenuRoot Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Base class for Razor menus public abstract class MagicMenuRoot : MagicMenuBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MagicMenuBase MagicMenuRoot Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicMenuBase.Settings MagicMenuBase.PageFactory MagicMenuBase.Classes(string) MagicMenuBase.Value(string) MagicMenuBase.Id(string) MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) MenuBase.MenuPages ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Children [Parameter] public bool? Children { get; set; } Property Value bool? ConfigName [Parameter] public string? ConfigName { get; set; } Property Value string Debug [Parameter] public bool? Debug { get; set; } Property Value bool? Depth [Parameter] public int? Depth { get; set; } Property Value int? Design [Parameter] public string? Design { get; set; } Property Value string Display [Parameter] public bool? Display { get; set; } Property Value bool? IsHorizontal protected bool IsHorizontal { get; } Property Value bool IsVertical Detect if the menu is configured for vertical. For the most common 2 kinds of menu options. protected bool IsVertical { get; } Property Value bool Level [Parameter] public int? Level { get; set; } Property Value int? Logger [Inject] public ILogger<Menu>? Logger { get; set; } Property Value ILogger<Menu> Menu protected MagicMenuTree? Menu { get; } Property Value MagicMenuTree MenuId [Parameter] public string? MenuId { get; set; } Property Value string MenuSettings Complex object with all settings. If this is used, all other settings will be ignored. [Parameter] public MagicMenuSettings? MenuSettings { get; set; } Property Value MagicMenuSettings MenuTreeService [Inject] public MagicMenuBuilder? MenuTreeService { get; set; } Property Value MagicMenuBuilder Start [Parameter] public string? Start { get; set; } Property Value string Template [Parameter] public string? Template { get; set; } Property Value string Methods OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A Task representing any asynchronous operation."
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenuTree.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenuTree.html",
    "title": "Class MagicMenuTree | cre8magic",
    "keywords": "Class MagicMenuTree Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicMenuTree : IMagicPageList Inheritance object MagicMenuTree Implements IMagicPageList Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicMenuTree(PageState) public MagicMenuTree(PageState pageState) Parameters pageState PageState Properties Children public IList<MagicMenuPage> Children { get; } Property Value IList<MagicMenuPage> Debug public List<string> Debug { get; } Property Value List<string> HasChildren public bool HasChildren { get; } Property Value bool MaxDepth public int MaxDepth { get; } Property Value int MenuLevel public int MenuLevel { get; } Property Value int Settings public MagicMenuSettings Settings { get; } Property Value MagicMenuSettings Methods Classes(string) Get css class for tag. public string? Classes(string tag) Parameters tag string Returns string Designer(IPageDesigner) public MagicMenuTree Designer(IPageDesigner pageDesigner) Parameters pageDesigner IPageDesigner Returns MagicMenuTree GetChildren() protected List<MagicMenuPage> GetChildren() Returns List<MagicMenuPage> SetMenuPages(IEnumerable<IMagicPage>) public MagicMenuTree SetMenuPages(IEnumerable<IMagicPage> menuPages) Parameters menuPages IEnumerable<IMagicPage> Returns MagicMenuTree SetMessages(List<string>) public MagicMenuTree SetMessages(List<string> messages) Parameters messages List<string> Returns MagicMenuTree Setup(MagicMenuSettings?) public MagicMenuTree Setup(MagicMenuSettings? settings) Parameters settings MagicMenuSettings Returns MagicMenuTree Value(string) Get attribute value. public string? Value(string key) Parameters key string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Menus.NodeRuleHelper.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.NodeRuleHelper.html",
    "title": "Class NodeRuleHelper | cre8magic",
    "keywords": "Class NodeRuleHelper Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll public class NodeRuleHelper Inheritance object NodeRuleHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PageForced public const char PageForced = '!' Field Value char Properties Settings public MagicMenuSettings Settings { get; } Property Value MagicMenuSettings"
  },
  "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuDesign.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuDesign.html",
    "title": "Class MagicMenuDesign | cre8magic",
    "keywords": "Class MagicMenuDesign Namespace ToSic.Cre8magic.Client.Menus.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicMenuDesign : DesignSetting Inheritance object DesignSetting MagicMenuDesign Inherited Members DesignSetting.Classes DesignSetting.Value DesignSetting.Id DesignSetting.IsActive DesignSetting.IsPublished DesignSetting.IsAdmin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ByLevel List of classes to add on certain levels only. Use level -1 to specify classes to apply to all the remaining ones which are not explicitly listed. public Dictionary<int, string>? ByLevel { get; set; } Property Value Dictionary<int, string> HasChildren Classes to add if this node is a parent (has-children). public PairOnOff? HasChildren { get; set; } Property Value PairOnOff InBreadcrumb Classes to add if this node is in the path / breadcrumb of the current page. public PairOnOff? InBreadcrumb { get; set; } Property Value PairOnOff IsDisabled Classes to add if the node is disabled. TODO: unclear why it's disabled, what would cause this... public PairOnOff? IsDisabled { get; set; } Property Value PairOnOff"
  },
  "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuDesigner.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuDesigner.html",
    "title": "Class MagicMenuDesigner | cre8magic",
    "keywords": "Class MagicMenuDesigner Namespace ToSic.Cre8magic.Client.Menus.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Special helper to provide Css classes to menus public class MagicMenuDesigner : IPageDesigner Inheritance object MagicMenuDesigner Implements IPageDesigner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Classes(string, IMagicPage) public string Classes(string tag, IMagicPage page) Parameters tag string page IMagicPage Returns string Value(string, IMagicPage) public string Value(string key, IMagicPage page) Parameters key string page IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuSettings.html",
    "title": "Class MagicMenuSettings | cre8magic",
    "keywords": "Class MagicMenuSettings Namespace ToSic.Cre8magic.Client.Menus.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicMenuSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicMenuSettings Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicMenuSettings() Empty constructor is important for JSON deserialization public MagicMenuSettings() Fields ChildrenFallback public const bool ChildrenFallback = false Field Value bool DisplayDefault public const bool DisplayDefault = true Field Value bool LevelDepthFallback public const int LevelDepthFallback = 1 Field Value int StartLevelFallback public const int StartLevelFallback = 0 Field Value int StartPageCurrent public const string StartPageCurrent = \".\" Field Value string StartPageRoot public const string StartPageRoot = \"*\" Field Value string TemplateDefault public const string TemplateDefault = \"Horizontal\" Field Value string Properties Children Levels to skip from the initial stating point. 0 means don't skip any, so if we're starting at the root, show that level 1 means skip the first level, so if we're starting at the root, show the children See inspiration context from DDRMenu https://www.dnnsoftware.com/wiki/ddrmenu-reference-guide in DDR it was called 'skip' but it didn't make sense IMHO public bool? Children { get; set; } Property Value bool? ConfigName Name to identify this configuration public string? ConfigName { get; set; } Property Value string Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; set; } Property Value MagicDebugSettings Depth public int? Depth { get; set; } Property Value int? DesignSettings public NamedSettings<MagicMenuDesign>? DesignSettings { get; set; } Property Value NamedSettings<MagicMenuDesign> Display Determines if this navigation should be shown. Mainly used for standard menus which could be disabled through configuration. public bool? Display { get; set; } Property Value bool? Id A unique ID to identify the menu. Would be used for debugging but also to help in creating unique css-classes for collapsible menus public string? Id { get; set; } Property Value string Level The level this menu should start from. 0 is the top level (default) 1 is the top level containing home and other pages -1 is one level up from the current node -2 is two levels up from the current node public int? Level { get; set; } Property Value int? MenuId public string MenuId { get; } Property Value string Start Start page of this navigation - like home or another specific page. Can be a specific ID a CSV of IDs ??? * to indicate all pages on the specified level . to indicate current page blank / null, to use another start ??? public string? Start { get; set; } Property Value string Template The template to use - horizontal/vertical public string? Template { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Menus.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Menus.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Menus.Settings Classes MagicMenuDesign MagicMenuDesigner Special helper to provide Css classes to menus MagicMenuSettings"
  },
  "api/ToSic.Cre8magic.Client.Menus.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.html",
    "title": "Namespace ToSic.Cre8magic.Client.Menus | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Menus Classes MagicMenu Base class for any menu list MagicMenuBase MagicMenuBuilder Will create a MenuTree based on the current pages information and configuration MagicMenuPage Represents a menu page in the MagicMenu system. MagicMenuRoot Base class for Razor menus MagicMenuTree NodeRuleHelper"
  },
  "api/ToSic.Cre8magic.Client.PageStateMenuExtensions.html": {
    "href": "api/ToSic.Cre8magic.Client.PageStateMenuExtensions.html",
    "title": "Class PageStateMenuExtensions | cre8magic",
    "keywords": "Class PageStateMenuExtensions Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class PageStateMenuExtensions Inheritance object PageStateMenuExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.PageStateSecurityExtensions.html": {
    "href": "api/ToSic.Cre8magic.Client.PageStateSecurityExtensions.html",
    "title": "Class PageStateSecurityExtensions | cre8magic",
    "keywords": "Class PageStateSecurityExtensions Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class PageStateSecurityExtensions Inheritance object PageStateSecurityExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.Pages.IMagicPageList.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.IMagicPageList.html",
    "title": "Interface IMagicPageList | cre8magic",
    "keywords": "Interface IMagicPageList Namespace ToSic.Cre8magic.Client.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicPageList Properties Children IList<MagicMenuPage> Children { get; } Property Value IList<MagicMenuPage> HasChildren bool HasChildren { get; } Property Value bool MenuLevel int MenuLevel { get; } Property Value int Methods Classes(string) Get css class for tag. string? Classes(string tag) Parameters tag string Returns string Value(string) Get attribute value. string? Value(string key) Parameters key string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Pages.IPageDesigner.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.IPageDesigner.html",
    "title": "Interface IPageDesigner | cre8magic",
    "keywords": "Interface IPageDesigner Namespace ToSic.Cre8magic.Client.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IPageDesigner Methods Classes(string, IMagicPage) string Classes(string tag, IMagicPage page) Parameters tag string page IMagicPage Returns string Value(string, IMagicPage) string Value(string key, IMagicPage page) Parameters key string page IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPage.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPage.html",
    "title": "Class MagicPage | cre8magic",
    "keywords": "Class MagicPage Namespace ToSic.Cre8magic.Client.Pages.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Wrapper for the Oqtane Page. public class MagicPage : MagicPageBase, IMagicPage Inheritance object MagicPageBase MagicPage Implements IMagicPage Derived MagicPageWithDesign Inherited Members MagicPageBase.OriginalPage MagicPageBase.PageId MagicPageBase.ParentId MagicPageBase.Path MagicPageBase.Name MagicPageBase.Url MagicPageBase.IsClickable MagicPageBase.Level MagicPageBase.HasChildren object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicPage(Page, MagicPageFactory) Wrapper for the Oqtane Page. public MagicPage(Page originalPage, MagicPageFactory pageFactory) Parameters originalPage Page pageFactory MagicPageFactory Properties Breadcrumb The current pages bread-crumb, going from the top-level to the current page. Note that the \"Home\" page is usually not a parent, so it's not included. public List<IMagicPage> Breadcrumb { get; } Property Value List<IMagicPage> InBreadcrumb Determine if the menu page is in the breadcrumb. public bool InBreadcrumb { get; } Property Value bool IsCurrent True if this page is the current page which the user is viewing. public bool IsCurrent { get; } Property Value bool Link Link to this page. public string Link { get; } Property Value string MenuLevel Level in the menu, starting from 1. As different menus may start at other depths, this is not always the same as the Oqtane level. public virtual int MenuLevel { get; } Property Value int PageFactory protected MagicPageFactory PageFactory { get; } Property Value MagicPageFactory Target Target for link to this page. public string? Target { get; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPageBase.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPageBase.html",
    "title": "Class MagicPageBase | cre8magic",
    "keywords": "Class MagicPageBase Namespace ToSic.Cre8magic.Client.Pages.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Wrapper for the Oqtane Page. public class MagicPageBase Inheritance object MagicPageBase Derived MagicPage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicPageBase(Page) Wrapper for the Oqtane Page. public MagicPageBase(Page originalPage) Parameters originalPage Page Properties HasChildren Determines if there are sub-pages. True if this page has sub-pages. public bool HasChildren { get; } Property Value bool IsClickable Link in site navigation is enabled or disabled. public bool IsClickable { get; } Property Value bool Level Current page level from the top of the Menu. As in Oqtane, it's 0 based. public int Level { get; } Property Value int Name Page Name. public string Name { get; } Property Value string OriginalPage Original Oqtane page wrapped in MagicPage. public Page OriginalPage { get; } Property Value Page PageId Id of the Page public int PageId { get; } Property Value int ParentId Reference to the parent Page if it has one. public int? ParentId { get; } Property Value int? Path Path of the page. public string Path { get; } Property Value string Url Full URL to this page. public string Url { get; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPageFactory.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPageFactory.html",
    "title": "Class MagicPageFactory | cre8magic",
    "keywords": "Class MagicPageFactory Namespace ToSic.Cre8magic.Client.Pages.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Factory to create Magic Pages. This is necessary, because the pages need certain properties which require other services to be available. public class MagicPageFactory Inheritance object MagicPageFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicPageFactory(PageState) Factory to create Magic Pages. This is necessary, because the pages need certain properties which require other services to be available. public MagicPageFactory(PageState pageState) Parameters pageState PageState Properties Current public IMagicPage Current { get; } Property Value IMagicPage Home public IMagicPage Home { get; } Property Value IMagicPage UserPages Pages in the menu according to Oqtane pre-processing Should be limited to pages which should be in the menu, visible and permissions ok. public IEnumerable<IMagicPage> UserPages { get; } Property Value IEnumerable<IMagicPage> Methods All() List of all pages - even these which would currently not be shown in the menu. public IEnumerable<IMagicPage> All() Returns IEnumerable<IMagicPage> ChildrenOf(IList<IMagicPage>, int) public List<IMagicPage> ChildrenOf(IList<IMagicPage> list, int pageId) Parameters list IList<IMagicPage> pageId int Returns List<IMagicPage> Create(Page) public IMagicPage Create(Page page) Parameters page Page Returns IMagicPage CreateOrNull(Page?) public IMagicPage? CreateOrNull(Page? page) Parameters page Page Returns IMagicPage Get(IEnumerable<Page>) public IEnumerable<IMagicPage> Get(IEnumerable<Page> pages) Parameters pages IEnumerable<Page> Returns IEnumerable<IMagicPage> Get(IEnumerable<int>) public IEnumerable<IMagicPage> Get(IEnumerable<int> ids) Parameters ids IEnumerable<int> Returns IEnumerable<IMagicPage> GetOrNull(int?) public IMagicPage? GetOrNull(int? id) Parameters id int? Returns IMagicPage"
  },
  "api/ToSic.Cre8magic.Client.Pages.Internal.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Client.Pages.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Pages.Internal Classes MagicPage Wrapper for the Oqtane Page. MagicPageBase Wrapper for the Oqtane Page. MagicPageFactory Factory to create Magic Pages. This is necessary, because the pages need certain properties which require other services to be available."
  },
  "api/ToSic.Cre8magic.Client.Pages.MagicPageWithDesign.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.MagicPageWithDesign.html",
    "title": "Class MagicPageWithDesign | cre8magic",
    "keywords": "Class MagicPageWithDesign Namespace ToSic.Cre8magic.Client.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicPageWithDesign : MagicPage, IMagicPage Inheritance object MagicPageBase MagicPage MagicPageWithDesign Implements IMagicPage Derived MagicBreadcrumbItem MagicMenuPage Inherited Members MagicPage.PageFactory MagicPage.MenuLevel MagicPage.IsCurrent MagicPage.Link MagicPage.Target MagicPage.Breadcrumb MagicPage.InBreadcrumb MagicPageBase.OriginalPage MagicPageBase.PageId MagicPageBase.ParentId MagicPageBase.Path MagicPageBase.Name MagicPageBase.Url MagicPageBase.IsClickable MagicPageBase.Level MagicPageBase.HasChildren object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Classes(string) Get css class for tag. public string? Classes(string tag) Parameters tag string Returns string Value(string) Get attribute value. public string? Value(string key) Parameters key string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Pages.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.html",
    "title": "Namespace ToSic.Cre8magic.Client.Pages | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Pages Classes MagicPageWithDesign Interfaces IMagicPageList IPageDesigner"
  },
  "api/ToSic.Cre8magic.Client.Services.IMagicThemeJsService.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.IMagicThemeJsService.html",
    "title": "Interface IMagicThemeJsService | cre8magic",
    "keywords": "Interface IMagicThemeJsService Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicThemeJsService Methods Log(params object[]) Task Log(params object[] args) Parameters args object[] Returns Task SetBodyClasses(string) Set body classes (removes all previous classes in the process) Task SetBodyClasses(string classes) Parameters classes string Returns Task"
  },
  "api/ToSic.Cre8magic.Client.Services.LanguageService.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.LanguageService.html",
    "title": "Class LanguageService | cre8magic",
    "keywords": "Class LanguageService Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll public class LanguageService : MagicServiceWithSettingsBase Inheritance object MagicServiceWithSettingsBase LanguageService Inherited Members MagicServiceWithSettingsBase.InitSettings(MagicSettings) MagicServiceWithSettingsBase.Settings object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LanguageService(NavigationManager, IJSRuntime, ILanguageService) public LanguageService(NavigationManager navigation, IJSRuntime jsRuntime, ILanguageService oqtLanguages) Parameters navigation NavigationManager jsRuntime IJSRuntime oqtLanguages ILanguageService Methods LanguagesToShow(int) public Task<List<MagicLanguage>> LanguagesToShow(int siteId) Parameters siteId int Returns Task<List<MagicLanguage>> SetCultureAsync(string) public Task SetCultureAsync(string culture) Parameters culture string Returns Task ShowMenu(int) public Task<bool> ShowMenu(int siteId) Parameters siteId int Returns Task<bool>"
  },
  "api/ToSic.Cre8magic.Client.Services.MagicPageEditService.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.MagicPageEditService.html",
    "title": "Class MagicPageEditService | cre8magic",
    "keywords": "Class MagicPageEditService Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll Helper to remove the logic/code from the razor file. It's just meant to support the AdminButtons, without placing the logic code inside that. public class MagicPageEditService Inheritance object MagicPageEditService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicPageEditService(IPageService, NavigationManager) Helper to remove the logic/code from the razor file. It's just meant to support the AdminButtons, without placing the logic code inside that. public MagicPageEditService(IPageService pageService, NavigationManager navigationManager) Parameters pageService IPageService navigationManager NavigationManager Methods ToggleEditMode(PageState) public Task ToggleEditMode(PageState pageState) Parameters pageState PageState Returns Task"
  },
  "api/ToSic.Cre8magic.Client.Services.MagicServiceWithSettingsBase.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.MagicServiceWithSettingsBase.html",
    "title": "Class MagicServiceWithSettingsBase | cre8magic",
    "keywords": "Class MagicServiceWithSettingsBase Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicServiceWithSettingsBase Inheritance object MagicServiceWithSettingsBase Derived MagicMenuBuilder LanguageService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Settings public MagicSettings? Settings { get; } Property Value MagicSettings Methods InitSettings(MagicSettings) public void InitSettings(MagicSettings settings) Parameters settings MagicSettings"
  },
  "api/ToSic.Cre8magic.Client.Services.MagicSettingsJsonService.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.MagicSettingsJsonService.html",
    "title": "Class MagicSettingsJsonService | cre8magic",
    "keywords": "Class MagicSettingsJsonService Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicSettingsJsonService : IHasSettingsExceptions Inheritance object MagicSettingsJsonService Implements IHasSettingsExceptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicSettingsJsonService(ILogger<MagicSettingsJsonService>) public MagicSettingsJsonService(ILogger<MagicSettingsJsonService> logger) Parameters logger ILogger<MagicSettingsJsonService> Properties Exceptions public List<Exception> Exceptions { get; } Property Value List<Exception> Logger public ILogger<MagicSettingsJsonService> Logger { get; } Property Value ILogger<MagicSettingsJsonService> Methods LoadJson(MagicPackageSettings) public MagicSettingsCatalog LoadJson(MagicPackageSettings themeConfig) Parameters themeConfig MagicPackageSettings Returns MagicSettingsCatalog"
  },
  "api/ToSic.Cre8magic.Client.Services.MagicSettingsService.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.MagicSettingsService.html",
    "title": "Class MagicSettingsService | cre8magic",
    "keywords": "Class MagicSettingsService Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll Service which consolidates settings made in the UI, in the JSON and falls back to coded defaults. public class MagicSettingsService : IHasSettingsExceptions Inheritance object MagicSettingsService Implements IHasSettingsExceptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicSettingsService(MagicSettingsJsonService, ILogger<MagicSettingsService>) Constructor public MagicSettingsService(MagicSettingsJsonService jsonService, ILogger<MagicSettingsService> logger) Parameters jsonService MagicSettingsJsonService logger ILogger<MagicSettingsService> Properties Debug public MagicDebugSettings Debug { get; } Property Value MagicDebugSettings Exceptions public List<Exception> Exceptions { get; } Property Value List<Exception> Logger public ILogger<MagicSettingsService> Logger { get; } Property Value ILogger<MagicSettingsService> Methods CurrentSettings(PageState, string?, string) public MagicSettings CurrentSettings(PageState pageState, string? name, string bodyClasses) Parameters pageState PageState name string bodyClasses string Returns MagicSettings InitSettings(MagicPackageSettings) public MagicSettingsService InitSettings(MagicPackageSettings themeSettings) Parameters themeSettings MagicPackageSettings Returns MagicSettingsService"
  },
  "api/ToSic.Cre8magic.Client.Services.MagicThemeJsServiceTest.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.MagicThemeJsServiceTest.html",
    "title": "Class MagicThemeJsServiceTest | cre8magic",
    "keywords": "Class MagicThemeJsServiceTest Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll Constants and helpers related to JS calls from the Theme to it's own JS libraries public class MagicThemeJsServiceTest : MagicJsServiceBase, IMagicThemeJsService Inheritance object MagicJsServiceBase MagicThemeJsServiceTest Implements IMagicThemeJsService Inherited Members MagicJsServiceBase.JsRuntime MagicJsServiceBase.ModulePath MagicJsServiceBase.Log(params object[]) MagicJsServiceBase.Module() MagicJsServiceBase.InvokeAsync<TValue>(string) MagicJsServiceBase.InvokeAsync<TValue>(string, params object[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicThemeJsServiceTest(IJSRuntime) Constants and helpers related to JS calls from the Theme to it's own JS libraries public MagicThemeJsServiceTest(IJSRuntime jsRuntime) Parameters jsRuntime IJSRuntime Methods SetBodyClasses(string) Set body classes (removes all previous classes in the process) public Task SetBodyClasses(string classes) Parameters classes string Returns Task TestFromTest() public Task<string> TestFromTest() Returns Task<string>"
  },
  "api/ToSic.Cre8magic.Client.Services.Startup.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.Startup.html",
    "title": "Class Startup | cre8magic",
    "keywords": "Class Startup Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll public class Startup : IClientStartup Inheritance object Startup Implements IClientStartup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureServices(IServiceCollection) Register Services public void ConfigureServices(IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/ToSic.Cre8magic.Client.Services.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.html",
    "title": "Namespace ToSic.Cre8magic.Client.Services | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Services Classes LanguageService MagicPageEditService Helper to remove the logic/code from the razor file. It's just meant to support the AdminButtons, without placing the logic code inside that. MagicServiceWithSettingsBase MagicSettingsJsonService MagicSettingsService Service which consolidates settings made in the UI, in the JSON and falls back to coded defaults. MagicThemeJsServiceTest Constants and helpers related to JS calls from the Theme to it's own JS libraries Startup Interfaces IMagicThemeJsService"
  },
  "api/ToSic.Cre8magic.Client.Settings.Debug.MagicDebugSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.Debug.MagicDebugSettings.html",
    "title": "Class MagicDebugSettings | cre8magic",
    "keywords": "Class MagicDebugSettings Namespace ToSic.Cre8magic.Client.Settings.Debug Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicDebugSettings Inheritance object MagicDebugSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Admin public bool? Admin { get; set; } Property Value bool? Allowed public bool? Allowed { get; set; } Property Value bool? Anonymous public bool? Anonymous { get; set; } Property Value bool? Detailed public bool? Detailed { get; set; } Property Value bool? Methods GetState(object?, bool) public MagicDebugState GetState(object? target, bool isAdmin) Parameters target object isAdmin bool Returns MagicDebugState"
  },
  "api/ToSic.Cre8magic.Client.Settings.Debug.MagicDebugState.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.Debug.MagicDebugState.html",
    "title": "Class MagicDebugState | cre8magic",
    "keywords": "Class MagicDebugState Namespace ToSic.Cre8magic.Client.Settings.Debug Assembly ToSic.Cre8magic.Client.Oqtane.dll Current debug state - show/enabled yes no public class MagicDebugState Inheritance object MagicDebugState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Show public bool Show { get; set; } Property Value bool"
  },
  "api/ToSic.Cre8magic.Client.Settings.Debug.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.Debug.html",
    "title": "Namespace ToSic.Cre8magic.Client.Settings.Debug | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Settings.Debug Classes MagicDebugSettings MagicDebugState Current debug state - show/enabled yes no"
  },
  "api/ToSic.Cre8magic.Client.Settings.DesignSetting.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.DesignSetting.html",
    "title": "Class DesignSetting | cre8magic",
    "keywords": "Class DesignSetting Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Anything that can define what classes it should have. This is usually the base class for something that can also have more information. public class DesignSetting Inheritance object DesignSetting Derived MagicBreadcrumbDesign MagicMenuDesign Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Classes Classes which are applied to all the tags of this type public string? Classes { get; set; } Property Value string Id public string? Id { get; set; } Property Value string IsActive Classes to apply if this thing is active. For example, the current page or language. public PairOnOff? IsActive { get; set; } Property Value PairOnOff IsAdmin If a module is admin or not, usually just for containers public PairOnOff? IsAdmin { get; set; } Property Value PairOnOff IsPublished If something is published or not, usually just for Containers public PairOnOff? IsPublished { get; set; } Property Value PairOnOff Value Special key to get a value - for non-css configurations public string? Value { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Settings.DesignSettingsJsonConverter-1.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.DesignSettingsJsonConverter-1.html",
    "title": "Class DesignSettingsJsonConverter<T> | cre8magic",
    "keywords": "Class DesignSettingsJsonConverter<T> Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Important: NEVER use this on a public class DesignSettingsJsonConverter<T> : JsonConverterBase<T> where T : DesignSetting, new() Type Parameters T Inheritance object JsonConverter JsonConverter<T> JsonConverterBase<T> DesignSettingsJsonConverter<T> Inherited Members JsonConverterBase<T>.Logger JsonConverterBase<T>.GetOptionsWithoutThisConverter(JsonSerializerOptions) JsonConverterBase<T>.ConvertObject(JsonObject, JsonSerializerOptions) JsonConverter<T>.CanConvert(Type) JsonConverter<T>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.WriteAsPropertyName(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.HandleNull JsonConverter<T>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNew(ILogger) public static DesignSettingsJsonConverter<T> GetNew(ILogger logger) Parameters logger ILogger Returns DesignSettingsJsonConverter<T> Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type T. public override T? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns T The converted value. Write(Utf8JsonWriter, T?, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, T? pair, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. pair T options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ToSic.Cre8magic.Client.Settings.IHasMagicSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.IHasMagicSettings.html",
    "title": "Interface IHasMagicSettings | cre8magic",
    "keywords": "Interface IHasMagicSettings Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IHasMagicSettings Properties Settings MagicSettings Settings { get; set; } Property Value MagicSettings"
  },
  "api/ToSic.Cre8magic.Client.Settings.IHasSettingsExceptions.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.IHasSettingsExceptions.html",
    "title": "Interface IHasSettingsExceptions | cre8magic",
    "keywords": "Interface IHasSettingsExceptions Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IHasSettingsExceptions Properties Exceptions List<Exception> Exceptions { get; } Property Value List<Exception> HasExceptions bool HasExceptions { get; } Property Value bool"
  },
  "api/ToSic.Cre8magic.Client.Settings.Json.JsonConverterBase-1.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.Json.JsonConverterBase-1.html",
    "title": "Class JsonConverterBase<T> | cre8magic",
    "keywords": "Class JsonConverterBase<T> Namespace ToSic.Cre8magic.Client.Settings.Json Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class JsonConverterBase<T> : JsonConverter<T> Type Parameters T Inheritance object JsonConverter JsonConverter<T> JsonConverterBase<T> Derived DesignSettingsJsonConverter<T> PairOnOffJsonConverter ThemePartJsonConverter Inherited Members JsonConverter<T>.CanConvert(Type) JsonConverter<T>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.Write(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.WriteAsPropertyName(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.HandleNull JsonConverter<T>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonConverterBase(ILogger) protected JsonConverterBase(ILogger logger) Parameters logger ILogger Properties Logger public ILogger Logger { get; } Property Value ILogger Methods ConvertObject(JsonObject, JsonSerializerOptions) protected T? ConvertObject(JsonObject jsonObject, JsonSerializerOptions options) Parameters jsonObject JsonObject options JsonSerializerOptions Returns T GetOptionsWithoutThisConverter(JsonSerializerOptions) protected JsonSerializerOptions GetOptionsWithoutThisConverter(JsonSerializerOptions options) Parameters options JsonSerializerOptions Returns JsonSerializerOptions"
  },
  "api/ToSic.Cre8magic.Client.Settings.Json.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.Json.html",
    "title": "Namespace ToSic.Cre8magic.Client.Settings.Json | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Settings.Json Classes JsonConverterBase<T>"
  },
  "api/ToSic.Cre8magic.Client.Settings.MagicPackageSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.MagicPackageSettings.html",
    "title": "Class MagicPackageSettings | cre8magic",
    "keywords": "Class MagicPackageSettings Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Settings for a Theme Package. Contains semi-constants like location of assets and configuration for various parts like CSS. public class MagicPackageSettings Inheritance object MagicPackageSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Defaults All kinds of settings for the layout, how it should be etc. Should usually only serve as backup in case the JSON fails. public MagicSettingsCatalog? Defaults { get; set; } Property Value MagicSettingsCatalog PackageName public string PackageName { get; set; } Property Value string SettingsJsonFile public string SettingsJsonFile { get; set; } Property Value string Url public string Url { get; set; } Property Value string WwwRoot public string WwwRoot { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Settings.MagicSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.MagicSettings.html",
    "title": "Class MagicSettings | cre8magic",
    "keywords": "Class MagicSettings Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll The current settings of a page. public class MagicSettings : IHasSettingsExceptions Inheritance object MagicSettings Implements IHasSettingsExceptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Analytics public MagicAnalyticsSettings Analytics { get; } Property Value MagicAnalyticsSettings Debug public MagicDebugState Debug { get; } Property Value MagicDebugState DebugSources public Dictionary<string, string> DebugSources { get; } Property Value Dictionary<string, string> Exceptions public List<Exception> Exceptions { get; } Property Value List<Exception> Languages public MagicLanguagesSettings Languages { get; } Property Value MagicLanguagesSettings MagicContext public string MagicContext { get; set; } Property Value string Name public string Name { get; } Property Value string Service [JsonIgnore] public MagicSettingsService Service { get; } Property Value MagicSettingsService Theme public MagicThemeSettings Theme { get; } Property Value MagicThemeSettings ThemeDesign public MagicThemeDesignSettings ThemeDesign { get; } Property Value MagicThemeDesignSettings Methods DebugState(object?) public MagicDebugState DebugState(object? target) Parameters target object Returns MagicDebugState Show(string) Determine if we should show a specific part public bool Show(string name) Parameters name string Returns bool"
  },
  "api/ToSic.Cre8magic.Client.Settings.MagicSettingsCatalog.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.MagicSettingsCatalog.html",
    "title": "Class MagicSettingsCatalog | cre8magic",
    "keywords": "Class MagicSettingsCatalog Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll This is a catalog of all kinds of configurations. It serves as a kind of database to manage all configurations, which will usually be retrieved using a name. public class MagicSettingsCatalog Inheritance object MagicSettingsCatalog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SourceDefault public const string SourceDefault = \"Unknown\" Field Value string Properties Analytics public NamedSettings<MagicAnalyticsSettings> Analytics { get; set; } Property Value NamedSettings<MagicAnalyticsSettings> Containers public NamedSettings<MagicContainerSettings> Containers { get; set; } Property Value NamedSettings<MagicContainerSettings> Debug Master debug settings - would override other debugs public MagicDebugSettings? Debug { get; set; } Property Value MagicDebugSettings Languages public NamedSettings<MagicLanguagesSettings> Languages { get; set; } Property Value NamedSettings<MagicLanguagesSettings> MenuDesigns Design definitions of the menu public NamedSettings<NamedSettings<MagicMenuDesign>> MenuDesigns { get; set; } Property Value NamedSettings<NamedSettings<MagicMenuDesign>> Menus The menu definitions public NamedSettings<MagicMenuSettings> Menus { get; set; } Property Value NamedSettings<MagicMenuSettings> Source Source of these settings / where they came from, to ensure that we can see in debug where a value was picked up from public string Source { get; set; } Property Value string ThemeDesigns public NamedSettings<MagicThemeDesignSettings> ThemeDesigns { get; set; } Property Value NamedSettings<MagicThemeDesignSettings> Themes public NamedSettings<MagicThemeSettings> Themes { get; set; } Property Value NamedSettings<MagicThemeSettings> Version Version number when loading from JSON to verify it's what we expect public float Version { get; set; } Property Value float"
  },
  "api/ToSic.Cre8magic.Client.Settings.NamedSettings-1.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.NamedSettings-1.html",
    "title": "Class NamedSettings<T> | cre8magic",
    "keywords": "Class NamedSettings<T> Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Case insensitive dictionary managing a list of named settings public class NamedSettings<T> : Dictionary<string, T>, IDictionary<string, T>, ICollection<KeyValuePair<string, T>>, IReadOnlyDictionary<string, T>, IReadOnlyCollection<KeyValuePair<string, T>>, IEnumerable<KeyValuePair<string, T>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable where T : class Type Parameters T Inheritance object Dictionary<string, T> NamedSettings<T> Implements IDictionary<string, T> ICollection<KeyValuePair<string, T>> IReadOnlyDictionary<string, T> IReadOnlyCollection<KeyValuePair<string, T>> IEnumerable<KeyValuePair<string, T>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members Dictionary<string, T>.Add(string, T) Dictionary<string, T>.Clear() Dictionary<string, T>.ContainsKey(string) Dictionary<string, T>.ContainsValue(T) Dictionary<string, T>.EnsureCapacity(int) Dictionary<string, T>.GetEnumerator() Dictionary<string, T>.OnDeserialization(object) Dictionary<string, T>.Remove(string) Dictionary<string, T>.Remove(string, out T) Dictionary<string, T>.TrimExcess() Dictionary<string, T>.TrimExcess(int) Dictionary<string, T>.TryAdd(string, T) Dictionary<string, T>.TryGetValue(string, out T) Dictionary<string, T>.Comparer Dictionary<string, T>.Count Dictionary<string, T>.this[string] Dictionary<string, T>.Keys Dictionary<string, T>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NamedSettings() public NamedSettings() NamedSettings(IDictionary<string, T>) public NamedSettings(IDictionary<string, T> dic) Parameters dic IDictionary<string, T> NamedSettings(IEnumerable<KeyValuePair<string, T>>) public NamedSettings(IEnumerable<KeyValuePair<string, T>> dic) Parameters dic IEnumerable<KeyValuePair<string, T>> Methods GetInvariant(string) public T? GetInvariant(string key) Parameters key string Returns T"
  },
  "api/ToSic.Cre8magic.Client.Settings.PairOnOff.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.PairOnOff.html",
    "title": "Class PairOnOff | cre8magic",
    "keywords": "Class PairOnOff Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class PairOnOff Inheritance object PairOnOff Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PairOnOffExtensions.Get(PairOnOff?, bool?) Constructors PairOnOff() Empty constructor for JSON serialization public PairOnOff() PairOnOff(string?, string?) public PairOnOff(string? on, string? off = null) Parameters on string off string Properties Off public string? Off { get; set; } Property Value string On public string? On { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Settings.PairOnOffExtensions.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.PairOnOffExtensions.html",
    "title": "Class PairOnOffExtensions | cre8magic",
    "keywords": "Class PairOnOffExtensions Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class PairOnOffExtensions Inheritance object PairOnOffExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Get(PairOnOff?, bool?) Null-safe pair access public static string? Get(this PairOnOff? pair, bool? isOn) Parameters pair PairOnOff isOn bool? Returns string"
  },
  "api/ToSic.Cre8magic.Client.Settings.PairOnOffJsonConverter.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.PairOnOffJsonConverter.html",
    "title": "Class PairOnOffJsonConverter | cre8magic",
    "keywords": "Class PairOnOffJsonConverter Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Important: NEVER use this on a public class PairOnOffJsonConverter : JsonConverterBase<PairOnOff> Inheritance object JsonConverter JsonConverter<PairOnOff> JsonConverterBase<PairOnOff> PairOnOffJsonConverter Inherited Members JsonConverterBase<PairOnOff>.Logger JsonConverterBase<PairOnOff>.GetOptionsWithoutThisConverter(JsonSerializerOptions) JsonConverterBase<PairOnOff>.ConvertObject(JsonObject, JsonSerializerOptions) JsonConverter<PairOnOff>.CanConvert(Type) JsonConverter<PairOnOff>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<PairOnOff>.WriteAsPropertyName(Utf8JsonWriter, PairOnOff, JsonSerializerOptions) JsonConverter<PairOnOff>.HandleNull JsonConverter<PairOnOff>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNew(ILogger) public static PairOnOffJsonConverter GetNew(ILogger logger) Parameters logger ILogger Returns PairOnOffJsonConverter Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type PairOnOff. public override PairOnOff? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns PairOnOff The converted value. Write(Utf8JsonWriter, PairOnOff?, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, PairOnOff? pair, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. pair PairOnOff options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ToSic.Cre8magic.Client.Settings.SettingsException.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.SettingsException.html",
    "title": "Class SettingsException | cre8magic",
    "keywords": "Class SettingsException Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class SettingsException : Exception, ISerializable Inheritance object Exception SettingsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SettingsException(string) public SettingsException(string message) Parameters message string"
  },
  "api/ToSic.Cre8magic.Client.Settings.SettingsWithInherit.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.SettingsWithInherit.html",
    "title": "Class SettingsWithInherit | cre8magic",
    "keywords": "Class SettingsWithInherit Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class SettingsWithInherit Inheritance object SettingsWithInherit Derived MagicAnalyticsSettings MagicBreadcrumbSettings MagicContainerSettings MagicLanguagesSettings MagicMenuSettings MagicThemeDesignSettings MagicThemeSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Inherits Determines if it inherits another property [JsonPropertyName(\"@inherits\")] public string? Inherits { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Settings Classes DesignSetting Anything that can define what classes it should have. This is usually the base class for something that can also have more information. DesignSettingsJsonConverter<T> Important: NEVER use this on a MagicPackageSettings Settings for a Theme Package. Contains semi-constants like location of assets and configuration for various parts like CSS. MagicSettings The current settings of a page. MagicSettingsCatalog This is a catalog of all kinds of configurations. It serves as a kind of database to manage all configurations, which will usually be retrieved using a name. NamedSettings<T> Case insensitive dictionary managing a list of named settings PairOnOff PairOnOffExtensions PairOnOffJsonConverter Important: NEVER use this on a SettingsException SettingsWithInherit Interfaces IHasMagicSettings IHasSettingsExceptions"
  },
  "api/ToSic.Cre8magic.Client.StringExtensions.html": {
    "href": "api/ToSic.Cre8magic.Client.StringExtensions.html",
    "title": "Class StringExtensions | cre8magic",
    "keywords": "Class StringExtensions Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class StringExtensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.Themes.MagicTheme.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.MagicTheme.html",
    "title": "Class MagicTheme | cre8magic",
    "keywords": "Class MagicTheme Namespace ToSic.Cre8magic.Client.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll Base class for our themes. It's responsible for Some basic properties such as Name, BodyClasses etc. which each theme can configure Adding special classes to the body tag so that the CSS can best optimize for each scenario public abstract class MagicTheme : ThemeBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase MagicTheme Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Thumbnail ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The base class must be abstract, so that Oqtane doesn't see it as a real them. The config-properties must be abstract, so the inheriting files are forced to set them. Fields PaneNameHeader public const string PaneNameHeader = \"Header\" Field Value string Properties Layout The layout name which is used to lookup configurations. The inheriting file is required to specify it. public abstract string Layout { get; } Property Value string MagicAnalytics [Inject] public MagicAnalyticsService? MagicAnalytics { get; set; } Property Value MagicAnalyticsService MagicClasses Sets additional body classes - usually to activate CSS variations for this theme protected abstract string MagicClasses { get; } Property Value string MagicComponents Option to inject dynamic components - mainly for testing inspired by http://www.binaryintellect.net/articles/a92dea29-3218-4d1c-a132-9671b518d1f4.aspx protected List<MagicDynamicComponent> MagicComponents { get; } Property Value List<MagicDynamicComponent> MagicSettingsService [Inject] protected MagicSettingsService MagicSettingsService { get; set; } Property Value MagicSettingsService Name Name to show in the Theme-picker. Must be set by each inheriting theme, which is why it's marked abstract to enforce this. public override abstract string Name { get; } Property Value string Panes Force the user to overwrite panes. public override abstract string Panes { get; } Property Value string Settings The settings of this layout, as loaded from the ThemePackageSettings + JSON public MagicSettings? Settings { get; set; } Property Value MagicSettings ThemePackageSettings This contains the default settings which must be used in this theme. Any inheriting class must specify what it will be. public abstract MagicPackageSettings ThemePackageSettings { get; } Property Value MagicPackageSettings Methods Classes(string) public string? Classes(string target) Parameters target string Returns string Id(string) public string? Id(string name) Parameters name string Returns string OnAfterRenderAsync(bool) Method invoked after each time the component has been rendered interactively and the UI has finished updating (for example, after elements have been added to the browser DOM). Any ElementReference fields will be populated by the time this runs. This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated. Note that the component does not automatically re-render after the completion of any returned Task, because that would cause an infinite render loop. protected override Task OnAfterRenderAsync(bool firstRender) Parameters firstRender bool Set to true if this is the first time OnAfterRender(bool) has been invoked on this component instance; otherwise false. Returns Task A Task representing any asynchronous operation. Remarks The OnAfterRender(bool) and OnAfterRenderAsync(bool) lifecycle methods are useful for performing interop, or interacting with values received from @ref. Use the firstRender parameter to ensure that initialization work is only performed once. OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A Task representing any asynchronous operation. PaneClasses(string) Special classes for divs surrounding panes pane, especially to indicate when it's empty protected string? PaneClasses(string paneName) Parameters paneName string Returns string ThemePath() Make a nicer theme path without the \".Client\" public string ThemePath() Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemeDesignSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemeDesignSettings.html",
    "title": "Class MagicThemeDesignSettings | cre8magic",
    "keywords": "Class MagicThemeDesignSettings Namespace ToSic.Cre8magic.Client.Themes.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Constants and helpers related to creating Css and Css Classes. If you change these, you must also update the SCSS files. public class MagicThemeDesignSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicThemeDesignSettings Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Custom public NamedSettings<DesignSetting> Custom { get; set; } Property Value NamedSettings<DesignSetting> MagicContext public string[] MagicContext { get; set; } Property Value string[] MagicContextTagId public string MagicContextTagId { get; set; } Property Value string PageIsHome public PairOnOff PageIsHome { get; set; } Property Value PairOnOff PaneIsEmpty public PairOnOff PaneIsEmpty { get; set; } Property Value PairOnOff"
  },
  "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemePartSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemePartSettings.html",
    "title": "Class MagicThemePartSettings | cre8magic",
    "keywords": "Class MagicThemePartSettings Namespace ToSic.Cre8magic.Client.Themes.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicThemePartSettings Inheritance object MagicThemePartSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicThemePartSettings() For json public MagicThemePartSettings() MagicThemePartSettings(bool) public MagicThemePartSettings(bool show) Parameters show bool MagicThemePartSettings(string) public MagicThemePartSettings(string name) Parameters name string Properties Configuration public string? Configuration { get; set; } Property Value string Design public string? Design { get; set; } Property Value string Show public bool? Show { get; set; } Property Value bool?"
  },
  "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemeSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemeSettings.html",
    "title": "Class MagicThemeSettings | cre8magic",
    "keywords": "Class MagicThemeSettings Namespace ToSic.Cre8magic.Client.Themes.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicThemeSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicThemeSettings Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Fallback public static MagicThemeSettings Fallback Field Value MagicThemeSettings Properties Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; set; } Property Value MagicDebugSettings Design public string? Design { get; set; } Property Value string LanguagesMin public int LanguagesMin { get; set; } Property Value int Logo The logo to show, should be located in the assets subfolder public string? Logo { get; set; } Property Value string MagicContextInBody public bool? MagicContextInBody { get; set; } Property Value bool? Parts The parts of this theme, like breadcrumbs and various menu configs public NamedSettings<MagicThemePartSettings> Parts { get; set; } Property Value NamedSettings<MagicThemePartSettings>"
  },
  "api/ToSic.Cre8magic.Client.Themes.Settings.ThemePartJsonConverter.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.Settings.ThemePartJsonConverter.html",
    "title": "Class ThemePartJsonConverter | cre8magic",
    "keywords": "Class ThemePartJsonConverter Namespace ToSic.Cre8magic.Client.Themes.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Important: NEVER use this on a public class ThemePartJsonConverter : JsonConverterBase<MagicThemePartSettings> Inheritance object JsonConverter JsonConverter<MagicThemePartSettings> JsonConverterBase<MagicThemePartSettings> ThemePartJsonConverter Inherited Members JsonConverterBase<MagicThemePartSettings>.Logger JsonConverterBase<MagicThemePartSettings>.GetOptionsWithoutThisConverter(JsonSerializerOptions) JsonConverterBase<MagicThemePartSettings>.ConvertObject(JsonObject, JsonSerializerOptions) JsonConverter<MagicThemePartSettings>.CanConvert(Type) JsonConverter<MagicThemePartSettings>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<MagicThemePartSettings>.WriteAsPropertyName(Utf8JsonWriter, MagicThemePartSettings, JsonSerializerOptions) JsonConverter<MagicThemePartSettings>.HandleNull JsonConverter<MagicThemePartSettings>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNew(ILogger) public static ThemePartJsonConverter GetNew(ILogger logger) Parameters logger ILogger Returns ThemePartJsonConverter Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type MagicThemePartSettings. public override MagicThemePartSettings? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns MagicThemePartSettings The converted value. Write(Utf8JsonWriter, MagicThemePartSettings?, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, MagicThemePartSettings? part, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. part MagicThemePartSettings options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ToSic.Cre8magic.Client.Themes.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Themes.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Themes.Settings Classes MagicThemeDesignSettings Constants and helpers related to creating Css and Css Classes. If you change these, you must also update the SCSS files. MagicThemePartSettings MagicThemeSettings ThemePartJsonConverter Important: NEVER use this on a"
  },
  "api/ToSic.Cre8magic.Client.Themes.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.html",
    "title": "Namespace ToSic.Cre8magic.Client.Themes | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Themes Classes MagicTheme Base class for our themes. It's responsible for Some basic properties such as Name, BodyClasses etc. which each theme can configure Adding special classes to the body tag so that the CSS can best optimize for each scenario"
  },
  "api/ToSic.Cre8magic.Client.Tokens.ThemeTokens.html": {
    "href": "api/ToSic.Cre8magic.Client.Tokens.ThemeTokens.html",
    "title": "Class ThemeTokens | cre8magic",
    "keywords": "Class ThemeTokens Namespace ToSic.Cre8magic.Client.Tokens Assembly ToSic.Cre8magic.Client.Oqtane.dll public class ThemeTokens Inheritance object ThemeTokens Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ThemeTokens(MagicPackageSettings) public ThemeTokens(MagicPackageSettings themeSettings) Parameters themeSettings MagicPackageSettings Fields NameIdConstant public const string NameIdConstant = \"ThemeTokens\" Field Value string Properties NameId public string NameId { get; } Property Value string Methods Parse(string) public virtual string Parse(string value) Parameters value string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Tokens.html": {
    "href": "api/ToSic.Cre8magic.Client.Tokens.html",
    "title": "Namespace ToSic.Cre8magic.Client.Tokens | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Tokens Classes ThemeTokens"
  },
  "api/ToSic.Cre8magic.Client.html": {
    "href": "api/ToSic.Cre8magic.Client.html",
    "title": "Namespace ToSic.Cre8magic.Client | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client Classes DictionaryExtensions MagicConstants MagicTokens PageStateMenuExtensions PageStateSecurityExtensions StringExtensions"
  },
  "api/ToSic.Cre8magic.Pages.IMagicPage.html": {
    "href": "api/ToSic.Cre8magic.Pages.IMagicPage.html",
    "title": "Interface IMagicPage | cre8magic",
    "keywords": "Interface IMagicPage Namespace ToSic.Cre8magic.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicPage Properties Breadcrumb The current pages bread-crumb, going from the top-level to the current page. Note that the \"Home\" page is usually not a parent, so it's not included. List<IMagicPage> Breadcrumb { get; } Property Value List<IMagicPage> HasChildren Determines if there are sub-pages. True if this page has sub-pages. bool HasChildren { get; } Property Value bool InBreadcrumb Determine if the menu page is in the breadcrumb. bool InBreadcrumb { get; } Property Value bool IsClickable Link in site navigation is enabled or disabled. bool IsClickable { get; } Property Value bool IsCurrent True if this page is the current page which the user is viewing. bool IsCurrent { get; } Property Value bool Level Current page level from the top of the Menu. As in Oqtane, it's 0 based. int Level { get; } Property Value int Link Link to this page. string Link { get; } Property Value string MenuLevel Level in the menu, starting from 1. As different menus may start at other depths, this is not always the same as the Oqtane level. int MenuLevel { get; } Property Value int Name Page Name. string Name { get; } Property Value string OriginalPage Original Oqtane page wrapped in MagicPage. Page OriginalPage { get; } Property Value Page PageId Id of the Page int PageId { get; } Property Value int ParentId Reference to the parent Page if it has one. int? ParentId { get; } Property Value int? Path Path of the page. string Path { get; } Property Value string Target Target for link to this page. string? Target { get; } Property Value string Url Full URL to this page. string Url { get; } Property Value string"
  },
  "api/ToSic.Cre8magic.Pages.IMagicPageService.html": {
    "href": "api/ToSic.Cre8magic.Pages.IMagicPageService.html",
    "title": "Interface IMagicPageService | cre8magic",
    "keywords": "Interface IMagicPageService Namespace ToSic.Cre8magic.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicPageService Properties All IEnumerable<IMagicPage> All { get; } Property Value IEnumerable<IMagicPage> Current IMagicPage Current { get; } Property Value IMagicPage Home IMagicPage Home { get; } Property Value IMagicPage PageState The page state - must be initialized before using the service. PageState PageState { get; } Property Value PageState Remarks Will throw an error if accessed before initializing. Methods AddState(PageState) IMagicPageService AddState(PageState pageState) Parameters pageState PageState Returns IMagicPageService Get(IEnumerable<int>) IEnumerable<IMagicPage> Get(IEnumerable<int> pageIds) Parameters pageIds IEnumerable<int> Returns IEnumerable<IMagicPage> Get(int) IMagicPage? Get(int pageId) Parameters pageId int Returns IMagicPage"
  },
  "api/ToSic.Cre8magic.Pages.html": {
    "href": "api/ToSic.Cre8magic.Pages.html",
    "title": "Namespace ToSic.Cre8magic.Pages | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Pages Interfaces IMagicPage IMagicPageService"
  },
  "contribute/changelog.html": {
    "href": "contribute/changelog.html",
    "title": "Change Log | cre8magic",
    "keywords": "cre8magic Change Log Version 0 2022-10-07 v0.0.2 Made menu design settings support inherit Added json schema and published to https://2sic.github.io/cre8magic/schemas/2022-10/theme.json 2022-10-05 v0.0.1 Initial release for use on blazor-cms.org Named settings for layouts, breadcrumbs, menus Named settings for the design of layouts, breadcrumbs, menus A bunch of base clases for Razor A bunch of services to make it happen MagicContext, MagicSettings, MagicConfigurations etc."
  },
  "contribute/gh-pages.html": {
    "href": "contribute/gh-pages.html",
    "title": "Documentation is hosted with GitHub Pages | cre8magic",
    "keywords": "Documentation is hosted with GitHub Pages Public documentation: https://cre8magic.blazor-cms.org GitHub Pages are powered by docfx. cd docs docfx --serve browse http://localhost:8080/"
  },
  "controls/magic-menu.html": {
    "href": "controls/magic-menu.html",
    "title": "Magic Menu | cre8magic",
    "keywords": "cre8magic – Magic Menu A core challenge with any website is creating great menus. There are actually three distinct problems to solve: Managing multiple menus on the same page the main menu possibly a side-menu with sub-pages a footer menu for disclaimer and privacy multiple menus in the footer for mega-footers with many links Configuration for selecting the pages which should appear in the menu where to start (like a menu which start at level 2) what pages to show (like all the pages on level 2 - or only their children) how deep to go (do we show submenus?) Design for styling of each node based on the context is the current node selected? add active... is the current node a parent of the selected node? add is-parent... is the current node a dropdown for pages beneath it... Manage Multiple Menus The MagicMenu gives each menu a name, such as Main, Sidebar, Footer etc. You can determine these names in the Razor files. Each of these menus can then be configured in the JSON. By default, each menu will find it's configuration and it's design based on the same name. So the Main menu would take the configuration and design called Main. But you can also reconfigure this. For example, you could say that the Theme Sidebar will use the configuration TopLevelOnly for the Main menu. This is configured in the parts of the themes section of the JSON file. Menu Configuration The menu configuration determines some important aspects such as What node to start from - eg. * is the top level, . is the current page What to do from the start - like \"children\": true means \"begin with the children\" of the start-node What level to show - so \"start\": \".\", \"level\": -1 means to start one level above the current page How deep to go, so \"depth\": 2 would show the starting level and one more All this is configured in the menus section of the JSON. Start Values These are accepted values of the node start: * root . current page 42 the page 42 5! the page 5 even if it's normally not visible in a menu 42, 5! combinations thereof The following parameters will also influece what is shown on the first level: \"start\": \".\", \"children\": true starts with children of the current page \"start\": \"42\", \"children\": true starts with children of page 42 - ideal for footer or system-menus \"start\": \".\", \"level\": 2 starts with the page on level 2 which is above the current page \"start\": \".\", \"level\": -1 starts with the page one level above the current page you can also combine start=. level=-1 and children=true for further desired effects Depth The depth must always be at least 1 and determines how many levels downwards the nodes are rendered. Menu Design This is one of the most sophisticated bits of the JSON settings. You can configure this in the menuDesigns section of the JSON. Note that this uses the Magic Classes and Magic Tokens. Example: \"menuDesigns\": { \"Mobile\": { \"ul\": { \"byLevel\": { \"1\": \"navbar-nav\", \"-1\": \"collapse theme-submenu-[Menu.Id]-[Page.Id]\" }, \"inBreadcrumb\": \"show\" }, \"li\": { \"classes\": \"nav-item nav-[Page.Id] position-relative\", \"hasChildren\": \"has-child\", \"isActive\": \"active\", \"isDisabled\": \"disabled\" }, \"a\": { \"classes\": \"nav-link mobile-navigation-link\", \"isActive\": \"active\" }, \"span\": { \"classes\": \"nav-item-sub-opener\", \"inBreadcrumb\": [ null, \"collapsed\" ] }, // Special target information (not really styling) usually on the span-tag \"data-bs-target\": \".theme-submenu-[Menu.Id]-[Page.Id]\" }, } This means a lot of things, but let's highlight some aspects: the surrounding <ul> tag will get the navbar-nav class at the first level; all others will get collapse and others the <ul> will also get a menu and page specific class because of the theme-submenu-[Menu.Id]-[Page.Id] which is useful for the collapse identification in bootstrap the <li> of each node will get some classes including an active if it's the current page, and has-child if it has children so that the bootstrap menu will do it's magic the <a> link itself will also have different classes based on active the <span> is used to show a +/- indicator using the nav-item-sub-opener ...and it will also get's collapsed if it's not in the breadcrumb (so it's only opened if a sub-page is the current page) and a special attribute used by bootstrap data-bs-target will have the same contents as the identifying class of the surrounding <ul> to ensure bootstrap will work Missing Features As of now you cannot filter out specific pages. For this you would still need to write your own code or construct your nav-tree for special cases. You cannot link to page in another language, as Oqtane doesn't really have this concept yet. History Added in v0.0.1 2022-10 with 80% coverage of what DDR Menu had in DNN"
  },
  "get-started/how-it-works.html": {
    "href": "get-started/how-it-works.html",
    "title": "cre8magic – How It Works | cre8magic",
    "keywords": "cre8magic – How It Works Below we'll give you an example of what you would normally have, and how it would be done with cre8magic. Example Problem: Smart Module Containers Let's assume you have a container which is a bunch of div tags and a bit of CSS. In this example we have two features we are using a special ID for CSS targeting (for special cases where we wish to have CSS for a very specific module) some CSS classes which could vary depending on certain factors - such as if it's unpublished to show something is wrong Classic Solution @inherits Oqtane.Themes.ContainerBase <div id='module-@ModuleState.ModuleId' class='to-shine-background-container py-4 @(CheckIfModulePublished() ? \"\" : \"module-unpublished\") @(ModuleState.UseAdminContainer ? \"to-shine-admin-container\" : \"...\")'> <div class=\"container\"> <Oqtane.Themes.Controls.ModuleActions/> <ModuleInstance/> </div> </div> @code { public bool CheckIfModulePublished() { return UserSecurity.ContainsRole(ModuleState.Permissions, PermissionNames.View, RoleNames.Everyone); } } Based on this example you can see, that there is a mix of logic and design which is hard to read hard for a designer to develop error prone hard to maintain Simple with cre8magic Here's how it works with cre8magic: @inherits MagicContainer <div id='@Value(\"Id\")' class='@Classes(\"div\")'> <div class=\"container\"> <Oqtane.Themes.Controls.ModuleActions/> <ModuleInstance/> </div> </div> For the system to know what it should do, there are Magic Settings which are easy to manage. Below we're only showing the settings relevant to this example, there are of course more: { \"themeDesigns\": { \"Default\": { // ...a lot of settings not relevant for this example... // Container Designs determine CSS classes on containers // The default/normal container \"container\": { \"classes\": \"theme-container py-4 demo-module-[Module.Id] demo-page-[Page.Id]\", \"isPublished\": [null, \"module-unpublished\"], \"isAdmin\": \"theme-container-admin app-admin-modal\", \"id\": \"module-[Module.Id]\" }, } } } The Magic in the Background cre8magic will do a bunch of things in the background, such as: Load configuration from the DB targeting the page (WIP) the DB targeting a branch in the menu (WIP) the DB targeting the site (WIP) JSON targeting all kinds of scenarios defaults in your code (not recommended) final defaults in cre8magic Flatten configurations to match the current theme Use names to find the configuration for the theme Use further names to find the configuration for each part, such as Menus, Breadcrumbs etc. Flatten all to the current scenario Broadcast these flattened Magic Settings from the Theme to all Controls Initialize the proper settings Broadcast these settings to all controls that are somewhere within the theme object tree Provide simple accessors The MagicTheme, MagicContainer, MagicControl etc. all pick up the settings automatically ...and have special APIs such as @Classes(...) helpers to retrieve the values Process Tokens Settings can contain tokens such as [Module.Id] which will be rendered into the final result TL;DR You got this far? Let's go back to home and start designing! 👉🏾 Home"
  },
  "get-started/index.html": {
    "href": "get-started/index.html",
    "title": "Get Started | cre8magic",
    "keywords": "Get Started with cre8magic Install cre8magic As of 2022-10 cre8magic is still beta, so you would need to get it from github and compile. In 2022-12 we plan to release it on nuget."
  },
  "index.html": {
    "href": "index.html",
    "title": "cre8magic for Oqtane – Professional Theme Design | cre8magic",
    "keywords": "cre8magic for Oqtane – Professional Theme Design 🪄🪄🪄 Create Magic / Stunning / Amazing Designs on Oqtane 🪄🪄🪄 Oqtane is a Blazor based platform to create awesome solutions. It is heavily inspired by the Site/Page/Module model used in DNN. So it's almost ready to create awesome websites and CMS solutions. But there are two missing pieces (☮️) to create amazing websites: Real Content-Management features - which can be done with the extension 2sxc Tools to make designing themes fast and professional - enter: cre8magic cre8magic makes Oqtane Designer-Friendly As a designer, you need certain tools and workflows to be efficient, such as: the ability to make a small change and then reload the page to see the result the need to focus on the what (like the design), without wasting time on the how (like C# code to create the menu) the ability to create variations of your work, such as other layouts which are similar every tool you add (such as cre8magic) should help, but never restrict These aspects are important for the productivity of every designer. Now if you've worked with Oqtane (or Blazor for that matter) you will quickly see that this is not possible. This means you can whatever you want, but there is a lot of code involved, and a lot of time-consuming restarts. cre8magic takes care of all these problems 🚀 cre8magic combines very simple Razor and lets you do everything through settings. Most layouts have very similar HTML, but do vary a bit. For example, it could have different CSS classes to give it the look you need or a different logo file. imagine tweaking this at runtime (without compiling) 😏 Overview This is how cre8magic enhances Oqtane so that your Theme can focus on the design: The resulting page will usually have something like this: 👉🏾 Discover how it works See a Working Example and Get Started Since this is a library, just reading the docs won't cut it. It's best to see this in action on a real-life example. Try the ToShine Theme Template, it will make things much easier to understand. 👉🏼 See 2shine Theme Template 👉🏼 See Get Started What's in the Magic Box Magic Settings: A Settings / Configuration System 👉🏾 see Magic Settings 👉🏾 see Settings JSON file 👉🏾 see JSON schema Magic Context Magic Values, Classes and more Magic Tokens Magic Languages Magic Menu Magic Razor Base Classes These are the important base classes which your Razor files will inherit. All have in common, that they know about the theme-wide Settings and provide helper methods to get things done easily and quickly, with as little code as possible. Theme / Container Level Base Classes MagicTheme - the foundation for Themes MagicContainer - the foundation for Containers Important Base Controls / Components MagicLanguages is the base for the languages menu MagicBreadcrumbs is the base for the breadcrumbs MagicMenuRoot is the base for menu entry point, loading the configuration, nodes etc. MagicMenuBase is the base for each menu type, like Horizontal, Vertical, Mobile, ... MagicLogin is the base for login/logout icons and texts Generic Base Controls / Base Components These are meant for any other custom controls that you have. MagicControl is for razor controls that has the Octane API (it inherits from ThemeControlBase) MagicComponent is for razor controls with just the basic Razor API (inherits from ComponentBase) Magic Razor Controls / Components These are standalone controls for you to use, which you will normally just use but not inherit, as they already have their HTML output or something. Anything we refer to as a Control inherits from the Oqtane ThemeControlBase, while things we refer to as a Component inherit from the .net ComponentBase. Functional Controls / Components MagicOqtaneControlPanel a control which adds the main control panel for admins MagicContextAndSettings a wrapper used in every theme to ensure MagicContext and MagicSettings work Debug and Error Handling MagicExceptions a control showing important errors to admins MagicMenuDebug a debug helper to see what configuration a menu has and why MagicLanguagesDebug a debug helper to see what configuration the languages have MagicThemeDebug debug helper to see all the current settings on this theme"
  },
  "roadmap/history.html": {
    "href": "roadmap/history.html",
    "title": "Roadmap | cre8magic",
    "keywords": "Roadmap Working on v0.02 2024-11 Here we want to make it more architecturally sound, and more modular. Goal is that some developers may only want to use certain services to make their life easier. These people may not care about the settings system, projections or even styling system. But those automations should still exist for most projects that just want to get things done. So the goal is kind of the following - based on an example of the menu system: Services We probably need some primary service which will do most of the work, To ensure that our startup logic is able to retrieve other services as well... Factories Have a service - probably called ToSic.Cre8Magic.Pages.MagicPagesService - which is used to prepare the data for various use cases such as: Menu Breadcrumbs Sitemap Single pages which are smarter etc. These services should have a simple API but be able to do \"everything\" This should either be a named-params system Or a fluent API (TBD) Samples which just use the service, and custom Razor to do everything else. More Thoughts Probably remove the \"Client\" part in the namespace Probably make a topic based namespace system, not a model/services/controls system ? or the other way around? Unit tests? Possibly make smaller DLLs?, like a Core, A pages, etc. First Beta v0.01 2022-10 This was the first version of the project. It was made to test various concepts such as: Simple Bootstrap 5 Themes which can be easily customized without recompiling. Settings-System which projects the configuration(s) to the various themes and components. Creating various \"standard\" components that just do everything right. This system had some improtant shortcomings, such as: Black box - things magically worked - or didn't We tried to compensate a lot of this with logging, but that only helped if you already knew a lot of the systems internals."
  },
  "roadmap/index.html": {
    "href": "roadmap/index.html",
    "title": "Roadmap | cre8magic",
    "keywords": "Roadmap Working on v2 2024-11 As of 2022-10 cre8magic is still beta, so you would need to get it from github and compile. In 2022-12 we plan to release it on nuget."
  },
  "system/magic-context.html": {
    "href": "system/magic-context.html",
    "title": "Magic Context | cre8magic",
    "keywords": "cre8magic – Magic Context The Magic Context adds a bunch of classes to the <body> or a wrapper <div> tag which contain information about the current state. This allows you to then write CSS rules, which change the look / feel of the page based on certain aspects. Example The wrapper <div> could look like this: <div id=\"cre8magic-root\" class=\"page-35 page-root-29 page-parent-33 site-1 nav-level-3 theme-mainnav-variation-right theme-variation-centered\"> <!-- the contents of the page--> </div> This tells you a bunch of things such as: This is page #35 - allows you to do things like special colors for exactly this page The page is in the tree of the root #29 - so you could use special colors for all the pages in this branch The pages parent is #33 - again letting you write custom CSS We are on site #1 - in case you have different styles based on the site number We are currently on the nav-level 3 - this could affect your breadcrumb or something We are in a specific layout type and navigation type How this Works Basically all this happens automatically, if your json configuration has magicContext of something like this: { \"magicContext\": [ \"page-[Page.Id]\", \"page-root-[Page.RootId]\", \"page-parent-[Page.ParentId]\", \"site-[Site.Id]\", \"nav-level-[Menu.Level]\", \"theme-mainnav-variation-right\", \"theme-variation-[Layout.Variation]\" ] } You can of course add your own rules with other placeholders to make this happen. Configuration You can determine if this will be added to a <div> or the <body> using the setting magicContextInBody If it's on the body, it will be put there using JavaScript, so there may be a minimal flash-of-unexpected-styling if you put it in the div, it will always be there You can also change the id of the <div> tag if you want to change how your CSS behaves. The id can be set on the magicContextTagId Missing Features As of 2022-10 there are no magic context classes for languages yet, as Oqtane doesn't fully support Multi-Language. We'll add it as soon as possible. History Added in v0.0.1 2022-10"
  },
  "system/magic-languages.html": {
    "href": "system/magic-languages.html",
    "title": "Magic Languages | cre8magic",
    "keywords": "cre8magic – Magic Languages The languages need three things to work as expected: They need to know if they should show They need to know what languages to show and what labels to use They need to be styled cre8magic makes this happen using these parts: The theme.json which has all the configurations The themes section determines if the menu should show using parts.languages The themes section also has a languagesMin which would hide the languages if there are less than X languages (usually it needs at least 2) The languages section has configurations for what languages to show and what labels to use The themeDesigns section determines how it should look - ATM there is only one key languages-li since the rest has sufficient automatic class names to cover all known styling cases The Magic Settings which will parse the json and provide the parts we need The base Razor MagicLanguages prepares everything so you can inherit from it and create the output as needed How to Use Best check the reference implementation on 2shine Template Theme History All created in v0.0.1 2022-10"
  },
  "system/magic-settings.html": {
    "href": "system/magic-settings.html",
    "title": "cre8magic – Magic Settings | cre8magic",
    "keywords": "cre8magic – Magic Settings Magic Settings allow you to move 95% of the theme code into some kind of configuration. Overview Basically the magic settings let you put a bunch of parameters in a JSON file. This file is then used by your Theme and it's Controls to determine what Blazor files to use (like what Template should be used for the menu) what to do with class=\"...\" or id=\"...\" in the HTML and much more 😉 This basic principle allows you to create and tweak amazing designs without ever recompiling the Theme. It also allows you to create variations of your theme with the same Blazor files. Example JSON See settings-json to see an example file. The Configuration File The system works by creating a json file such as theme-settings.json. This is placed in your themes wwwroot folder like this: wwwroot/ToSic.Themes.BlazorCms/theme-settings.json Note that we don't use ...Client in the path, just the real namespace. Which file to use can be configured in the theme. Normally you would use the same file for all variations of your theme, but the important thing is that the theme must give some initial configuration object to the cre8magic Services. Here's how: Create the MagicPackageSettings This could be done anywhere, but I would place the code in the ThemeInfo.cs file: /// <summary> /// Default settings used in this package. /// They are defined here and given as initial values to the ThemeSettingsService in the Default Razor file. /// </summary> public static MagicPackageSettings ThemePackageDefaults = new() { // The package name is important, as it's used to find assets etc. PackageName = new ThemeInfo().Theme.PackageName, // The json file in the theme folder folder containing all kinds of settings etc. SettingsJsonFile = \"theme-settings.json\", }; Tell the Theme to Use these Settings Then in the theme, you should inherit from the MagicTheme base class and set the ThemePackageSettings like this: public override MagicPackageSettings ThemePackageSettings => ThemeInfo.ThemePackageDefaults; This would usually look a bit like this: public abstract class MyThemeBase : MagicTheme { public override List<Resource> Resources => new() { new() { ResourceType = Stylesheet, Url = $\"{ThemePath()}theme.min.css\" }, // Bootstrap generated with Sass/Webpack new() { ResourceType = Script, Url = $\"{ThemePath()}bootstrap.bundle.min.js\" }, // Bootstrap JS new() { ResourceType = Script, Url = $\"{ThemePath()}ambient.js\", }, // Ambient JS for page Up-button etc. }; /// <summary> /// The ThemePackageSettings must be set in this class, so the Settings initializer can pick it up. /// </summary> public override MagicPackageSettings ThemePackageSettings => ThemeInfo.ThemePackageDefaults; public override string Panes => string.Join(\",\", PaneNames.Default, PaneNameHeader); } that's it ✌🏽 How the Settings Work Internally the MagicSettingsService will be initialized automatically by the MagicTheme base class. It will then go and pick up the JSON file, parse it, do a bunch of magic and come back with a final MagicSettings object. This MagicSettings will then contain all the important settings for the current page/theme. It will also keep a reference to other settings such as Menus for which many configurations can exist. How the Settings are Broadcast A key feature of this system is that the settings are initially loaded in the theme, and then broadcast to all controls used in that theme. To make this happen, the theme must wrap everything in a MagicContextAndSettings tag: <MagicContextAndSettings Settings=\"Settings\"> Content </MagicContextAndSettings> This will do a few things Make sure that the inner content is only shown if Settings are loaded - otherwise show a loading settings... text Broadcast the MagicSettings with the name Settings to all child controls using CascadingValue. It will also ensure that the MagicContext is set on the page TODO: EXPLAIN SETTINGS MORE Continue... Then continue back to the 👉🏾 Home"
  },
  "system/magic-tokens.html": {
    "href": "system/magic-tokens.html",
    "title": "Magic Tokens | cre8magic",
    "keywords": "cre8magic – Magic Tokens Most settings will be parsed through a tokens-engine which will convert all kinds of tokens such as [Page.Id] into their respective value. Note that each context is different. For example, when parsing settings at the page level, [Page...] tokens will work, but [Module...] tokens will not work. Note: The list of tokens is still work in progress Purpose of cre8magic Tokens The purpose of these tokens is for use in configurable values - such as classes on HTML tags. They are currently not going to give you all possible values, for eg. there is no [Module.Title] token since there is no good reason to use this in such scenarios. If you need those values in your HTML (eg. to create special hover-labels) you would just do that in Razor code. Site Tokens Site tokens work everythere. As of now we have these site tokens: [Site.Id] - ID of the current site Theme Tokens Assets tokens work everywhere. As of now we have these assets tokens: [Theme.Url] - the url like Themes/your-theme-name for where your files should be note: it doesn't have leading or trailing slash, so you would use [Theme.Path]/Assets/logo.svg note: it also doesn't have wwwroot as that is never in the public URL Page Tokens Page tokens work everywhere. They are especially useful in creating menus. As of now we have these page tokens: [Page.Id] - ID of the current page [Page.ParentId] - ID of the pages parent page or none [Page.RootId] - ID of the root page in the tree leading to this page or none Module Tokens Module Tokens work on Containers only. As of now we have these module tokens: [Module.Id] - ID of the current module Module Type Information [Module.Namespace] - the name like Oqtane.Modules.HtmlText of the current module ideal to add to containers where you wish to have special styling for special types of modules this uses the namespace, without the final control name [Module.Control] - the control name like Index of the current module ideal to specify even more specific styling from the namespace the final control name ~[Module.Name]~ - the name like HtmlText of the current module (from the namespace, without the final control name) impossible to implement because each module will have different namespace conventions, so finding the real name isn't possible Layout Tokens TODO: Menu Tokens Menu Tokens work on Menus only. As of now we have these menu tokens: [Menu.Id] - ID of the menu which is normally randomly generated to ensure that each menu is unique for collapse/uncollapse [Menu.Level] - level of the menu which can be different for the page level, as menus that start at level 2 still have the first items on menu level 1 How it Works As of v0.1 2022-Q3 it's still a simple search-and-replace. We plan to use a more powerfull RegEx in the near future."
  },
  "system/magic-values.html": {
    "href": "system/magic-values.html",
    "title": "Magic Values | cre8magic",
    "keywords": "cre8magic – Magic Values, Classes and More Almost all design work is done using very few changes to the HTML. The only thing we usually must do, is: set some id properties set some class properties - often based on the context (so the pane may need pane-is-empty) set some values - such as data-bs-toggle cre8magic makes this happen using these parts: The theme.json which has all the configurations The Magic Settings which will parse the json and provide the parts we need Various Desiger helpers which will do some magic and add context The Magic Tokens which will replace things such as [Page.Id] if it was used in class strings Simple helper methods such as Classes(name), Value(name) or Id(name) on all the Magic Razor base classes like the MagicMenu, MagicBreadcrumbs or MagicContainer How to Use Basically all your controls must usually do is write HTML along these lines: @inherits MagicContainer <!-- some code parts skipped for brevity --> <div id='@Id(\"container\")' class='@Classes(\"container\")'> <div class=\"container\"> <Oqtane.Themes.Controls.ModuleActions/> <ModuleInstance/> </div> </div> ...and of course make sure the values for the above mentioned container exist in the theme.json. Everything else just works magically. Razor API All the Magic* Razor controls have the following methods to make like easier: Classes(name) Value(name) Id(name) A few have some extra methods, such as these: The MagicTheme also has a PaneClasses(name) to also add something to change styling if the pane is empty History All created in v0.0.1 2022-10"
  },
  "system/theme-json.html": {
    "href": "system/theme-json.html",
    "title": "JSON Settings File | cre8magic",
    "keywords": "cre8magic – Magic Settings – JSON Settings File cre8magic uses JSON to enable fast and flexible configuration of your theme. It is used by Magic Settings to load all the initial information. This document explains the json file and everything you must know, such as: Special tricks to make work easier such as comments The general file format and sections Named configurations What can be configured in each section Special nodes which can accept string or more complex data Example JSON Here's a brief extract of such a configuration file (here's a live example): { // By specifying a schema we get intellisense in this JSON \"$schema\": \"https://2sic.github.io/cre8magic/schemas/2022-10/theme.json\", \"version\": 0.01, // Global debug settings \"debug\": { \"allowed\": true, // The most important setting - if this is false, nothing else will happen \"admin\": true, // Enable everywhere for admin \"anonymous\": true, // Enable everywhere for anonymous }, // Theme Configurations \"themes\": { // Default Theme - in most cases you'll just use this theme configuration \"Default\": { // Optional: Design Names with \"=\" mean they inherit / use the name already existing - in this case \"Default\" \"design\": \"=\", \"logo\": \"[Theme.Url]/assets/logo.svg\", \"languagesMin\": 1, \"parts\": { \"breadcrumbs\": true, // ...more stuff here... }, // Determins if we should use the body (or a div) for the magic context // As of now we feel that browser behavior is better if it's in the div-tag (false) \"magicContextInBody\": false, \"debug\": { \"admin\": true, } }, }, // ...more stuff here... } Special Tricks in the File The file will be parsed by .net, but we've activated some special features to make life easier: Comments are allowed Trailing commas are allowed Almost all node names are case insensitive, so \"Default\" and \"default\" are treated the same Make sure you add the \"$schema\" node as you see above, to get help and instructions editing the JSON General File Format and Sections Sections The theme-settings.json contains these primary nodes: version * (just version information) debug * for showing additional debug buttons on the page themes for the main settings of a specific theme such as Logo, breadcrumbs on/off, etc. themeDesigns has the configuration for CSS classes to be used in various places languages contains configuration for languages to show in the menu menus contains configuration for what menus show what nodes, like top-level with sub-level, etc. menuDesigns contains a bunch of rules for how menus should be styled, such as classes to use on the active node etc. Named Configurations All of the nodes above (except those marked with *) can have many different, named configurations. So you'll see something like this: { \"themes\": { // The default configuration is taken if no other configuration is used \"Default\": { // ...stuff... }, // Alternate configuration for theme with menu on the side \"Sidebar\": { // ...stuff... }, } } This means that there is a configuration called Default and one called Sidebar which will do something different. @inherits Does Exactly What it Says Example from the menuDesigns { \"mobile\": { \"ul\": { \"byLevel\": { \"1\": \"navbar-nav\", \"-1\": \"collapse theme-submenu-[Menu.Id]-[Page.Id]\" }, \"inBreadcrumb\": \"show\" }, \"li\": { \"classes\": \"nav-item nav-[Page.Id] position-relative\", \"hasChildren\": \"has-child\", \"isActive\": \"active\", \"isDisabled\": \"disabled\" }, \"a\": { \"classes\": \"nav-link mobile-navigation-link\", \"isActive\": \"active\" }, \"span\": { \"classes\": \"nav-item-sub-opener\", \"inBreadcrumb\": [ null, \"collapsed\" ] }, // Special target information (not really styling) usually on the span-tag \"data-bs-target\": \".theme-submenu-[Menu.Id]-[Page.Id]\" }, \"sidebar\": { \"@inherits\": \"Mobile\", \"a\": { // This is the only difference to Mobile \"classes\": \"nav-link\" } } } Short and Long Notations for True/False settings Most properties which indicate a binary true/false value like isActive or hasChildren can be configured two ways: \"isActive\": \"some-class-when-active\" \"isActive\": [\"active-class\", \"not-active-class\"] \"isActive\": [null, \"not-active-class\"] Short and Long Notations for Complex Objects Certain objects have a long notation, but can be shortened to just a string or bool if it's obvious what is meant. For example, the parts in the themes section would be: \"breadcrumbs\": { \"show\": true, \"design\": \"special-design-name\", \"configuration\": \"special-config-name\" } But this can be abbreviated to: \"breadcrumbs\": true - assumes show=true and design/configuration use the current name \"breadcrumbs\": \"name\" - assumes show=true and the design/config use the specified name This setup also works for all the design settings where you can do: \"container\": \"some string\" - in this case, classes/value get this, everyhing else is empty Intellisense using $schema To get help editing the file, add the $schema to your document. Your editor (at least VS Code) will then help you fill in everything you need. \"$schema\": \"https://2sic.github.io/cre8magic/schemas/2022-10/theme-configurations.schema.json\""
  }
}