{
  "api/ToSic.Cre8magic.Act.IMagicHat.html": {
    "href": "api/ToSic.Cre8magic.Act.IMagicHat.html",
    "title": "Interface IMagicHat | cre8magic",
    "keywords": "Interface IMagicHat Namespace ToSic.Cre8magic.Act Assembly ToSic.Cre8magic.Client.Oqtane.dll This is the magic hat from which you can pull just about anything you can think of. public interface IMagicHat Methods AnalyticsKit(MagicAnalyticsSettings?) Get a kit to work with analytics. IMagicAnalyticsKit AnalyticsKit(MagicAnalyticsSettings? settings = null) Parameters settings MagicAnalyticsSettings Optional settings. If not provided, will try to automatically find the settings as configured in the Theme. Returns IMagicAnalyticsKit BreadcrumbKit(MagicBreadcrumbSettings?) Get the Kit to work with a Breadcrumb. It will either use the provided settings, retrieve these from the global information or use a default settings. IMagicBreadcrumbKit BreadcrumbKit(MagicBreadcrumbSettings? settings = null) Parameters settings MagicBreadcrumbSettings Returns IMagicBreadcrumbKit ContainerKit(MagicContainerSettings) Get a kit to work with containers. IMagicContainerKit ContainerKit(MagicContainerSettings settings) Parameters settings MagicContainerSettings Required; must provide the ModuleState as a property and (if not specified in the Theme) also the PageState Returns IMagicContainerKit LanguageKitAsync(MagicLanguageSettings?) Get the kit to work with languages. Must be async, because it might need to load async data from Oqtane. Task<IMagicLanguageKit> LanguageKitAsync(MagicLanguageSettings? settings = null) Parameters settings MagicLanguageSettings Returns Task<IMagicLanguageKit> Link(PageState, MagicLinkSpecs) string Link(PageState pageState, MagicLinkSpecs linkSpecs) Parameters pageState PageState linkSpecs MagicLinkSpecs Returns string MenuKit(MagicMenuSettings?) IMagicMenuKit MenuKit(MagicMenuSettings? settings = null) Parameters settings MagicMenuSettings Returns IMagicMenuKit PageContextKit(MagicPageContextSettings?) IMagicPageContextKit PageContextKit(MagicPageContextSettings? settings = null) Parameters settings MagicPageContextSettings Returns IMagicPageContextKit ThemeKit(MagicThemeSettings?) IMagicThemeKit ThemeKit(MagicThemeSettings? settings = null) Parameters settings MagicThemeSettings Returns IMagicThemeKit UsePageState(PageState) IMagicHat UsePageState(PageState pageState) Parameters pageState PageState Returns IMagicHat UseSettingsCatalog(MagicSettingsCatalog) IMagicHat UseSettingsCatalog(MagicSettingsCatalog catalog) Parameters catalog MagicSettingsCatalog Returns IMagicHat UseSettingsPackage(MagicThemePackage, string?) IMagicHat UseSettingsPackage(MagicThemePackage themePackage, string? layoutName = null) Parameters themePackage MagicThemePackage layoutName string Returns IMagicHat UseSettingsProvider(Func<IMagicSettingsProvider, IMagicSettingsProvider>) IMagicHat UseSettingsProvider(Func<IMagicSettingsProvider, IMagicSettingsProvider> providerFunc) Parameters providerFunc Func<IMagicSettingsProvider, IMagicSettingsProvider> Returns IMagicHat User(PageState) MagicUser User(PageState pageState) Parameters pageState PageState Returns MagicUser UserLoginKit(MagicUserLoginSettings?) IMagicUserLoginKit UserLoginKit(MagicUserLoginSettings? settings = null) Parameters settings MagicUserLoginSettings Returns IMagicUserLoginKit"
  },
  "api/ToSic.Cre8magic.Act.MagicSettingsExtensions.html": {
    "href": "api/ToSic.Cre8magic.Act.MagicSettingsExtensions.html",
    "title": "Class MagicSettingsExtensions | cre8magic",
    "keywords": "Class MagicSettingsExtensions Namespace ToSic.Cre8magic.Act Assembly ToSic.Cre8magic.Client.Oqtane.dll Extensions for working with MagicSettings, to make the API more fluent and easier to use. public static class MagicSettingsExtensions Inheritance object MagicSettingsExtensions Remarks Despite it being related to Settings (which would normally be in ToSic.Cre8magic.Settings), it's in the Act namespace because it's usually used in the basic work which starts in this namespace. This makes it easier for most components to just use this namespace and little else. Methods RefillLookup<TSettings>(TSettings?, MagicSettingsLookup) public static TSettings RefillLookup<TSettings>(this TSettings? settings, MagicSettingsLookup lookup) where TSettings : MagicSettingsBase, new() Parameters settings TSettings lookup MagicSettingsLookup Returns TSettings Type Parameters TSettings Refill<TSettings>(TSettings?, PageState) Fill in the PageState if not yet set. This is to set the value if it's missing, but preserve any existing one. Alternative is With<TSettings>(TSettings?, PageState) public static TSettings Refill<TSettings>(this TSettings? settings, PageState pageState) where TSettings : MagicSettingsBase, new() Parameters settings TSettings The initial settings object - can be null (in which case a fresh one is created) pageState PageState The PageState to back-fill Returns TSettings Type Parameters TSettings The settings-type we're updating. Refill<TSettings, TWith>(TSettings?, TWith?) public static TSettings Refill<TSettings, TWith>(this TSettings? settings, TWith? addition) where TSettings : MagicSettingsBase, IWith<TWith?>, new() where TWith : class Parameters settings TSettings addition TWith Returns TSettings Type Parameters TSettings TWith WithLookup<TSettings>(TSettings?, MagicSettingsLookup) public static TSettings WithLookup<TSettings>(this TSettings? settings, MagicSettingsLookup lookup) where TSettings : MagicSettingsBase, new() Parameters settings TSettings lookup MagicSettingsLookup Returns TSettings Type Parameters TSettings With<TSettings>(TSettings?, PageState) Add a PageState to a settings object. This uses normal record with manipulations, so it creates a new object but preserves all other settings. Alternative when only filling empty Refill<TSettings>(TSettings?, PageState) public static TSettings With<TSettings>(this TSettings? settings, PageState pageState) where TSettings : MagicSettingsBase, new() Parameters settings TSettings The initial settings object - can be null (in which case a fresh one is created) pageState PageState The PageState Returns TSettings Type Parameters TSettings The settings-type we're updating. With<TSettings, TWith>(TSettings?, TWith?) public static TSettings With<TSettings, TWith>(this TSettings? settings, TWith? addition) where TSettings : MagicSettingsBase, IWith<TWith?>, new() where TWith : class Parameters settings TSettings addition TWith Returns TSettings Type Parameters TSettings TWith"
  },
  "api/ToSic.Cre8magic.Act.html": {
    "href": "api/ToSic.Cre8magic.Act.html",
    "title": "Cre8magic Act - the starting of any amazing performance on Oqtane | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Act The starting point for your code. Contains the MagicHat and more. The Starting Act of Your Amazing Oqtane Performance This is the entry-point namespace for any great work with Cre8magic. It contains the MagicHat which is the main entry-point for all of your magic. Classes MagicSettingsExtensions Extensions for working with MagicSettings, to make the API more fluent and easier to use. Interfaces IMagicHat This is the magic hat from which you can pull just about anything you can think of."
  },
  "api/ToSic.Cre8magic.Analytics.IMagicAnalyticsKit.html": {
    "href": "api/ToSic.Cre8magic.Analytics.IMagicAnalyticsKit.html",
    "title": "Interface IMagicAnalyticsKit | cre8magic",
    "keywords": "Interface IMagicAnalyticsKit Namespace ToSic.Cre8magic.Analytics Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicAnalyticsKit Properties Settings MagicAnalyticsSettings Settings { get; init; } Property Value MagicAnalyticsSettings Methods TrackPage(bool) Simplest way to track a page, assumes that the settings are injected from a Settings Source. Will take the PageState and - depending on the settings - track the view in Google Analytics. Must run in OnAfterRenderAsync for now Task TrackPage(bool isFirstRender) Parameters isFirstRender bool Returns Task"
  },
  "api/ToSic.Cre8magic.Analytics.IMagicAnalyticsService.html": {
    "href": "api/ToSic.Cre8magic.Analytics.IMagicAnalyticsService.html",
    "title": "Interface IMagicAnalyticsService | cre8magic",
    "keywords": "Interface IMagicAnalyticsService Namespace ToSic.Cre8magic.Analytics Assembly ToSic.Cre8magic.Client.Oqtane.dll Service to help with Google Analytics Tracking. public interface IMagicAnalyticsService Methods AnalyticsKit(PageState, MagicAnalyticsSettings?) IMagicAnalyticsKit AnalyticsKit(PageState pageState, MagicAnalyticsSettings? settings = null) Parameters pageState PageState settings MagicAnalyticsSettings Returns IMagicAnalyticsKit"
  },
  "api/ToSic.Cre8magic.Analytics.Internal.MagicAnalyticsService.html": {
    "href": "api/ToSic.Cre8magic.Analytics.Internal.MagicAnalyticsService.html",
    "title": "Class MagicAnalyticsService | cre8magic",
    "keywords": "Class MagicAnalyticsService Namespace ToSic.Cre8magic.Analytics.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicAnalyticsService : IMagicAnalyticsService Inheritance object MagicAnalyticsService Implements IMagicAnalyticsService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicAnalyticsService(IJSRuntime, IMagicSettingsService) public MagicAnalyticsService(IJSRuntime jsRuntime, IMagicSettingsService settingsSvc) Parameters jsRuntime IJSRuntime settingsSvc IMagicSettingsService Methods AnalyticsKit(PageState, MagicAnalyticsSettings?) public IMagicAnalyticsKit AnalyticsKit(PageState pageState, MagicAnalyticsSettings? settings = null) Parameters pageState PageState settings MagicAnalyticsSettings Returns IMagicAnalyticsKit"
  },
  "api/ToSic.Cre8magic.Analytics.Internal.html": {
    "href": "api/ToSic.Cre8magic.Analytics.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Analytics.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Analytics.Internal Classes MagicAnalyticsService"
  },
  "api/ToSic.Cre8magic.Analytics.MagicAnalyticsService.html": {
    "href": "api/ToSic.Cre8magic.Analytics.MagicAnalyticsService.html",
    "title": "Class MagicAnalyticsService | cre8magic",
    "keywords": "Class MagicAnalyticsService Namespace ToSic.Cre8magic.Analytics Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicAnalyticsService Inheritance object MagicAnalyticsService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicAnalyticsService(IJSRuntime) public MagicAnalyticsService(IJSRuntime jsRuntime) Parameters jsRuntime IJSRuntime Properties JsRuntime public IJSRuntime JsRuntime { get; } Property Value IJSRuntime"
  },
  "api/ToSic.Cre8magic.Analytics.MagicAnalyticsSettings.html": {
    "href": "api/ToSic.Cre8magic.Analytics.MagicAnalyticsSettings.html",
    "title": "Class MagicAnalyticsSettings | cre8magic",
    "keywords": "Class MagicAnalyticsSettings Namespace ToSic.Cre8magic.Analytics Assembly ToSic.Cre8magic.Client.Oqtane.dll Settings to set up and use Google Tag Manager to track page views. BETA: Doesn't completely work yet. Main caveat: Integration of the Google Tag Manager still has the GTM hardwired in the JS, must be finished. Background is that the Module currently doesn't contain its own JS, so it's still part of the theme. public record MagicAnalyticsSettings : MagicSettingsBase Inheritance object SettingsWithInherit MagicSettingsBase MagicAnalyticsSettings Inherited Members MagicSettingsBase.PageState MagicSettingsBase.PartName MagicSettingsBase.SettingsName MagicSettingsBase.DesignName MagicSettingsBase.Debug SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Extension Methods MagicSettingsExtensions.RefillLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.Refill<TSettings>(TSettings?, PageState) MagicSettingsExtensions.Refill<TSettings, TWith>(TSettings?, TWith?) MagicSettingsExtensions.WithLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.With<TSettings>(TSettings?, PageState) MagicSettingsExtensions.With<TSettings, TWith>(TSettings?, TWith?) Properties GtmId ID of Google Tag Manager. public string? GtmId { get; init; } Property Value string PageViewEvent Name of the event to give to GTM which should be logged. Defaults to \"blazor_page_view\". public string? PageViewEvent { get; init; } Property Value string PageViewJs JavaScript function to call for tracking page views. Defaults to \"gtag\". public string? PageViewJs { get; init; } Property Value string PageViewTrack public bool? PageViewTrack { get; init; } Property Value bool? PageViewTrackFirst public bool? PageViewTrackFirst { get; init; } Property Value bool?"
  },
  "api/ToSic.Cre8magic.Analytics.html": {
    "href": "api/ToSic.Cre8magic.Analytics.html",
    "title": "Namespace ToSic.Cre8magic.Analytics | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Analytics Classes MagicAnalyticsSettings Settings to set up and use Google Tag Manager to track page views. BETA: Doesn't completely work yet. Main caveat: Integration of the Google Tag Manager still has the GTM hardwired in the JS, must be finished. Background is that the Module currently doesn't contain its own JS, so it's still part of the theme. Interfaces IMagicAnalyticsKit"
  },
  "api/ToSic.Cre8magic.Breadcrumb.MagicBreadcrumbBase.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumb.MagicBreadcrumbBase.html",
    "title": "Class MagicBreadcrumbBase | cre8magic",
    "keywords": "Class MagicBreadcrumbBase Namespace ToSic.Cre8magic.Breadcrumb Assembly ToSic.Cre8magic.Client.Oqtane.dll Recommended base class for all breadcrumb components. public abstract class MagicBreadcrumbBase : MagicControlBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControlBase MagicBreadcrumbBase Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IMagicDesigner Inherited Members MagicControlBase.AllSettings MagicControlBase.UserIsAdmin MagicControlBase.UserIsEditor MagicControlBase.UserIsLoggedIn MagicControlBase.Designer MagicControlBase.Classes(string) MagicControlBase.ClassesOrDefault(string, string) MagicControlBase.Value(string) MagicControlBase.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Breadcrumb The Breadcrumb for the current page. Will be updated when the page changes. protected IMagicPageList Breadcrumb { get; } Property Value IMagicPageList HomePage protected IMagicPage HomePage { get; } Property Value IMagicPage PageSvc [Inject] public IMagicPageService? PageSvc { get; set; } Property Value IMagicPageService Settings Settings for retrieving the breadcrumbs; optional. If not set, the current page will be used as the active page. [Parameter] public MagicBreadcrumbSettings? Settings { get; set; } Property Value MagicBreadcrumbSettings Methods Customize(MagicBreadcrumbSettings) WIP experimental pattern. Probably not the best/final implementation yet... protected virtual MagicBreadcrumbSettings Customize(MagicBreadcrumbSettings settings) Parameters settings MagicBreadcrumbSettings Returns MagicBreadcrumbSettings"
  },
  "api/ToSic.Cre8magic.Breadcrumb.MagicBreadcrumbDesignerBs5.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumb.MagicBreadcrumbDesignerBs5.html",
    "title": "Class MagicBreadcrumbDesignerBs5 | cre8magic",
    "keywords": "Class MagicBreadcrumbDesignerBs5 Namespace ToSic.Cre8magic.Breadcrumb Assembly ToSic.Cre8magic.Client.Oqtane.dll Default designer for breadcrumbs in Bootstrap 5. Will use the standard Bootstrap 5 classes for breadcrumbs. public class MagicBreadcrumbDesignerBs5 : MagicPageDesignerBasic, IMagicPageDesigner Inheritance object MagicPageDesignerBase MagicPageDesignerBasic MagicBreadcrumbDesignerBs5 Implements IMagicPageDesigner Inherited Members MagicPageDesignerBasic.All MagicPageDesignerBasic.LookupClasses MagicPageDesignerBasic.LookupClassActive MagicPageDesignerBasic.Classes(string, IMagicPage) MagicPageDesignerBasic.LookupData MagicPageDesignerBasic.Value(string, IMagicPage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicBreadcrumbDesignerBs5() public MagicBreadcrumbDesignerBs5()"
  },
  "api/ToSic.Cre8magic.Breadcrumb.Settings.MagicBreadcrumbDesign.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumb.Settings.MagicBreadcrumbDesign.html",
    "title": "Class MagicBreadcrumbDesign | cre8magic",
    "keywords": "Class MagicBreadcrumbDesign Namespace ToSic.Cre8magic.Breadcrumb.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicBreadcrumbDesign : DesignSetting, ICanClone<DesignSetting>, IEquatable<DesignSetting>, ICanClone<MagicBreadcrumbDesign>, IEquatable<MagicBreadcrumbDesign> Inheritance object DesignSetting MagicBreadcrumbDesign Implements ICanClone<DesignSetting> IEquatable<DesignSetting> ICanClone<MagicBreadcrumbDesign> IEquatable<MagicBreadcrumbDesign> Inherited Members DesignSetting.CloneWith(DesignSetting, bool) DesignSetting.Classes DesignSetting.Value DesignSetting.Id DesignSetting.IsActive DesignSetting.IsPublished DesignSetting.IsAdmin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicBreadcrumbDesign() public MagicBreadcrumbDesign() MagicBreadcrumbDesign(MagicBreadcrumbDesign?, MagicBreadcrumbDesign?) public MagicBreadcrumbDesign(MagicBreadcrumbDesign? priority, MagicBreadcrumbDesign? fallback = null) Parameters priority MagicBreadcrumbDesign fallback MagicBreadcrumbDesign Properties HasChildren Classes to add if this node is a parent (has-children). public PairOnOff? HasChildren { get; init; } Property Value PairOnOff IsDisabled Classes to add if the node is disabled. TODO: unclear why it's disabled, what would cause this... public PairOnOff? IsDisabled { get; init; } Property Value PairOnOff Methods CloneWith(MagicBreadcrumbDesign?, bool) public MagicBreadcrumbDesign CloneWith(MagicBreadcrumbDesign? priority, bool forceCopy = false) Parameters priority MagicBreadcrumbDesign forceCopy bool Returns MagicBreadcrumbDesign"
  },
  "api/ToSic.Cre8magic.Breadcrumb.Settings.MagicBreadcrumbDesigner.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumb.Settings.MagicBreadcrumbDesigner.html",
    "title": "Class MagicBreadcrumbDesigner | cre8magic",
    "keywords": "Class MagicBreadcrumbDesigner Namespace ToSic.Cre8magic.Breadcrumb.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Special helper to provide Css classes to menus public class MagicBreadcrumbDesigner : IMagicPageDesigner Inheritance object MagicBreadcrumbDesigner Implements IMagicPageDesigner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Classes(string, IMagicPage) public string Classes(string tag, IMagicPage item) Parameters tag string item IMagicPage Returns string Value(string, IMagicPage) public string Value(string key, IMagicPage item) Parameters key string item IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Breadcrumb.Settings.MagicBreadcrumbSettings.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumb.Settings.MagicBreadcrumbSettings.html",
    "title": "Class MagicBreadcrumbSettings | cre8magic",
    "keywords": "Class MagicBreadcrumbSettings Namespace ToSic.Cre8magic.Breadcrumb.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Breadcrumb settings - either provided in code, or generated from JSON. public record MagicBreadcrumbSettings : SettingsWithInherit, IEquatable<SettingsWithInherit>, IMagicPageSetSettings, ICanClone<MagicBreadcrumbSettings>, IEquatable<MagicBreadcrumbSettings> Inheritance object SettingsWithInherit MagicBreadcrumbSettings Implements IEquatable<SettingsWithInherit> IMagicPageSetSettings ICanClone<MagicBreadcrumbSettings> IEquatable<MagicBreadcrumbSettings> Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks NOTE that as of v0.2 the JSON variant is not in use. Constructors MagicBreadcrumbSettings() public MagicBreadcrumbSettings() MagicBreadcrumbSettings(MagicBreadcrumbSettings?, MagicBreadcrumbSettings?) Cloning constructor public MagicBreadcrumbSettings(MagicBreadcrumbSettings? priority, MagicBreadcrumbSettings? fallback = null) Parameters priority MagicBreadcrumbSettings fallback MagicBreadcrumbSettings Fields DisplayDefault public const bool DisplayDefault = true Field Value bool Properties Active [JsonIgnore] public IMagicPage? Active { get; init; } Property Value IMagicPage ActiveId Start page of this breadcrumb - like home or another specific page. Can be a specific ID blank / null, current page public int? ActiveId { get; init; } Property Value int? ConfigName Name to identify this configuration public string? ConfigName { get; init; } Property Value string Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; init; } Property Value MagicDebugSettings DesignSettings public NamedSettings<MagicBreadcrumbDesign>? DesignSettings { get; init; } Property Value NamedSettings<MagicBreadcrumbDesign> Designer [JsonIgnore] public IMagicPageDesigner? Designer { get; init; } Property Value IMagicPageDesigner Display Determines if this breadcrumb should be shown. public bool? Display { get; init; } Property Value bool? Id A unique ID to identify the breadcrumb. public string? Id { get; init; } Property Value string MaxDepth Maximum depth of the breadcrumb, defaults to 10. This is to ensure that we don't run into infinite loops. [JsonIgnore] public int MaxDepth { get; init; } Property Value int MenuId Menu ID for use in JavaScript etc. Usually predefined OR a random number public string MenuId { get; } Property Value string Pages List of pages to respect when creating the breadcrumb. Default is null - so it will just take all the pages. TODO: NAMING [JsonIgnore] public IEnumerable<IMagicPage>? Pages { get; init; } Property Value IEnumerable<IMagicPage> Reverse If the order of the Breadcrumb should be reversed. [JsonIgnore] public bool Reverse { get; init; } Property Value bool Variant public string? Variant { get; init; } Property Value string WithActive If the current page should be included in the breadcrumb. Set to false for scenarios where you don't want to show the final page, or will use custom code to visualize differently. [JsonIgnore] public bool WithActive { get; init; } Property Value bool WithHome If the home page should be included in the breadcrumb. This is special because the home page is usually not really \"above\" the others, but typically side-by side to other pages on the top level menu. Set to false, if you only want to show the breadcrumb starting at the level below home. [JsonIgnore] public bool WithHome { get; init; } Property Value bool Methods CloneWith(MagicBreadcrumbSettings?, bool) public MagicBreadcrumbSettings CloneWith(MagicBreadcrumbSettings? priority, bool forceCopy = false) Parameters priority MagicBreadcrumbSettings forceCopy bool Returns MagicBreadcrumbSettings"
  },
  "api/ToSic.Cre8magic.Breadcrumb.Settings.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumb.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Breadcrumb.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Breadcrumb.Settings Classes MagicBreadcrumbDesign MagicBreadcrumbDesigner Special helper to provide Css classes to menus MagicBreadcrumbSettings Breadcrumb settings - either provided in code, or generated from JSON."
  },
  "api/ToSic.Cre8magic.Breadcrumb.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumb.html",
    "title": "Namespace ToSic.Cre8magic.Breadcrumb | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Breadcrumb Namespaces ToSic.Cre8magic.Breadcrumb.Settings Classes MagicBreadcrumbBase Recommended base class for all breadcrumb components. MagicBreadcrumbDesignerBs5 Default designer for breadcrumbs in Bootstrap 5. Will use the standard Bootstrap 5 classes for breadcrumbs."
  },
  "api/ToSic.Cre8magic.Breadcrumbs.IMagicBreadcrumbKit.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumbs.IMagicBreadcrumbKit.html",
    "title": "Interface IMagicBreadcrumbKit | cre8magic",
    "keywords": "Interface IMagicBreadcrumbKit Namespace ToSic.Cre8magic.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicBreadcrumbKit Properties Pages Pages to show in the breadcrumb, as specified by the settings. IEnumerable<IMagicPage> Pages { get; } Property Value IEnumerable<IMagicPage> Root Virtual \"root\" page of the breadcrumb, mainly for styling things around the real breadcrumb. IMagicPage Root { get; } Property Value IMagicPage Show Information if this Breadcrumb should be shown according to configuration. The code must decide if it respects this or not. bool Show { get; } Property Value bool"
  },
  "api/ToSic.Cre8magic.Breadcrumbs.Internal.IMagicBreadcrumbService.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumbs.Internal.IMagicBreadcrumbService.html",
    "title": "Interface IMagicBreadcrumbService | cre8magic",
    "keywords": "Interface IMagicBreadcrumbService Namespace ToSic.Cre8magic.Breadcrumbs.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicBreadcrumbService Methods BreadcrumbKit(PageState, MagicBreadcrumbSettings?) Get the BreadcrumbKit. It will either use the provided settings, retrieve these from the global information or use a default configuration. IMagicBreadcrumbKit BreadcrumbKit(PageState pageState, MagicBreadcrumbSettings? settings = null) Parameters pageState PageState settings MagicBreadcrumbSettings Returns IMagicBreadcrumbKit"
  },
  "api/ToSic.Cre8magic.Breadcrumbs.Internal.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumbs.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Breadcrumbs.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Breadcrumbs.Internal Interfaces IMagicBreadcrumbService"
  },
  "api/ToSic.Cre8magic.Breadcrumbs.MagicBreadcrumbDesignSettings.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumbs.MagicBreadcrumbDesignSettings.html",
    "title": "Class MagicBreadcrumbDesignSettings | cre8magic",
    "keywords": "Class MagicBreadcrumbDesignSettings Namespace ToSic.Cre8magic.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll Language Design Settings public record MagicBreadcrumbDesignSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicBreadcrumbDesignSettings Inherited Members SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Properties Parts Custom, named settings for classes, values etc. as you need them in your code. For things such as ul or li or a tags. public Dictionary<string, MagicBreadcrumbDesignSettingsPart> Parts { get; init; } Property Value Dictionary<string, MagicBreadcrumbDesignSettingsPart>"
  },
  "api/ToSic.Cre8magic.Breadcrumbs.MagicBreadcrumbDesignSettingsPart.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumbs.MagicBreadcrumbDesignSettingsPart.html",
    "title": "Class MagicBreadcrumbDesignSettingsPart | cre8magic",
    "keywords": "Class MagicBreadcrumbDesignSettingsPart Namespace ToSic.Cre8magic.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicBreadcrumbDesignSettingsPart : MagicDesignSettingsPart Inheritance object MagicDesignSettingsPart MagicBreadcrumbDesignSettingsPart Inherited Members MagicDesignSettingsPart.Classes MagicDesignSettingsPart.Value MagicDesignSettingsPart.Id MagicDesignSettingsPart.IsActive MagicDesignSettingsPart.IsPublished MagicDesignSettingsPart.IsAdmin Properties HasChildren Classes to add if this node is a parent (has-children). public MagicSettingOnOff? HasChildren { get; init; } Property Value MagicSettingOnOff IsDisabled Classes to add if the node is disabled. TODO: unclear why it's disabled, what would cause this... public MagicSettingOnOff? IsDisabled { get; init; } Property Value MagicSettingOnOff"
  },
  "api/ToSic.Cre8magic.Breadcrumbs.MagicBreadcrumbDesigner.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumbs.MagicBreadcrumbDesigner.html",
    "title": "Class MagicBreadcrumbDesigner | cre8magic",
    "keywords": "Class MagicBreadcrumbDesigner Namespace ToSic.Cre8magic.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll Special helper to provide Css classes to menus public class MagicBreadcrumbDesigner : IMagicPageDesigner Inheritance object MagicBreadcrumbDesigner Implements IMagicPageDesigner Methods Classes(string, IMagicPage) public string Classes(string tag, IMagicPage item) Parameters tag string item IMagicPage Returns string Value(string, IMagicPage) public string Value(string key, IMagicPage item) Parameters key string item IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Breadcrumbs.MagicBreadcrumbDesignerBs5.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumbs.MagicBreadcrumbDesignerBs5.html",
    "title": "Class MagicBreadcrumbDesignerBs5 | cre8magic",
    "keywords": "Class MagicBreadcrumbDesignerBs5 Namespace ToSic.Cre8magic.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll Default designer for breadcrumbs in Bootstrap 5. Will use the standard Bootstrap 5 classes for breadcrumbs. ol: breadcrumb li: breadcrumb-item active state: \"active\" public class MagicBreadcrumbDesignerBs5 : MagicPageDesignerBasic, IMagicPageDesigner Inheritance object MagicPageDesignerBase MagicPageDesignerBasic MagicBreadcrumbDesignerBs5 Implements IMagicPageDesigner Inherited Members MagicPageDesignerBasic.All MagicPageDesignerBasic.LookupClasses MagicPageDesignerBasic.LookupClassActive MagicPageDesignerBasic.Classes(string, IMagicPage) MagicPageDesignerBasic.LookupData MagicPageDesignerBasic.Value(string, IMagicPage) Constructors MagicBreadcrumbDesignerBs5() public MagicBreadcrumbDesignerBs5()"
  },
  "api/ToSic.Cre8magic.Breadcrumbs.MagicBreadcrumbSettings.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumbs.MagicBreadcrumbSettings.html",
    "title": "Class MagicBreadcrumbSettings | cre8magic",
    "keywords": "Class MagicBreadcrumbSettings Namespace ToSic.Cre8magic.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll Breadcrumb settings - either provided in code, or generated from JSON. public record MagicBreadcrumbSettings : MagicSettingsBase, IMagicPageSetSettings Inheritance object SettingsWithInherit MagicSettingsBase MagicBreadcrumbSettings Implements IMagicPageSetSettings Inherited Members MagicSettingsBase.PageState MagicSettingsBase.PartName MagicSettingsBase.SettingsName MagicSettingsBase.DesignName MagicSettingsBase.Debug SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Extension Methods MagicSettingsExtensions.RefillLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.Refill<TSettings>(TSettings?, PageState) MagicSettingsExtensions.Refill<TSettings, TWith>(TSettings?, TWith?) MagicSettingsExtensions.WithLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.With<TSettings>(TSettings?, PageState) MagicSettingsExtensions.With<TSettings, TWith>(TSettings?, TWith?) Remarks NOTE that as of v0.2 the JSON variant is not in use. Properties Active [JsonIgnore] public IMagicPage? Active { get; init; } Property Value IMagicPage ActiveId Start page of this breadcrumb - like home or another specific page. Can be a specific ID blank / null, current page public int? ActiveId { get; init; } Property Value int? DesignSettings [JsonIgnore] public MagicBreadcrumbDesignSettings? DesignSettings { get; init; } Property Value MagicBreadcrumbDesignSettings Designer [JsonIgnore] public IMagicPageDesigner? Designer { get; init; } Property Value IMagicPageDesigner Display Determines if this breadcrumb should be shown. public bool? Display { get; init; } Property Value bool? DisplaySafe public bool DisplaySafe { get; } Property Value bool Id A unique ID to identify the breadcrumb. public string? Id { get; init; } Property Value string MaxDepth Maximum depth of the breadcrumb, defaults to 10. This is to ensure that we don't run into infinite loops. [JsonIgnore] public int MaxDepth { get; init; } Property Value int MenuId Menu ID for use in JavaScript etc. Usually predefined OR a random number public string MenuId { get; } Property Value string Pages List of pages to respect when creating the breadcrumb. Default is null - so it will just take all the pages. TODO: NAMING [JsonIgnore] public IEnumerable<IMagicPage>? Pages { get; init; } Property Value IEnumerable<IMagicPage> Reverse If the order of the Breadcrumb should be reversed. [JsonIgnore] public bool? Reverse { get; init; } Property Value bool? Variant public string? Variant { get; init; } Property Value string WithActive If the current page should be included in the breadcrumb. Set to false for scenarios where you don't want to show the final page, or will use custom code to visualize differently. [JsonIgnore] public bool? WithActive { get; init; } Property Value bool? WithHome If the home page should be included in the breadcrumb. This is special because the home page is usually not really \"above\" the others, but typically side-by side to other pages on the top level menu. Set to false, if you only want to show the breadcrumb starting at the level below home. [JsonIgnore] public bool? WithHome { get; init; } Property Value bool?"
  },
  "api/ToSic.Cre8magic.Breadcrumbs.html": {
    "href": "api/ToSic.Cre8magic.Breadcrumbs.html",
    "title": "Namespace ToSic.Cre8magic.Breadcrumbs | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Breadcrumbs Classes MagicBreadcrumbDesignSettings Language Design Settings MagicBreadcrumbDesignSettingsPart MagicBreadcrumbDesigner Special helper to provide Css classes to menus MagicBreadcrumbDesignerBs5 Default designer for breadcrumbs in Bootstrap 5. Will use the standard Bootstrap 5 classes for breadcrumbs. ol: breadcrumb li: breadcrumb-item active state: \"active\" MagicBreadcrumbSettings Breadcrumb settings - either provided in code, or generated from JSON. Interfaces IMagicBreadcrumbKit"
  },
  "api/ToSic.Cre8magic.Client.Analytics.MagicAnalyticsService.html": {
    "href": "api/ToSic.Cre8magic.Client.Analytics.MagicAnalyticsService.html",
    "title": "Class MagicAnalyticsService | cre8magic",
    "keywords": "Class MagicAnalyticsService Namespace ToSic.Cre8magic.Client.Analytics Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicAnalyticsService Inheritance object MagicAnalyticsService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicAnalyticsService(IJSRuntime) public MagicAnalyticsService(IJSRuntime jsRuntime) Parameters jsRuntime IJSRuntime Properties JsRuntime public IJSRuntime JsRuntime { get; } Property Value IJSRuntime"
  },
  "api/ToSic.Cre8magic.Client.Analytics.MagicAnalyticsSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Analytics.MagicAnalyticsSettings.html",
    "title": "Class MagicAnalyticsSettings | cre8magic",
    "keywords": "Class MagicAnalyticsSettings Namespace ToSic.Cre8magic.Client.Analytics Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicAnalyticsSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicAnalyticsSettings Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GtmId public string? GtmId { get; set; } Property Value string PageViewEvent public string? PageViewEvent { get; set; } Property Value string PageViewJs public string? PageViewJs { get; set; } Property Value string PageViewTrack public bool? PageViewTrack { get; set; } Property Value bool? PageViewTrackFirst public bool? PageViewTrackFirst { get; set; } Property Value bool?"
  },
  "api/ToSic.Cre8magic.Client.Analytics.html": {
    "href": "api/ToSic.Cre8magic.Client.Analytics.html",
    "title": "Namespace ToSic.Cre8magic.Client.Analytics | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Analytics Classes MagicAnalyticsService MagicAnalyticsSettings"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumb.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumb.html",
    "title": "Class MagicBreadcrumb | cre8magic",
    "keywords": "Class MagicBreadcrumb Namespace ToSic.Cre8magic.Client.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicBreadcrumb : MagicBreadcrumbItem, IMagicPage Inheritance object MagicPageBase MagicPage MagicPageWithDesign MagicBreadcrumbItem MagicBreadcrumb Implements IMagicPage Inherited Members MagicPageWithDesign.Classes(string) MagicPageWithDesign.Value(string) MagicPage.PageFactory MagicPage.MenuLevel MagicPage.IsCurrent MagicPage.Link MagicPage.Target MagicPage.Breadcrumbs MagicPage.InBreadcrumbs MagicPage.ToString() MagicPage.Parent MagicPageBase.OriginalPage MagicPageBase.Id MagicPageBase.ParentId MagicPageBase.Path MagicPageBase.Name MagicPageBase.Url MagicPageBase.IsClickable MagicPageBase.Level MagicPageBase.HasChildren object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MagicBreadcrumb(PageState) public MagicBreadcrumb(PageState pageState) Parameters pageState PageState MagicBreadcrumb(MagicSettings) public MagicBreadcrumb(MagicSettings magicSettings) Parameters magicSettings MagicSettings Properties Items public IEnumerable<MagicBreadcrumbItem> Items { get; } Property Value IEnumerable<MagicBreadcrumbItem> Methods Designer(IPageDesigner) public MagicBreadcrumb Designer(IPageDesigner designer) Parameters designer IPageDesigner Returns MagicBreadcrumb Setup(MagicBreadcrumbSettings) public MagicBreadcrumb Setup(MagicBreadcrumbSettings settings) Parameters settings MagicBreadcrumbSettings Returns MagicBreadcrumb"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumbItem.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumbItem.html",
    "title": "Class MagicBreadcrumbItem | cre8magic",
    "keywords": "Class MagicBreadcrumbItem Namespace ToSic.Cre8magic.Client.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicBreadcrumbItem : MagicPageWithDesign, IMagicPage Inheritance object MagicPageBase MagicPage MagicPageWithDesign MagicBreadcrumbItem Implements IMagicPage Derived MagicBreadcrumb Inherited Members MagicPageWithDesign.Classes(string) MagicPageWithDesign.Value(string) MagicPage.PageFactory MagicPage.MenuLevel MagicPage.IsCurrent MagicPage.Link MagicPage.Target MagicPage.Breadcrumbs MagicPage.InBreadcrumbs MagicPage.ToString() MagicPage.Parent MagicPageBase.OriginalPage MagicPageBase.Id MagicPageBase.ParentId MagicPageBase.Path MagicPageBase.Name MagicPageBase.Url MagicPageBase.IsClickable MagicPageBase.Level MagicPageBase.HasChildren object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumbs.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.MagicBreadcrumbs.html",
    "title": "Class MagicBreadcrumbs | cre8magic",
    "keywords": "Class MagicBreadcrumbs Namespace ToSic.Cre8magic.Client.Breadcrumbs Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicBreadcrumbs : MagicControl, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControl MagicBreadcrumbs Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicControl.Settings MagicControl.PageFactory MagicControl.UserIsAdmin MagicControl.UserIsEditor MagicControl.UserIsLoggedIn MagicControl.Designer MagicControl.Classes(string) MagicControl.ClassesOrDefault(string, string) MagicControl.Value(string) MagicControl.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Breadcrumbs protected List<IMagicPage> Breadcrumbs { get; } Property Value List<IMagicPage> HomePage protected IMagicPage HomePage { get; } Property Value IMagicPage"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbDesign.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbDesign.html",
    "title": "Class MagicBreadcrumbDesign | cre8magic",
    "keywords": "Class MagicBreadcrumbDesign Namespace ToSic.Cre8magic.Client.Breadcrumbs.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicBreadcrumbDesign : DesignSetting Inheritance object DesignSetting MagicBreadcrumbDesign Inherited Members DesignSetting.Classes DesignSetting.Value DesignSetting.Id DesignSetting.IsActive DesignSetting.IsPublished DesignSetting.IsAdmin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HasChildren Classes to add if this node is a parent (has-children). public PairOnOff? HasChildren { get; set; } Property Value PairOnOff IsDisabled Classes to add if the node is disabled. TODO: unclear why it's disabled, what would cause this... public PairOnOff? IsDisabled { get; set; } Property Value PairOnOff"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbDesigner.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbDesigner.html",
    "title": "Class MagicBreadcrumbDesigner | cre8magic",
    "keywords": "Class MagicBreadcrumbDesigner Namespace ToSic.Cre8magic.Client.Breadcrumbs.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Special helper to provide Css classes to menus public class MagicBreadcrumbDesigner : IPageDesigner Inheritance object MagicBreadcrumbDesigner Implements IPageDesigner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Classes(string, IMagicPage) public string Classes(string tag, IMagicPage item) Parameters tag string item IMagicPage Returns string Value(string, IMagicPage) public string Value(string key, IMagicPage item) Parameters key string item IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.MagicBreadcrumbSettings.html",
    "title": "Class MagicBreadcrumbSettings | cre8magic",
    "keywords": "Class MagicBreadcrumbSettings Namespace ToSic.Cre8magic.Client.Breadcrumbs.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicBreadcrumbSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicBreadcrumbSettings Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicBreadcrumbSettings() Empty constructor is important for JSON deserialization public MagicBreadcrumbSettings() Fields DisplayDefault public const bool DisplayDefault = true Field Value bool Properties BreadcrumbId public string BreadcrumbId { get; } Property Value string ConfigName Name to identify this configuration public string? ConfigName { get; init; } Property Value string Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; init; } Property Value MagicDebugSettings DesignSettings public NamedSettings<MagicBreadcrumbDesign>? DesignSettings { get; init; } Property Value NamedSettings<MagicBreadcrumbDesign> Display Determines if this breadcrumb should be shown. public bool? Display { get; init; } Property Value bool? Id A unique ID to identify the breadcrumb. public string? Id { get; init; } Property Value string Start Start page of this breadcrumb - like home or another specific page. Can be a specific ID blank / null, current page public int? Start { get; init; } Property Value int?"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Breadcrumbs.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Breadcrumbs.Settings Classes MagicBreadcrumbDesign MagicBreadcrumbDesigner Special helper to provide Css classes to menus MagicBreadcrumbSettings"
  },
  "api/ToSic.Cre8magic.Client.Breadcrumbs.html": {
    "href": "api/ToSic.Cre8magic.Client.Breadcrumbs.html",
    "title": "Namespace ToSic.Cre8magic.Client.Breadcrumbs | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Breadcrumbs Namespaces ToSic.Cre8magic.Client.Breadcrumbs.Settings Classes MagicBreadcrumb MagicBreadcrumbItem MagicBreadcrumbs"
  },
  "api/ToSic.Cre8magic.Client.Containers.MagicContainer.html": {
    "href": "api/ToSic.Cre8magic.Client.Containers.MagicContainer.html",
    "title": "Class MagicContainer | cre8magic",
    "keywords": "Class MagicContainer Namespace ToSic.Cre8magic.Client.Containers Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicContainer : ContainerBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IContainerControl, IMagicControlWithSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ContainerBase MagicContainer Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IContainerControl IMagicControlWithSettings IMagicDesigner Inherited Members ContainerBase.ShouldRender() ContainerBase.ModuleState ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllSettings [CascadingParameter] public MagicAllSettings AllSettings { get; set; } Property Value MagicAllSettings NavigationManager [Inject] public NavigationManager? NavigationManager { get; set; } Property Value NavigationManager UseAdminContainer Modules are treated as admin modules (and must use the admin container) if they are marked as such, or come from the Oqtane ....Admin... type protected bool UseAdminContainer { get; } Property Value bool Methods Classes(string) public string? Classes(string target) Parameters target string Returns string CloseModal() protected void CloseModal() Id(string) public string? Id(string name) Parameters name string Returns string Value(string) public string? Value(string key) Parameters key string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Containers.Settings.MagicContainerSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Containers.Settings.MagicContainerSettings.html",
    "title": "Class MagicContainerSettings | cre8magic",
    "keywords": "Class MagicContainerSettings Namespace ToSic.Cre8magic.Client.Containers.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicContainerSettings : SettingsWithInherit, IEquatable<SettingsWithInherit>, ICanClone<MagicContainerSettings>, IEquatable<MagicContainerSettings> Inheritance object SettingsWithInherit MagicContainerSettings Implements IEquatable<SettingsWithInherit> ICanClone<MagicContainerSettings> IEquatable<MagicContainerSettings> Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicContainerSettings() public MagicContainerSettings() MagicContainerSettings(MagicContainerSettings?, MagicContainerSettings?) public MagicContainerSettings(MagicContainerSettings? priority, MagicContainerSettings? fallback = null) Parameters priority MagicContainerSettings fallback MagicContainerSettings Properties Custom public NamedSettings<DesignSetting> Custom { get; init; } Property Value NamedSettings<DesignSetting> Methods CloneWith(MagicContainerSettings?, bool) public MagicContainerSettings CloneWith(MagicContainerSettings? priority, bool forceCopy = false) Parameters priority MagicContainerSettings forceCopy bool Returns MagicContainerSettings"
  },
  "api/ToSic.Cre8magic.Client.Containers.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Containers.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Containers.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Containers.Settings Classes MagicContainerSettings"
  },
  "api/ToSic.Cre8magic.Client.Containers.html": {
    "href": "api/ToSic.Cre8magic.Client.Containers.html",
    "title": "Namespace ToSic.Cre8magic.Client.Containers | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Containers Namespaces ToSic.Cre8magic.Client.Containers.Settings Classes MagicContainer"
  },
  "api/ToSic.Cre8magic.Client.Controls.IMagicControlWithSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.IMagicControlWithSettings.html",
    "title": "Interface IMagicControlWithSettings | cre8magic",
    "keywords": "Interface IMagicControlWithSettings Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicControlWithSettings : IMagicDesigner Inherited Members IMagicDesigner.Classes(string) IMagicDesigner.Value(string) IMagicDesigner.Id(string) Properties AllSettings [CascadingParameter] MagicAllSettings AllSettings { get; set; } Property Value MagicAllSettings"
  },
  "api/ToSic.Cre8magic.Client.Controls.IMagicDesigner.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.IMagicDesigner.html",
    "title": "Interface IMagicDesigner | cre8magic",
    "keywords": "Interface IMagicDesigner Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicDesigner Methods Classes(string) string? Classes(string target) Parameters target string Returns string Id(string) string? Id(string target) Parameters target string Returns string Value(string) string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicComponent.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicComponent.html",
    "title": "Class MagicComponent | cre8magic",
    "keywords": "Class MagicComponent Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll Non-Oqtane Blazor component with Settings as base for your controls public abstract class MagicComponent : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase MagicComponent Implements IComponent IHandleEvent IHandleAfterRender IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Settings [CascadingParameter] public MagicSettings Settings { get; set; } Property Value MagicSettings Methods Classes(string) public string? Classes(string target) Parameters target string Returns string Id(string) public string? Id(string name) Parameters name string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicComponentBase.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicComponentBase.html",
    "title": "Class MagicComponentBase | cre8magic",
    "keywords": "Class MagicComponentBase Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll Non-Oqtane Blazor component with Settings as base for your controls public abstract class MagicComponentBase : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IMagicControlWithSettings, IMagicDesigner Inheritance object ComponentBase MagicComponentBase Implements IComponent IHandleEvent IHandleAfterRender IMagicControlWithSettings IMagicDesigner Inherited Members ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllSettings [CascadingParameter] public MagicAllSettings AllSettings { get; set; } Property Value MagicAllSettings Methods Classes(string) public string? Classes(string target) Parameters target string Returns string Id(string) public string? Id(string name) Parameters name string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicControl.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicControl.html",
    "title": "Class MagicControl | cre8magic",
    "keywords": "Class MagicControl Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll Oqtane Blazor Control with Settings public abstract class MagicControl : ThemeControlBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControl Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Derived MagicBreadcrumbs MagicDebug MagicExceptions MagicOqtaneControlPanel MagicLanguageDebug MagicLanguageMenu MagicThemeDebug Inherited Members ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Designer protected virtual IMagicDesigner Designer { get; } Property Value IMagicDesigner PageFactory protected MagicPageFactory PageFactory { get; } Property Value MagicPageFactory Settings [CascadingParameter] public MagicSettings Settings { get; set; } Property Value MagicSettings UserIsAdmin protected bool UserIsAdmin { get; } Property Value bool UserIsEditor protected bool UserIsEditor { get; } Property Value bool UserIsLoggedIn protected bool UserIsLoggedIn { get; } Property Value bool Methods Classes(string) public string? Classes(string target) Parameters target string Returns string ClassesOrDefault(string, string) public string? ClassesOrDefault(string target, string defaultValue) Parameters target string defaultValue string Returns string Id(string) public string? Id(string name) Parameters name string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicControlBase.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicControlBase.html",
    "title": "Class MagicControlBase | cre8magic",
    "keywords": "Class MagicControlBase Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll Oqtane Blazor Control with Settings public abstract class MagicControlBase : ThemeControlBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControlBase Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IMagicDesigner Derived MagicBreadcrumbBase MagicDebug MagicExceptions MagicOqtaneControlPanel MagicLanguageDebug MagicLanguageMenuBase MagicThemeDebug Inherited Members ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllSettings [CascadingParameter] public MagicAllSettings AllSettings { get; set; } Property Value MagicAllSettings Designer protected virtual IMagicDesigner Designer { get; } Property Value IMagicDesigner UserIsAdmin protected bool UserIsAdmin { get; } Property Value bool UserIsEditor protected bool UserIsEditor { get; } Property Value bool UserIsLoggedIn protected bool UserIsLoggedIn { get; } Property Value bool Methods Classes(string) public string? Classes(string target) Parameters target string Returns string ClassesOrDefault(string, string) public string? ClassesOrDefault(string target, string defaultValue) Parameters target string defaultValue string Returns string Id(string) public string? Id(string name) Parameters name string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicDebug.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicDebug.html",
    "title": "Class MagicDebug | cre8magic",
    "keywords": "Class MagicDebug Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicDebug : MagicControl, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControl MagicDebug Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicControl.Settings MagicControl.PageFactory MagicControl.UserIsAdmin MagicControl.UserIsEditor MagicControl.UserIsLoggedIn MagicControl.Designer MagicControl.Classes(string) MagicControl.ClassesOrDefault(string, string) MagicControl.Value(string) MagicControl.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Button [Parameter] public RenderFragment? Button { get; set; } Property Value RenderFragment Content [Parameter] public RenderFragment? Content { get; set; } Property Value RenderFragment ContentMore [Parameter] public RenderFragment? ContentMore { get; set; } Property Value RenderFragment More [Parameter] public Dictionary<string, object>? More { get; set; } Property Value Dictionary<string, object> Show [Parameter] public bool? Show { get; set; } Property Value bool? Target [Parameter] [EditorRequired] public object? Target { get; set; } Property Value object Title [Parameter] public string? Title { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicDynamicComponent.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicDynamicComponent.html",
    "title": "Class MagicDynamicComponent | cre8magic",
    "keywords": "Class MagicDynamicComponent Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicDynamicComponent Inheritance object MagicDynamicComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicDynamicComponent(string, Type, Dictionary<string, object>?) public MagicDynamicComponent(string group, Type type, Dictionary<string, object>? parameters) Parameters group string type Type parameters Dictionary<string, object> Properties Group public string Group { get; set; } Property Value string Parameters public Dictionary<string, object>? Parameters { get; set; } Property Value Dictionary<string, object> Type public Type Type { get; set; } Property Value Type"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicDynamicComponents.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicDynamicComponents.html",
    "title": "Class MagicDynamicComponents | cre8magic",
    "keywords": "Class MagicDynamicComponents Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicDynamicComponents : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase MagicDynamicComponents Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Components [Parameter] public List<MagicDynamicComponent>? Components { get; set; } Property Value List<MagicDynamicComponent> Group [Parameter] public string? Group { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicExceptions.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicExceptions.html",
    "title": "Class MagicExceptions | cre8magic",
    "keywords": "Class MagicExceptions Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicExceptions : MagicControl, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControl MagicExceptions Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicControl.Settings MagicControl.PageFactory MagicControl.UserIsAdmin MagicControl.UserIsEditor MagicControl.UserIsLoggedIn MagicControl.Designer MagicControl.Classes(string) MagicControl.ClassesOrDefault(string, string) MagicControl.Value(string) MagicControl.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicLogin.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicLogin.html",
    "title": "Class MagicLogin | cre8magic",
    "keywords": "Class MagicLogin Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicLogin : LoginBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase LoginBase MagicLogin Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IMagicDesigner Inherited Members LoginBase.loginurl LoginBase.logouturl LoginBase.returnurl LoginBase.OnParametersSet() LoginBase.LoginUser() LoginBase.LogoutUser() LoginBase.NavigationManager LoginBase.UserService LoginBase.SettingService LoginBase.jsRuntime LoginBase.ServiceProvider ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllSettings [CascadingParameter] public MagicAllSettings AllSettings { get; set; } Property Value MagicAllSettings IsLoggedIn protected bool IsLoggedIn { get; } Property Value bool LocalizedLabel protected string LocalizedLabel { get; } Property Value string Methods ChangeLogin() protected Task ChangeLogin() Returns Task Classes(string) public string? Classes(string target) Parameters target string Returns string Id(string) public string? Id(string name) Parameters name string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Controls.MagicOqtaneControlPanel.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.MagicOqtaneControlPanel.html",
    "title": "Class MagicOqtaneControlPanel | cre8magic",
    "keywords": "Class MagicOqtaneControlPanel Namespace ToSic.Cre8magic.Client.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicOqtaneControlPanel : MagicControl, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControl MagicOqtaneControlPanel Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicControl.Settings MagicControl.PageFactory MagicControl.UserIsAdmin MagicControl.UserIsEditor MagicControl.UserIsLoggedIn MagicControl.Designer MagicControl.Classes(string) MagicControl.ClassesOrDefault(string, string) MagicControl.Value(string) MagicControl.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Client.Controls.html": {
    "href": "api/ToSic.Cre8magic.Client.Controls.html",
    "title": "Namespace ToSic.Cre8magic.Client.Controls | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Controls Classes MagicComponentBase Non-Oqtane Blazor component with Settings as base for your controls MagicControlBase Oqtane Blazor Control with Settings MagicDynamicComponent MagicLogin Interfaces IMagicControlWithSettings IMagicDesigner"
  },
  "api/ToSic.Cre8magic.Client.DictionaryExtensions.html": {
    "href": "api/ToSic.Cre8magic.Client.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | cre8magic",
    "keywords": "Class DictionaryExtensions Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class DictionaryExtensions Inheritance object DictionaryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.JsModules.MagicJsServiceBase.html": {
    "href": "api/ToSic.Cre8magic.Client.JsModules.MagicJsServiceBase.html",
    "title": "Class MagicJsServiceBase | cre8magic",
    "keywords": "Class MagicJsServiceBase Namespace ToSic.Cre8magic.Client.JsModules Assembly ToSic.Cre8magic.Client.Oqtane.dll Base for any JS Module Helper class public abstract class MagicJsServiceBase Inheritance object MagicJsServiceBase Derived MagicThemeJsServiceTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicJsServiceBase(IJSRuntime, string) Constructor protected MagicJsServiceBase(IJSRuntime jsRuntime, string modulePath) Parameters jsRuntime IJSRuntime JS Runtime of the control, usually available later, like in the OnAfterRenderAsync modulePath string Path to the javascript file, must be a JS6 Module Properties JsRuntime protected IJSRuntime JsRuntime { get; } Property Value IJSRuntime ModulePath protected string ModulePath { get; } Property Value string Methods InvokeAsync<TValue>(string) protected Task<TValue> InvokeAsync<TValue>(string identifier) Parameters identifier string Returns Task<TValue> Type Parameters TValue InvokeAsync<TValue>(string, params object[]) protected Task<TValue> InvokeAsync<TValue>(string identifier, params object[] args) Parameters identifier string args object[] Returns Task<TValue> Type Parameters TValue Log(params object[]) public Task Log(params object[] args) Parameters args object[] Returns Task Module() The JsObjectReference to the real module. Will need to load it on first access, so it's async. public Task<IJSObjectReference> Module() Returns Task<IJSObjectReference>"
  },
  "api/ToSic.Cre8magic.Client.JsModules.html": {
    "href": "api/ToSic.Cre8magic.Client.JsModules.html",
    "title": "Namespace ToSic.Cre8magic.Client.JsModules | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.JsModules Classes MagicJsServiceBase Base for any JS Module Helper class"
  },
  "api/ToSic.Cre8magic.Client.Languages.MagicLanguageDebug.html": {
    "href": "api/ToSic.Cre8magic.Client.Languages.MagicLanguageDebug.html",
    "title": "Class MagicLanguageDebug | cre8magic",
    "keywords": "Class MagicLanguageDebug Namespace ToSic.Cre8magic.Client.Languages Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicLanguageDebug : MagicControl, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControl MagicLanguageDebug Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicControl.Settings MagicControl.PageFactory MagicControl.UserIsAdmin MagicControl.UserIsEditor MagicControl.UserIsLoggedIn MagicControl.Designer MagicControl.Classes(string) MagicControl.ClassesOrDefault(string, string) MagicControl.Value(string) MagicControl.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LanguageService [Parameter] [EditorRequired] public LanguageService LanguageService { get; set; } Property Value LanguageService Languages [Parameter] [EditorRequired] public List<MagicLanguage> Languages { get; set; } Property Value List<MagicLanguage> Show [Parameter] [EditorRequired] public bool Show { get; set; } Property Value bool Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Client.Languages.MagicLanguageMenu.html": {
    "href": "api/ToSic.Cre8magic.Client.Languages.MagicLanguageMenu.html",
    "title": "Class MagicLanguageMenu | cre8magic",
    "keywords": "Class MagicLanguageMenu Namespace ToSic.Cre8magic.Client.Languages Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicLanguageMenu : MagicControl, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControl MagicLanguageMenu Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicControl.Settings MagicControl.PageFactory MagicControl.UserIsAdmin MagicControl.UserIsEditor MagicControl.UserIsLoggedIn MagicControl.Classes(string) MagicControl.ClassesOrDefault(string, string) MagicControl.Value(string) MagicControl.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Designer protected override IMagicDesigner Designer { get; } Property Value IMagicDesigner LanguageService [Inject] protected LanguageService LanguageService { get; set; } Property Value LanguageService Languages public List<MagicLanguage> Languages { get; } Property Value List<MagicLanguage> Show Determines if the languages should be shown. Will be retrieved from the settings protected bool? Show { get; } Property Value bool? Methods Classes(MagicLanguage?, string) public string? Classes(MagicLanguage? lang, string tag) Parameters lang MagicLanguage tag string Returns string OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A System.Threading.Tasks.Task representing any asynchronous operation. SetLanguage(string) public Task SetLanguage(string culture) Parameters culture string Returns Task"
  },
  "api/ToSic.Cre8magic.Client.Languages.Settings.MagicLanguage.html": {
    "href": "api/ToSic.Cre8magic.Client.Languages.Settings.MagicLanguage.html",
    "title": "Class MagicLanguage | cre8magic",
    "keywords": "Class MagicLanguage Namespace ToSic.Cre8magic.Client.Languages.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicLanguage Inheritance object MagicLanguage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicLanguage() Empty constructor for deserialization public MagicLanguage() Properties Culture public string? Culture { get; set; } Property Value string Description Description to show for this language. Will auto-default to the system name for this language. public string? Description { get; set; } Property Value string IsActive public bool IsActive { get; } Property Value bool Label Label to show for this culture. Will auto-default to first two characters. public string? Label { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Languages.Settings.MagicLanguagesSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Languages.Settings.MagicLanguagesSettings.html",
    "title": "Class MagicLanguagesSettings | cre8magic",
    "keywords": "Class MagicLanguagesSettings Namespace ToSic.Cre8magic.Client.Languages.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicLanguagesSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicLanguagesSettings Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicLanguagesSettings() Dummy constructor so better find cases where it's created Note it must be without parameters for json deserialization public MagicLanguagesSettings() Properties Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; set; } Property Value MagicDebugSettings HideOthers If true, will only show the languages which are explicitly configured. If false, will first show the configured languages, then the rest. public bool HideOthers { get; set; } Property Value bool Languages List of languages public NamedSettings<MagicLanguage>? Languages { get; set; } Property Value NamedSettings<MagicLanguage>"
  },
  "api/ToSic.Cre8magic.Client.Languages.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Languages.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Languages.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Languages.Settings Classes MagicLanguage MagicLanguagesSettings"
  },
  "api/ToSic.Cre8magic.Client.Languages.html": {
    "href": "api/ToSic.Cre8magic.Client.Languages.html",
    "title": "Namespace ToSic.Cre8magic.Client.Languages | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Languages Namespaces ToSic.Cre8magic.Client.Languages.Settings Classes MagicLanguageDebug MagicLanguageMenu"
  },
  "api/ToSic.Cre8magic.Client.Logging.CodeRef.html": {
    "href": "api/ToSic.Cre8magic.Client.Logging.CodeRef.html",
    "title": "Class CodeRef | cre8magic",
    "keywords": "Class CodeRef Namespace ToSic.Cre8magic.Client.Logging Assembly ToSic.Cre8magic.Client.Oqtane.dll Reference to code - containing the path to the file, the method name and the line in the code. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class CodeRef Inheritance object CodeRef Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CodeRef(bool, string, string, int) This constructor should be called without params, so that the compiler automatically injects all values. public CodeRef(bool autoPickup = true, string cPath = null, string cName = null, int cLine = 0) Parameters autoPickup bool Dummy parameter just to have a different signature. cPath string auto pre filled by the compiler - the path to the code file cName string auto pre filled by the compiler - the method name cLine int auto pre filled by the compiler - the code line CodeRef(string, string, int) Default constructor to set the values public CodeRef(string cPath, string cName, int cLine) Parameters cPath string cName string cLine int Fields Line Line of code where the code was running public int Line Field Value int Name Name of the method/property accessed public string Name Field Value string Path Path to the code file public string Path Field Value string"
  },
  "api/ToSic.Cre8magic.Client.Logging.LogCall-1.html": {
    "href": "api/ToSic.Cre8magic.Client.Logging.LogCall-1.html",
    "title": "Class LogCall<T> | cre8magic",
    "keywords": "Class LogCall<T> Namespace ToSic.Cre8magic.Client.Logging Assembly ToSic.Cre8magic.Client.Oqtane.dll public class LogCall<T> : LogCallBase Type Parameters T Inheritance object LogCallBase LogCall<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Return(T) public T Return(T result) Parameters result T Returns T Return(T, string) public T Return(T result, string message) Parameters result T message string Returns T ReturnAndKeepData(T, string) public T ReturnAndKeepData(T result, string message) Parameters result T message string Returns T ReturnAndLog(T) public T ReturnAndLog(T result) Parameters result T Returns T ReturnNull() public T ReturnNull() Returns T ReturnNull(string) public T ReturnNull(string message) Parameters message string Returns T"
  },
  "api/ToSic.Cre8magic.Client.Logging.LogCall.html": {
    "href": "api/ToSic.Cre8magic.Client.Logging.LogCall.html",
    "title": "Class LogCall | cre8magic",
    "keywords": "Class LogCall Namespace ToSic.Cre8magic.Client.Logging Assembly ToSic.Cre8magic.Client.Oqtane.dll public class LogCall : LogCallBase Inheritance object LogCallBase LogCall Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.Logging.LogCallBase.html": {
    "href": "api/ToSic.Cre8magic.Client.Logging.LogCallBase.html",
    "title": "Class LogCallBase | cre8magic",
    "keywords": "Class LogCallBase Namespace ToSic.Cre8magic.Client.Logging Assembly ToSic.Cre8magic.Client.Oqtane.dll public class LogCallBase Inheritance object LogCallBase Derived LogCall LogCall<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.Logging.html": {
    "href": "api/ToSic.Cre8magic.Client.Logging.html",
    "title": "Namespace ToSic.Cre8magic.Client.Logging | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Logging Classes CodeRef Reference to code - containing the path to the file, the method name and the line in the code. LogCall LogCallBase LogCall<T>"
  },
  "api/ToSic.Cre8magic.Client.MagicConstants.html": {
    "href": "api/ToSic.Cre8magic.Client.MagicConstants.html",
    "title": "Class MagicConstants | cre8magic",
    "keywords": "Class MagicConstants Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicConstants Inheritance object MagicConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Default public static string Default Field Value string DesignMobile public static string DesignMobile Field Value string InheritName If used on a name, means it should inherit the name used for the layout to find the menu/design/etc. public static string InheritName Field Value string MenuHorizontal public const string MenuHorizontal = \"Horizontal\" Field Value string MenuVertical public const string MenuVertical = \"Vertical\" Field Value string PackageId public const string PackageId = \"ToSic.Cre8magic.Oqtane\" Field Value string"
  },
  "api/ToSic.Cre8magic.Client.MagicTokens.html": {
    "href": "api/ToSic.Cre8magic.Client.MagicTokens.html",
    "title": "Class MagicTokens | cre8magic",
    "keywords": "Class MagicTokens Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicTokens Inheritance object MagicTokens Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenu.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenu.html",
    "title": "Class MagicMenu | cre8magic",
    "keywords": "Class MagicMenu Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Base class for any menu list public abstract class MagicMenu : MagicMenuBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MagicMenuBase MagicMenu Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicMenuBase.Settings MagicMenuBase.PageFactory MagicMenuBase.Classes(string) MagicMenuBase.Value(string) MagicMenuBase.Id(string) MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) MenuBase.MenuPages ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Menu [Parameter] [EditorRequired] public IMagicPageList Menu { get; set; } Property Value IMagicPageList"
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenuBase.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenuBase.html",
    "title": "Class MagicMenuBase | cre8magic",
    "keywords": "Class MagicMenuBase Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicMenuBase : MenuBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MagicMenuBase Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Derived MagicMenu MagicMenuRoot Inherited Members MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) MenuBase.MenuPages ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PageFactory protected MagicPageFactory PageFactory { get; } Property Value MagicPageFactory Settings [CascadingParameter] public MagicSettings Settings { get; set; } Property Value MagicSettings Methods Classes(string) public string? Classes(string target) Parameters target string Returns string Id(string) public string? Id(string target) Parameters target string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenuBuilder.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenuBuilder.html",
    "title": "Class MagicMenuBuilder | cre8magic",
    "keywords": "Class MagicMenuBuilder Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Will create a MenuTree based on the current pages information and configuration public class MagicMenuBuilder : MagicServiceWithSettingsBase Inheritance object MagicServiceWithSettingsBase MagicMenuBuilder Inherited Members MagicServiceWithSettingsBase.InitSettings(MagicSettings) MagicServiceWithSettingsBase.Settings object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicMenuBuilder(ILogger<MagicMenuBuilder>) Will create a MenuTree based on the current pages information and configuration public MagicMenuBuilder(ILogger<MagicMenuBuilder> logger) Parameters logger ILogger<MagicMenuBuilder> Properties Logger public ILogger Logger { get; } Property Value ILogger Methods GetTree(MagicMenuSettings, List<IMagicPage>) public MagicMenuTree GetTree(MagicMenuSettings config, List<IMagicPage> menuPages) Parameters config MagicMenuSettings menuPages List<IMagicPage> Returns MagicMenuTree"
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenuDebug.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenuDebug.html",
    "title": "Class MagicMenuDebug | cre8magic",
    "keywords": "Class MagicMenuDebug Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicMenuDebug : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase MagicMenuDebug Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Menu [Parameter] [EditorRequired] public IMagicPageList? Menu { get; set; } Property Value IMagicPageList Standalone [Parameter] public bool Standalone { get; set; } Property Value bool Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenuPage.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenuPage.html",
    "title": "Class MagicMenuPage | cre8magic",
    "keywords": "Class MagicMenuPage Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Represents a menu page in the MagicMenu system. public class MagicMenuPage : MagicPageWithDesign, IMagicPage, IMagicPageList Inheritance object MagicPageBase MagicPage MagicPageWithDesign MagicMenuPage Implements IMagicPage IMagicPageList Inherited Members MagicPageWithDesign.Classes(string) MagicPageWithDesign.Value(string) MagicPage.PageFactory MagicPage.IsCurrent MagicPage.Link MagicPage.Target MagicPage.Breadcrumbs MagicPage.InBreadcrumbs MagicPage.ToString() MagicPage.Parent MagicPageBase.OriginalPage MagicPageBase.Id MagicPageBase.ParentId MagicPageBase.Path MagicPageBase.Name MagicPageBase.Url MagicPageBase.IsClickable MagicPageBase.Level object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Can't provide PageState from DI because that breaks Oqtane. Properties Children Get children of the current menu page. public IList<MagicMenuPage> Children { get; } Property Value IList<MagicMenuPage> HasChildren Determines if there are sub-pages. True if this page has sub-pages. public bool HasChildren { get; } Property Value bool MenuId The ID of the menu item public string MenuId { get; } Property Value string MenuLevel Menu Level relative to the start of the menu (always starts with 1) public override int MenuLevel { get; } Property Value int Remarks This is not the same as Oqtane Page.Level (which exists in base class). Settings public MagicMenuSettings Settings { get; } Property Value MagicMenuSettings Methods GetChildren() Retrieve the children the first time it's needed. protected List<MagicMenuPage> GetChildren() Returns List<MagicMenuPage>"
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenuRoot.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenuRoot.html",
    "title": "Class MagicMenuRoot | cre8magic",
    "keywords": "Class MagicMenuRoot Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Base class for Razor menus public abstract class MagicMenuRoot : MagicMenuBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MagicMenuBase MagicMenuRoot Implements IComponent IHandleEvent IHandleAfterRender IThemeControl Inherited Members MagicMenuBase.Classes(string) MagicMenuBase.Value(string) MagicMenuBase.Id(string) MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) MenuBase.MenuPages ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Children [Parameter] public bool? Children { get; set; } Property Value bool? ConfigName [Parameter] public string? ConfigName { get; set; } Property Value string Debug [Parameter] public bool? Debug { get; set; } Property Value bool? Depth [Parameter] public int? Depth { get; set; } Property Value int? Design [Parameter] public string? Design { get; set; } Property Value string Display [Parameter] public bool? Display { get; set; } Property Value bool? IsHorizontal protected bool IsHorizontal { get; } Property Value bool IsVertical Detect if the menu is configured for vertical. For the most common 2 kinds of menu options. protected bool IsVertical { get; } Property Value bool Level [Parameter] public int? Level { get; set; } Property Value int? Logger [Inject] public ILogger<Menu>? Logger { get; set; } Property Value ILogger<Menu> MagicMenuService [Inject] public IMagicMenuService? MagicMenuService { get; set; } Property Value IMagicMenuService Menu protected IMagicPageList? Menu { get; } Property Value IMagicPageList MenuId [Parameter] public string? MenuId { get; set; } Property Value string MenuSettings Complex object with all settings. If this is used, all other settings will be ignored. [Parameter] public MagicMenuSettings? MenuSettings { get; set; } Property Value MagicMenuSettings PageList [Parameter] public List<int>? PageList { get; set; } Property Value List<int> Start [Parameter] public string? Start { get; set; } Property Value string Template [Parameter] public string? Template { get; set; } Property Value string Methods OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A System.Threading.Tasks.Task representing any asynchronous operation."
  },
  "api/ToSic.Cre8magic.Client.Menus.MagicMenuTree.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.MagicMenuTree.html",
    "title": "Class MagicMenuTree | cre8magic",
    "keywords": "Class MagicMenuTree Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicMenuTree : IMagicPageList Inheritance object MagicMenuTree Implements IMagicPageList Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicMenuTree(PageState) public MagicMenuTree(PageState pageState) Parameters pageState PageState Properties Children public IList<MagicMenuPage> Children { get; } Property Value IList<MagicMenuPage> Debug public List<string> Debug { get; } Property Value List<string> HasChildren public bool HasChildren { get; } Property Value bool MaxDepth public int MaxDepth { get; } Property Value int MenuLevel public int MenuLevel { get; } Property Value int Settings public MagicMenuSettings Settings { get; } Property Value MagicMenuSettings Methods Classes(string) Get css class for tag. public string? Classes(string tag) Parameters tag string Returns string Designer(IPageDesigner) public MagicMenuTree Designer(IPageDesigner pageDesigner) Parameters pageDesigner IPageDesigner Returns MagicMenuTree GetChildren() protected List<MagicMenuPage> GetChildren() Returns List<MagicMenuPage> SetMenuPages(IEnumerable<IMagicPage>) public MagicMenuTree SetMenuPages(IEnumerable<IMagicPage> menuPages) Parameters menuPages IEnumerable<IMagicPage> Returns MagicMenuTree SetMessages(List<string>) public MagicMenuTree SetMessages(List<string> messages) Parameters messages List<string> Returns MagicMenuTree Setup(MagicMenuSettings?) public MagicMenuTree Setup(MagicMenuSettings? settings) Parameters settings MagicMenuSettings Returns MagicMenuTree Value(string) Get attribute value. public string? Value(string key) Parameters key string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Menus.NodeRuleHelper.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.NodeRuleHelper.html",
    "title": "Class NodeRuleHelper | cre8magic",
    "keywords": "Class NodeRuleHelper Namespace ToSic.Cre8magic.Client.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll public class NodeRuleHelper Inheritance object NodeRuleHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PageForced public const char PageForced = '!' Field Value char Properties Settings public MagicMenuSettings Settings { get; } Property Value MagicMenuSettings"
  },
  "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuDesign.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuDesign.html",
    "title": "Class MagicMenuDesign | cre8magic",
    "keywords": "Class MagicMenuDesign Namespace ToSic.Cre8magic.Client.Menus.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicMenuDesign : DesignSetting Inheritance object DesignSetting MagicMenuDesign Inherited Members DesignSetting.Classes DesignSetting.Value DesignSetting.Id DesignSetting.IsActive DesignSetting.IsPublished DesignSetting.IsAdmin object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ByLevel List of classes to add on certain levels only. Use level -1 to specify classes to apply to all the remaining ones which are not explicitly listed. public Dictionary<int, string>? ByLevel { get; set; } Property Value Dictionary<int, string> HasChildren Classes to add if this node is a parent (has-children). public PairOnOff? HasChildren { get; set; } Property Value PairOnOff InBreadcrumb Classes to add if this node is in the path / breadcrumb of the current page. public PairOnOff? InBreadcrumb { get; set; } Property Value PairOnOff IsDisabled Classes to add if the node is disabled. TODO: unclear why it's disabled, what would cause this... public PairOnOff? IsDisabled { get; set; } Property Value PairOnOff"
  },
  "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuDesigner.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuDesigner.html",
    "title": "Class MagicMenuDesigner | cre8magic",
    "keywords": "Class MagicMenuDesigner Namespace ToSic.Cre8magic.Client.Menus.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Special helper to provide Css classes to menus public class MagicMenuDesigner : IPageDesigner Inheritance object MagicMenuDesigner Implements IPageDesigner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Classes(string, IMagicPage) public string Classes(string tag, IMagicPage page) Parameters tag string page IMagicPage Returns string Value(string, IMagicPage) public string Value(string key, IMagicPage page) Parameters key string page IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.Settings.MagicMenuSettings.html",
    "title": "Class MagicMenuSettings | cre8magic",
    "keywords": "Class MagicMenuSettings Namespace ToSic.Cre8magic.Client.Menus.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicMenuSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicMenuSettings Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicMenuSettings() Empty constructor is important for JSON deserialization public MagicMenuSettings() Fields ChildrenFallback public const bool ChildrenFallback = false Field Value bool DisplayDefault public const bool DisplayDefault = true Field Value bool LevelDepthFallback public const int LevelDepthFallback = 1 Field Value int StartLevelFallback public const int StartLevelFallback = 0 Field Value int StartPageCurrent public const string StartPageCurrent = \".\" Field Value string StartPageRoot public const string StartPageRoot = \"*\" Field Value string TemplateDefault public const string TemplateDefault = \"Horizontal\" Field Value string Properties Children Levels to skip from the initial stating point. 0 means don't skip any, so if we're starting at the root, show that level 1 means skip the first level, so if we're starting at the root, show the children See inspiration context from DDRMenu https://www.dnnsoftware.com/wiki/ddrmenu-reference-guide in DDR it was called 'skip' but it didn't make sense IMHO public bool? Children { get; set; } Property Value bool? ConfigName Name to identify this configuration public string? ConfigName { get; set; } Property Value string Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; set; } Property Value MagicDebugSettings Depth public int? Depth { get; set; } Property Value int? DesignSettings public NamedSettings<MagicMenuDesign>? DesignSettings { get; set; } Property Value NamedSettings<MagicMenuDesign> Display Determines if this navigation should be shown. Mainly used for standard menus which could be disabled through configuration. public bool? Display { get; set; } Property Value bool? Id A unique ID to identify the menu. Would be used for debugging but also to help in creating unique css-classes for collapsible menus public string? Id { get; set; } Property Value string Level The level this menu should start from. 0 is the top level (default) 1 is the top level containing home and other pages -1 is one level up from the current node -2 is two levels up from the current node public int? Level { get; set; } Property Value int? MenuId public string MenuId { get; } Property Value string Start Start page of this navigation - like home or another specific page. Can be a specific ID a CSV of IDs ??? * to indicate all pages on the specified level . to indicate current page blank / null, to use another start ??? public string? Start { get; set; } Property Value string Template The template to use - horizontal/vertical public string? Template { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Menus.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Menus.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Menus.Settings Classes MagicMenuDesign MagicMenuDesigner Special helper to provide Css classes to menus MagicMenuSettings"
  },
  "api/ToSic.Cre8magic.Client.Menus.html": {
    "href": "api/ToSic.Cre8magic.Client.Menus.html",
    "title": "Namespace ToSic.Cre8magic.Client.Menus | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Menus Classes MagicMenuRoot Base class for Razor menus"
  },
  "api/ToSic.Cre8magic.Client.PageStateMenuExtensions.html": {
    "href": "api/ToSic.Cre8magic.Client.PageStateMenuExtensions.html",
    "title": "Class PageStateMenuExtensions | cre8magic",
    "keywords": "Class PageStateMenuExtensions Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class PageStateMenuExtensions Inheritance object PageStateMenuExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.PageStateSecurityExtensions.html": {
    "href": "api/ToSic.Cre8magic.Client.PageStateSecurityExtensions.html",
    "title": "Class PageStateSecurityExtensions | cre8magic",
    "keywords": "Class PageStateSecurityExtensions Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class PageStateSecurityExtensions Inheritance object PageStateSecurityExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.Pages.IMagicPageList.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.IMagicPageList.html",
    "title": "Interface IMagicPageList | cre8magic",
    "keywords": "Interface IMagicPageList Namespace ToSic.Cre8magic.Client.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicPageList Properties Children IList<MagicMenuPage> Children { get; } Property Value IList<MagicMenuPage> HasChildren bool HasChildren { get; } Property Value bool MenuLevel int MenuLevel { get; } Property Value int Methods Classes(string) Get css class for tag. string? Classes(string tag) Parameters tag string Returns string Value(string) Get attribute value. string? Value(string key) Parameters key string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Pages.IPageDesigner.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.IPageDesigner.html",
    "title": "Interface IPageDesigner | cre8magic",
    "keywords": "Interface IPageDesigner Namespace ToSic.Cre8magic.Client.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IPageDesigner Methods Classes(string, IMagicPage) string Classes(string tag, IMagicPage page) Parameters tag string page IMagicPage Returns string Value(string, IMagicPage) string Value(string key, IMagicPage page) Parameters key string page IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPage.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPage.html",
    "title": "Class MagicPage | cre8magic",
    "keywords": "Class MagicPage Namespace ToSic.Cre8magic.Client.Pages.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Wrapper for the Oqtane Page. public class MagicPage : MagicPageBase, IMagicPage Inheritance object MagicPageBase MagicPage Implements IMagicPage Derived MagicPageWithDesign Inherited Members MagicPageBase.OriginalPage MagicPageBase.Id MagicPageBase.ParentId MagicPageBase.Path MagicPageBase.Name MagicPageBase.Url MagicPageBase.IsClickable MagicPageBase.Level MagicPageBase.HasChildren object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MagicPage(Page, MagicPageFactory) Wrapper for the Oqtane Page. public MagicPage(Page originalPage, MagicPageFactory pageFactory) Parameters originalPage Page pageFactory MagicPageFactory Properties Breadcrumbs The current pages bread-crumb, going from the top-level to the current page. Note that the \"Home\" page is usually not a parent, so it's not included. public List<IMagicPage> Breadcrumbs { get; } Property Value List<IMagicPage> InBreadcrumbs Determine if the menu page is in the breadcrumb. public bool InBreadcrumbs { get; } Property Value bool IsCurrent True if this page is the current page which the user is viewing. public bool IsCurrent { get; } Property Value bool Link Link to this page. public string Link { get; } Property Value string MenuLevel Level in the menu, starting from 1. As different menus may start at other depths, this is not always the same as the Oqtane level. public virtual int MenuLevel { get; } Property Value int PageFactory protected MagicPageFactory PageFactory { get; } Property Value MagicPageFactory Parent The parent page of this page. public IMagicPage? Parent { get; } Property Value IMagicPage The parent page, or null if the page is on the top level and doesn't have a parent page. Target Target for link to this page. public string? Target { get; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPageBase.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPageBase.html",
    "title": "Class MagicPageBase | cre8magic",
    "keywords": "Class MagicPageBase Namespace ToSic.Cre8magic.Client.Pages.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Wrapper for the Oqtane Page. public class MagicPageBase Inheritance object MagicPageBase Derived MagicPage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicPageBase(Page) Wrapper for the Oqtane Page. public MagicPageBase(Page originalPage) Parameters originalPage Page Properties HasChildren Determines if there are sub-pages. True if this page has sub-pages. public bool HasChildren { get; } Property Value bool Id ID of the Page public int Id { get; } Property Value int IsClickable Link in site navigation is enabled or disabled. public bool IsClickable { get; } Property Value bool Level Current page level from the top of the Menu. As in Oqtane, it's 0 based. public int Level { get; } Property Value int Name Page Name. public string Name { get; } Property Value string OriginalPage Original Oqtane page wrapped in MagicPage. public Page OriginalPage { get; } Property Value Page ParentId Reference to the parent Oqtane.Models.Page if it has one. public int? ParentId { get; } Property Value int? Path Path of the page. public string Path { get; } Property Value string Url Full URL to this page. public string Url { get; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPageFactory.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.Internal.MagicPageFactory.html",
    "title": "Class MagicPageFactory | cre8magic",
    "keywords": "Class MagicPageFactory Namespace ToSic.Cre8magic.Client.Pages.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Factory to create Magic Pages. This is necessary, because the pages need certain properties which require other services to be available. public class MagicPageFactory Inheritance object MagicPageFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicPageFactory(PageState) Factory to create Magic Pages. This is necessary, because the pages need certain properties which require other services to be available. public MagicPageFactory(PageState pageState) Parameters pageState PageState Properties Current public IMagicPage Current { get; } Property Value IMagicPage Home public IMagicPage Home { get; } Property Value IMagicPage Methods All() List of all pages - even these which would currently not be shown in the menu. public IEnumerable<IMagicPage> All() Returns IEnumerable<IMagicPage> ChildrenOf(IList<IMagicPage>, int) public List<IMagicPage> ChildrenOf(IList<IMagicPage> list, int pageId) Parameters list IList<IMagicPage> pageId int Returns List<IMagicPage> Create(Page) public IMagicPage Create(Page page) Parameters page Page Returns IMagicPage CreateOrNull(Page?) public IMagicPage? CreateOrNull(Page? page) Parameters page Page Returns IMagicPage Get(IEnumerable<Page>) public IEnumerable<IMagicPage> Get(IEnumerable<Page> pages) Parameters pages IEnumerable<Page> Returns IEnumerable<IMagicPage> Get(IEnumerable<int>) public IEnumerable<IMagicPage> Get(IEnumerable<int> ids) Parameters ids IEnumerable<int> Returns IEnumerable<IMagicPage> GetOrNull(int?) public IMagicPage? GetOrNull(int? id) Parameters id int? Returns IMagicPage GetUserPages() Pages in the menu according to Oqtane pre-processing Should be limited to pages which should be in the menu, visible and permissions ok. public IEnumerable<IMagicPage> GetUserPages() Returns IEnumerable<IMagicPage>"
  },
  "api/ToSic.Cre8magic.Client.Pages.Internal.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Client.Pages.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Pages.Internal Classes MagicPage Wrapper for the Oqtane Page. MagicPageBase Wrapper for the Oqtane Page. MagicPageFactory Factory to create Magic Pages. This is necessary, because the pages need certain properties which require other services to be available."
  },
  "api/ToSic.Cre8magic.Client.Pages.MagicPageWithDesign.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.MagicPageWithDesign.html",
    "title": "Class MagicPageWithDesign | cre8magic",
    "keywords": "Class MagicPageWithDesign Namespace ToSic.Cre8magic.Client.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicPageWithDesign : MagicPage, IMagicPage Inheritance object MagicPageBase MagicPage MagicPageWithDesign Implements IMagicPage Derived MagicBreadcrumbItem MagicMenuPage Inherited Members MagicPage.PageFactory MagicPage.MenuLevel MagicPage.IsCurrent MagicPage.Link MagicPage.Target MagicPage.Breadcrumbs MagicPage.InBreadcrumbs MagicPage.ToString() MagicPage.Parent MagicPageBase.OriginalPage MagicPageBase.Id MagicPageBase.ParentId MagicPageBase.Path MagicPageBase.Name MagicPageBase.Url MagicPageBase.IsClickable MagicPageBase.Level MagicPageBase.HasChildren object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Classes(string) Get css class for tag. public string? Classes(string tag) Parameters tag string Returns string Value(string) Get attribute value. public string? Value(string key) Parameters key string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Pages.html": {
    "href": "api/ToSic.Cre8magic.Client.Pages.html",
    "title": "Namespace ToSic.Cre8magic.Client.Pages | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Pages Namespaces ToSic.Cre8magic.Client.Pages.Internal Classes MagicPageWithDesign Interfaces IMagicPageList IPageDesigner"
  },
  "api/ToSic.Cre8magic.Client.Services.IMagicSettingsService.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.IMagicSettingsService.html",
    "title": "Interface IMagicSettingsService | cre8magic",
    "keywords": "Interface IMagicSettingsService Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicSettingsService : IHasSettingsExceptions Inherited Members IHasSettingsExceptions.HasExceptions IHasSettingsExceptions.Exceptions Methods GetSettings(PageState) MagicAllSettings GetSettings(PageState pageState) Parameters pageState PageState Returns MagicAllSettings Setup(MagicPackageSettings, string?, string?) Set up the settings service with the package settings, layout name and body classes. This will result in other controls and services being able to use these settings. Otherwise, the settings are just defaulted to some standard values. IMagicSettingsService Setup(MagicPackageSettings packageSettings, string? layoutName, string? bodyClasses) Parameters packageSettings MagicPackageSettings layoutName string bodyClasses string Returns IMagicSettingsService"
  },
  "api/ToSic.Cre8magic.Client.Services.IMagicThemeJsService.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.IMagicThemeJsService.html",
    "title": "Interface IMagicThemeJsService | cre8magic",
    "keywords": "Interface IMagicThemeJsService Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicThemeJsService Methods Log(params object[]) Task Log(params object[] args) Parameters args object[] Returns Task SetBodyClasses(string) Set body classes (removes all previous classes in the process) Task SetBodyClasses(string classes) Parameters classes string Returns Task"
  },
  "api/ToSic.Cre8magic.Client.Services.LanguageService.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.LanguageService.html",
    "title": "Class LanguageService | cre8magic",
    "keywords": "Class LanguageService Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll public class LanguageService : MagicServiceWithSettingsBase Inheritance object MagicServiceWithSettingsBase LanguageService Inherited Members MagicServiceWithSettingsBase.InitSettings(MagicAllSettings) MagicServiceWithSettingsBase.AllSettings object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LanguageService(NavigationManager, IJSRuntime, ILanguageService) public LanguageService(NavigationManager navigation, IJSRuntime jsRuntime, ILanguageService oqtLanguages) Parameters navigation NavigationManager jsRuntime IJSRuntime oqtLanguages ILanguageService Methods LanguagesToShow(int) public Task<List<MagicLanguage>> LanguagesToShow(int siteId) Parameters siteId int Returns Task<List<MagicLanguage>> SetCultureAsync(string) public Task SetCultureAsync(string culture) Parameters culture string Returns Task ShowMenu(int) public Task<bool> ShowMenu(int siteId) Parameters siteId int Returns Task<bool>"
  },
  "api/ToSic.Cre8magic.Client.Services.MagicPageEditService.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.MagicPageEditService.html",
    "title": "Class MagicPageEditService | cre8magic",
    "keywords": "Class MagicPageEditService Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll Helper to remove the logic/code from the razor file. It's just meant to support the AdminButtons, without placing the logic code inside that. public class MagicPageEditService Inheritance object MagicPageEditService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicPageEditService(IPageService, NavigationManager) Helper to remove the logic/code from the razor file. It's just meant to support the AdminButtons, without placing the logic code inside that. public MagicPageEditService(IPageService pageService, NavigationManager navigationManager) Parameters pageService IPageService navigationManager NavigationManager Methods ToggleEditMode(PageState) public Task ToggleEditMode(PageState pageState) Parameters pageState PageState Returns Task"
  },
  "api/ToSic.Cre8magic.Client.Services.MagicServiceWithSettingsBase.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.MagicServiceWithSettingsBase.html",
    "title": "Class MagicServiceWithSettingsBase | cre8magic",
    "keywords": "Class MagicServiceWithSettingsBase Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicServiceWithSettingsBase Inheritance object MagicServiceWithSettingsBase Derived LanguageService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllSettings public MagicAllSettings? AllSettings { get; } Property Value MagicAllSettings Methods InitSettings(MagicAllSettings) public void InitSettings(MagicAllSettings allSettings) Parameters allSettings MagicAllSettings"
  },
  "api/ToSic.Cre8magic.Client.Services.MagicSettingsJsonService.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.MagicSettingsJsonService.html",
    "title": "Class MagicSettingsJsonService | cre8magic",
    "keywords": "Class MagicSettingsJsonService Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicSettingsJsonService : IHasSettingsExceptions Inheritance object MagicSettingsJsonService Implements IHasSettingsExceptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicSettingsJsonService(ILogger<MagicSettingsJsonService>) public MagicSettingsJsonService(ILogger<MagicSettingsJsonService> logger) Parameters logger ILogger<MagicSettingsJsonService> Properties Exceptions public List<Exception> Exceptions { get; } Property Value List<Exception> Logger public ILogger<MagicSettingsJsonService> Logger { get; } Property Value ILogger<MagicSettingsJsonService> Methods LoadJson(MagicPackageSettings) public MagicSettingsCatalog LoadJson(MagicPackageSettings themeConfig) Parameters themeConfig MagicPackageSettings Returns MagicSettingsCatalog"
  },
  "api/ToSic.Cre8magic.Client.Services.MagicSettingsService.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.MagicSettingsService.html",
    "title": "Class MagicSettingsService | cre8magic",
    "keywords": "Class MagicSettingsService Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll Service which consolidates settings made in the UI, in the JSON and falls back to coded defaults. public class MagicSettingsService : IHasSettingsExceptions Inheritance object MagicSettingsService Implements IHasSettingsExceptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicSettingsService(MagicSettingsJsonService, ILogger<MagicSettingsService>) Constructor public MagicSettingsService(MagicSettingsJsonService jsonService, ILogger<MagicSettingsService> logger) Parameters jsonService MagicSettingsJsonService logger ILogger<MagicSettingsService> Properties Debug public MagicDebugSettings Debug { get; } Property Value MagicDebugSettings Exceptions public List<Exception> Exceptions { get; } Property Value List<Exception> Logger public ILogger<MagicSettingsService> Logger { get; } Property Value ILogger<MagicSettingsService> Methods CurrentSettings(PageState, string?, string) public MagicSettings CurrentSettings(PageState pageState, string? name, string bodyClasses) Parameters pageState PageState name string bodyClasses string Returns MagicSettings InitSettings(MagicPackageSettings) public MagicSettingsService InitSettings(MagicPackageSettings themeSettings) Parameters themeSettings MagicPackageSettings Returns MagicSettingsService"
  },
  "api/ToSic.Cre8magic.Client.Services.MagicThemeJsServiceTest.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.MagicThemeJsServiceTest.html",
    "title": "Class MagicThemeJsServiceTest | cre8magic",
    "keywords": "Class MagicThemeJsServiceTest Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll Constants and helpers related to JS calls from the Theme to it's own JS libraries public class MagicThemeJsServiceTest : MagicJsServiceBase, IMagicThemeJsService Inheritance object MagicJsServiceBase MagicThemeJsServiceTest Implements IMagicThemeJsService Inherited Members MagicJsServiceBase.JsRuntime MagicJsServiceBase.ModulePath MagicJsServiceBase.Log(params object[]) MagicJsServiceBase.Module() MagicJsServiceBase.InvokeAsync<TValue>(string) MagicJsServiceBase.InvokeAsync<TValue>(string, params object[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicThemeJsServiceTest(IJSRuntime) Constants and helpers related to JS calls from the Theme to it's own JS libraries public MagicThemeJsServiceTest(IJSRuntime jsRuntime) Parameters jsRuntime IJSRuntime Methods SetBodyClasses(string) Set body classes (removes all previous classes in the process) public Task SetBodyClasses(string classes) Parameters classes string Returns Task TestFromTest() public Task<string> TestFromTest() Returns Task<string>"
  },
  "api/ToSic.Cre8magic.Client.Services.Startup.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.Startup.html",
    "title": "Class Startup | cre8magic",
    "keywords": "Class Startup Namespace ToSic.Cre8magic.Client.Services Assembly ToSic.Cre8magic.Client.Oqtane.dll public class Startup : IClientStartup Inheritance object Startup Implements IClientStartup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureServices(IServiceCollection) Register Services public void ConfigureServices(IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/ToSic.Cre8magic.Client.Services.html": {
    "href": "api/ToSic.Cre8magic.Client.Services.html",
    "title": "Namespace ToSic.Cre8magic.Client.Services | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Services Classes LanguageService MagicPageEditService Helper to remove the logic/code from the razor file. It's just meant to support the AdminButtons, without placing the logic code inside that. MagicServiceWithSettingsBase MagicThemeJsServiceTest Constants and helpers related to JS calls from the Theme to it's own JS libraries Interfaces IMagicSettingsService IMagicThemeJsService"
  },
  "api/ToSic.Cre8magic.Client.Settings.Debug.MagicDebugSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.Debug.MagicDebugSettings.html",
    "title": "Class MagicDebugSettings | cre8magic",
    "keywords": "Class MagicDebugSettings Namespace ToSic.Cre8magic.Client.Settings.Debug Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicDebugSettings Inheritance object MagicDebugSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Admin public bool? Admin { get; set; } Property Value bool? Allowed public bool? Allowed { get; set; } Property Value bool? Anonymous public bool? Anonymous { get; set; } Property Value bool? Detailed public bool? Detailed { get; set; } Property Value bool? Methods GetState(object?, bool) public MagicDebugState GetState(object? target, bool isAdmin) Parameters target object isAdmin bool Returns MagicDebugState"
  },
  "api/ToSic.Cre8magic.Client.Settings.Debug.MagicDebugState.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.Debug.MagicDebugState.html",
    "title": "Class MagicDebugState | cre8magic",
    "keywords": "Class MagicDebugState Namespace ToSic.Cre8magic.Client.Settings.Debug Assembly ToSic.Cre8magic.Client.Oqtane.dll Current debug state - show/enabled yes no public class MagicDebugState Inheritance object MagicDebugState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Show public bool Show { get; set; } Property Value bool"
  },
  "api/ToSic.Cre8magic.Client.Settings.Debug.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.Debug.html",
    "title": "Namespace ToSic.Cre8magic.Client.Settings.Debug | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Settings.Debug Classes MagicDebugSettings MagicDebugState Current debug state - show/enabled yes no"
  },
  "api/ToSic.Cre8magic.Client.Settings.DesignSetting.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.DesignSetting.html",
    "title": "Class DesignSetting | cre8magic",
    "keywords": "Class DesignSetting Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Anything that can define what classes it should have. This is usually the base class for something that can also have more information. public class DesignSetting Inheritance object DesignSetting Derived MagicBreadcrumbDesign MagicMenuDesign Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Classes Classes which are applied to all the tags of this type public string? Classes { get; set; } Property Value string Id public string? Id { get; set; } Property Value string IsActive Classes to apply if this thing is active. For example, the current page or language. public PairOnOff? IsActive { get; set; } Property Value PairOnOff IsAdmin If a module is admin or not, usually just for containers public PairOnOff? IsAdmin { get; set; } Property Value PairOnOff IsPublished If something is published or not, usually just for Containers public PairOnOff? IsPublished { get; set; } Property Value PairOnOff Value Special key to get a value - for non-css configurations public string? Value { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Settings.DesignSettingsJsonConverter-1.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.DesignSettingsJsonConverter-1.html",
    "title": "Class DesignSettingsJsonConverter<T> | cre8magic",
    "keywords": "Class DesignSettingsJsonConverter<T> Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Important: NEVER use this on a public class DesignSettingsJsonConverter<T> : JsonConverterBase<T> where T : DesignSetting, new() Type Parameters T Inheritance object JsonConverter JsonConverter<T> JsonConverterBase<T> DesignSettingsJsonConverter<T> Inherited Members JsonConverterBase<T>.Logger JsonConverterBase<T>.GetOptionsWithoutThisConverter(JsonSerializerOptions) JsonConverterBase<T>.ConvertObject(JsonObject, JsonSerializerOptions) JsonConverter<T>.CanConvert(Type) JsonConverter<T>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.WriteAsPropertyName(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.HandleNull JsonConverter<T>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNew(ILogger) public static DesignSettingsJsonConverter<T> GetNew(ILogger logger) Parameters logger ILogger Returns DesignSettingsJsonConverter<T> Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type T. public override T? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns T The converted value. Write(Utf8JsonWriter, T?, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, T? pair, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. pair T options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ToSic.Cre8magic.Client.Settings.IHasMagicSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.IHasMagicSettings.html",
    "title": "Interface IHasMagicSettings | cre8magic",
    "keywords": "Interface IHasMagicSettings Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IHasMagicSettings Properties Settings MagicSettings Settings { get; set; } Property Value MagicSettings"
  },
  "api/ToSic.Cre8magic.Client.Settings.IHasSettingsExceptions.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.IHasSettingsExceptions.html",
    "title": "Interface IHasSettingsExceptions | cre8magic",
    "keywords": "Interface IHasSettingsExceptions Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IHasSettingsExceptions Properties Exceptions List<Exception> Exceptions { get; } Property Value List<Exception> HasExceptions bool HasExceptions { get; } Property Value bool"
  },
  "api/ToSic.Cre8magic.Client.Settings.Json.JsonConverterBase-1.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.Json.JsonConverterBase-1.html",
    "title": "Class JsonConverterBase<T> | cre8magic",
    "keywords": "Class JsonConverterBase<T> Namespace ToSic.Cre8magic.Client.Settings.Json Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class JsonConverterBase<T> : JsonConverter<T> Type Parameters T Inheritance object JsonConverter JsonConverter<T> JsonConverterBase<T> Derived DesignSettingsJsonConverter<T> PairOnOffJsonConverter ThemePartJsonConverter Inherited Members JsonConverter<T>.CanConvert(Type) JsonConverter<T>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.Write(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.WriteAsPropertyName(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.HandleNull JsonConverter<T>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonConverterBase(ILogger) protected JsonConverterBase(ILogger logger) Parameters logger ILogger Properties Logger public ILogger Logger { get; } Property Value ILogger Methods ConvertObject(JsonObject, JsonSerializerOptions) protected T? ConvertObject(JsonObject jsonObject, JsonSerializerOptions options) Parameters jsonObject JsonObject options JsonSerializerOptions Returns T GetOptionsWithoutThisConverter(JsonSerializerOptions) protected JsonSerializerOptions GetOptionsWithoutThisConverter(JsonSerializerOptions options) Parameters options JsonSerializerOptions Returns JsonSerializerOptions"
  },
  "api/ToSic.Cre8magic.Client.Settings.Json.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.Json.html",
    "title": "Namespace ToSic.Cre8magic.Client.Settings.Json | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Settings.Json Classes JsonConverterBase<T>"
  },
  "api/ToSic.Cre8magic.Client.Settings.MagicPackageSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.MagicPackageSettings.html",
    "title": "Class MagicPackageSettings | cre8magic",
    "keywords": "Class MagicPackageSettings Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Settings for a Theme Package. Contains semi-constants like location of assets and configuration for various parts like CSS. public class MagicPackageSettings Inheritance object MagicPackageSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Defaults All kinds of settings for the layout, how it should be etc. Should usually only serve as backup in case the JSON fails. public MagicSettingsCatalog? Defaults { get; set; } Property Value MagicSettingsCatalog PackageName public string PackageName { get; set; } Property Value string SettingsJsonFile public string SettingsJsonFile { get; set; } Property Value string Url public string Url { get; set; } Property Value string WwwRoot public string WwwRoot { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Settings.MagicSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.MagicSettings.html",
    "title": "Class MagicSettings | cre8magic",
    "keywords": "Class MagicSettings Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll The current settings of a page. public class MagicSettings : IHasSettingsExceptions Inheritance object MagicSettings Implements IHasSettingsExceptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Analytics public MagicAnalyticsSettings Analytics { get; } Property Value MagicAnalyticsSettings Debug public MagicDebugState Debug { get; } Property Value MagicDebugState DebugSources public Dictionary<string, string> DebugSources { get; } Property Value Dictionary<string, string> Exceptions public List<Exception> Exceptions { get; } Property Value List<Exception> Languages public MagicLanguagesSettings Languages { get; } Property Value MagicLanguagesSettings MagicContext public string MagicContext { get; set; } Property Value string Name public string Name { get; } Property Value string Service [JsonIgnore] public MagicSettingsService Service { get; } Property Value MagicSettingsService Theme public MagicThemeSettings Theme { get; } Property Value MagicThemeSettings ThemeDesign public MagicThemeDesignSettings ThemeDesign { get; } Property Value MagicThemeDesignSettings Methods DebugState(object?) public MagicDebugState DebugState(object? target) Parameters target object Returns MagicDebugState Show(string) Determine if we should show a specific part public bool Show(string name) Parameters name string Returns bool"
  },
  "api/ToSic.Cre8magic.Client.Settings.MagicSettingsCatalog.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.MagicSettingsCatalog.html",
    "title": "Class MagicSettingsCatalog | cre8magic",
    "keywords": "Class MagicSettingsCatalog Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll This is a catalog of all kinds of configurations. It serves as a kind of database to manage all configurations, which will usually be retrieved using a name. public class MagicSettingsCatalog Inheritance object MagicSettingsCatalog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SourceDefault public const string SourceDefault = \"Unknown\" Field Value string Properties Analytics public NamedSettings<MagicAnalyticsSettings> Analytics { get; set; } Property Value NamedSettings<MagicAnalyticsSettings> Containers public NamedSettings<MagicContainerSettings> Containers { get; set; } Property Value NamedSettings<MagicContainerSettings> Debug Master debug settings - would override other debugs public MagicDebugSettings? Debug { get; set; } Property Value MagicDebugSettings Languages public NamedSettings<MagicLanguagesSettings> Languages { get; set; } Property Value NamedSettings<MagicLanguagesSettings> MenuDesigns Design definitions of the menu public NamedSettings<NamedSettings<MagicMenuDesign>> MenuDesigns { get; set; } Property Value NamedSettings<NamedSettings<MagicMenuDesign>> Menus The menu definitions public NamedSettings<MagicMenuSettings> Menus { get; set; } Property Value NamedSettings<MagicMenuSettings> Source Source of these settings / where they came from, to ensure that we can see in debug where a value was picked up from public string Source { get; set; } Property Value string ThemeDesigns public NamedSettings<MagicThemeDesignSettings> ThemeDesigns { get; set; } Property Value NamedSettings<MagicThemeDesignSettings> Themes public NamedSettings<MagicThemeSettings> Themes { get; set; } Property Value NamedSettings<MagicThemeSettings> Version Version number when loading from JSON to verify it's what we expect public float Version { get; set; } Property Value float"
  },
  "api/ToSic.Cre8magic.Client.Settings.NamedSettings-1.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.NamedSettings-1.html",
    "title": "Class NamedSettings<T> | cre8magic",
    "keywords": "Class NamedSettings<T> Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Case insensitive dictionary managing a list of named settings public class NamedSettings<T> : Dictionary<string, T>, IDictionary<string, T>, ICollection<KeyValuePair<string, T>>, IReadOnlyDictionary<string, T>, IReadOnlyCollection<KeyValuePair<string, T>>, IEnumerable<KeyValuePair<string, T>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable where T : class Type Parameters T Inheritance object Dictionary<string, T> NamedSettings<T> Implements IDictionary<string, T> ICollection<KeyValuePair<string, T>> IReadOnlyDictionary<string, T> IReadOnlyCollection<KeyValuePair<string, T>> IEnumerable<KeyValuePair<string, T>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members Dictionary<string, T>.Add(string, T) Dictionary<string, T>.Clear() Dictionary<string, T>.ContainsKey(string) Dictionary<string, T>.ContainsValue(T) Dictionary<string, T>.EnsureCapacity(int) Dictionary<string, T>.GetEnumerator() Dictionary<string, T>.OnDeserialization(object) Dictionary<string, T>.Remove(string) Dictionary<string, T>.Remove(string, out T) Dictionary<string, T>.TrimExcess() Dictionary<string, T>.TrimExcess(int) Dictionary<string, T>.TryAdd(string, T) Dictionary<string, T>.TryGetValue(string, out T) Dictionary<string, T>.Comparer Dictionary<string, T>.Count Dictionary<string, T>.this[string] Dictionary<string, T>.Keys Dictionary<string, T>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NamedSettings() public NamedSettings() NamedSettings(IDictionary<string, T>) public NamedSettings(IDictionary<string, T> dic) Parameters dic IDictionary<string, T> NamedSettings(IEnumerable<KeyValuePair<string, T>>) public NamedSettings(IEnumerable<KeyValuePair<string, T>> dic) Parameters dic IEnumerable<KeyValuePair<string, T>> Methods GetInvariant(string) public T? GetInvariant(string key) Parameters key string Returns T"
  },
  "api/ToSic.Cre8magic.Client.Settings.PairOnOff.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.PairOnOff.html",
    "title": "Class PairOnOff | cre8magic",
    "keywords": "Class PairOnOff Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class PairOnOff Inheritance object PairOnOff Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PairOnOffExtensions.Get(PairOnOff?, bool?) Constructors PairOnOff() Empty constructor for JSON serialization public PairOnOff() PairOnOff(string?, string?) public PairOnOff(string? on, string? off = null) Parameters on string off string Properties Off public string? Off { get; set; } Property Value string On public string? On { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Settings.PairOnOffExtensions.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.PairOnOffExtensions.html",
    "title": "Class PairOnOffExtensions | cre8magic",
    "keywords": "Class PairOnOffExtensions Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class PairOnOffExtensions Inheritance object PairOnOffExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Get(PairOnOff?, bool?) Null-safe pair access public static string? Get(this PairOnOff? pair, bool? isOn) Parameters pair PairOnOff isOn bool? Returns string"
  },
  "api/ToSic.Cre8magic.Client.Settings.PairOnOffJsonConverter.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.PairOnOffJsonConverter.html",
    "title": "Class PairOnOffJsonConverter | cre8magic",
    "keywords": "Class PairOnOffJsonConverter Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Important: NEVER use this on a public class PairOnOffJsonConverter : JsonConverterBase<PairOnOff> Inheritance object JsonConverter JsonConverter<PairOnOff> JsonConverterBase<PairOnOff> PairOnOffJsonConverter Inherited Members JsonConverterBase<PairOnOff>.Logger JsonConverterBase<PairOnOff>.GetOptionsWithoutThisConverter(JsonSerializerOptions) JsonConverterBase<PairOnOff>.ConvertObject(JsonObject, JsonSerializerOptions) JsonConverter<PairOnOff>.CanConvert(Type) JsonConverter<PairOnOff>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<PairOnOff>.WriteAsPropertyName(Utf8JsonWriter, PairOnOff, JsonSerializerOptions) JsonConverter<PairOnOff>.HandleNull JsonConverter<PairOnOff>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNew(ILogger) public static PairOnOffJsonConverter GetNew(ILogger logger) Parameters logger ILogger Returns PairOnOffJsonConverter Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type PairOnOff. public override PairOnOff? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns PairOnOff The converted value. Write(Utf8JsonWriter, PairOnOff?, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, PairOnOff? pair, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. pair PairOnOff options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ToSic.Cre8magic.Client.Settings.SettingsException.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.SettingsException.html",
    "title": "Class SettingsException | cre8magic",
    "keywords": "Class SettingsException Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public class SettingsException : Exception, ISerializable Inheritance object Exception SettingsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SettingsException(string) public SettingsException(string message) Parameters message string"
  },
  "api/ToSic.Cre8magic.Client.Settings.SettingsWithInherit.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.SettingsWithInherit.html",
    "title": "Class SettingsWithInherit | cre8magic",
    "keywords": "Class SettingsWithInherit Namespace ToSic.Cre8magic.Client.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class SettingsWithInherit Inheritance object SettingsWithInherit Derived MagicAnalyticsSettings MagicBreadcrumbSettings MagicContainerSettings MagicLanguagesSettings MagicMenuSettings MagicThemeDesignSettings MagicThemeSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Inherits Determines if it inherits another property [JsonPropertyName(\"@inherits\")] public string? Inherits { get; set; } Property Value string"
  },
  "api/ToSic.Cre8magic.Client.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Settings Namespaces ToSic.Cre8magic.Client.Settings.Debug ToSic.Cre8magic.Client.Settings.Json Classes DesignSetting Anything that can define what classes it should have. This is usually the base class for something that can also have more information. DesignSettingsJsonConverter<T> Important: NEVER use this on a MagicPackageSettings Settings for a Theme Package. Contains semi-constants like location of assets and configuration for various parts like CSS. MagicSettings The current settings of a page. MagicSettingsCatalog This is a catalog of all kinds of configurations. It serves as a kind of database to manage all configurations, which will usually be retrieved using a name. NamedSettings<T> Case insensitive dictionary managing a list of named settings PairOnOff PairOnOffExtensions PairOnOffJsonConverter Important: NEVER use this on a SettingsException SettingsWithInherit Interfaces IHasMagicSettings IHasSettingsExceptions"
  },
  "api/ToSic.Cre8magic.Client.StringExtensions.html": {
    "href": "api/ToSic.Cre8magic.Client.StringExtensions.html",
    "title": "Class StringExtensions | cre8magic",
    "keywords": "Class StringExtensions Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class StringExtensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Client.Themes.MagicContextAndSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.MagicContextAndSettings.html",
    "title": "Class MagicContextAndSettings | cre8magic",
    "keywords": "Class MagicContextAndSettings Namespace ToSic.Cre8magic.Client.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicContextAndSettings : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase MagicContextAndSettings Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChildContent [Parameter] public RenderFragment? ChildContent { get; set; } Property Value RenderFragment Settings [Parameter] [EditorRequired] public MagicSettings Settings { get; set; } Property Value MagicSettings ThemeJs [Inject] protected IMagicThemeJsService? ThemeJs { get; set; } Property Value IMagicThemeJsService Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnAfterRenderAsync(bool) Method invoked after each time the component has been rendered interactively and the UI has finished updating (for example, after elements have been added to the browser DOM). Any Microsoft.AspNetCore.Components.ElementReference fields will be populated by the time this runs. This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated. Note that the component does not automatically re-render after the completion of any returned System.Threading.Tasks.Task, because that would cause an infinite render loop. protected override Task OnAfterRenderAsync(bool firstRender) Parameters firstRender bool Set to true if this is the first time OnAfterRender(bool) has been invoked on this component instance; otherwise false. Returns Task A System.Threading.Tasks.Task representing any asynchronous operation. Remarks The OnAfterRender(bool) and Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) lifecycle methods are useful for performing interop, or interacting with values received from @ref. Use the firstRender parameter to ensure that initialization work is only performed once."
  },
  "api/ToSic.Cre8magic.Client.Themes.MagicTheme.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.MagicTheme.html",
    "title": "Class MagicTheme | cre8magic",
    "keywords": "Class MagicTheme Namespace ToSic.Cre8magic.Client.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll Base class for our themes. It's responsible for Some basic properties such as Name, BodyClasses etc. which each theme can configure Adding special classes to the body tag so that the CSS can best optimize for each scenario public abstract class MagicTheme : ThemeBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase MagicTheme Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Thumbnail ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The base class must be abstract, so that Oqtane doesn't see it as a real them. The config-properties must be abstract, so the inheriting files are forced to set them. Fields PaneNameHeader public const string PaneNameHeader = \"Header\" Field Value string Properties Layout The layout name which is used to lookup configurations. The inheriting file is required to specify it. public abstract string Layout { get; } Property Value string MagicAnalytics [Inject] public MagicAnalyticsService? MagicAnalytics { get; set; } Property Value MagicAnalyticsService MagicClasses Sets additional body classes - usually to activate CSS variations for this theme protected abstract string MagicClasses { get; } Property Value string MagicComponents Option to inject dynamic components - mainly for testing inspired by http://www.binaryintellect.net/articles/a92dea29-3218-4d1c-a132-9671b518d1f4.aspx protected List<MagicDynamicComponent> MagicComponents { get; } Property Value List<MagicDynamicComponent> MagicSettingsService [Inject] protected MagicSettingsService MagicSettingsService { get; set; } Property Value MagicSettingsService Name Name to show in the Theme-picker. Must be set by each inheriting theme, which is why it's marked abstract to enforce this. public override abstract string Name { get; } Property Value string Panes Force the user to overwrite panes. public override abstract string Panes { get; } Property Value string Settings The settings of this layout, as loaded from the ThemePackageSettings + JSON public MagicSettings? Settings { get; set; } Property Value MagicSettings ThemePackageSettings This contains the default settings which must be used in this theme. Any inheriting class must specify what it will be. public abstract MagicPackageSettings ThemePackageSettings { get; } Property Value MagicPackageSettings Methods Classes(string) public string? Classes(string target) Parameters target string Returns string Id(string) public string? Id(string name) Parameters name string Returns string OnAfterRenderAsync(bool) Method invoked after each time the component has been rendered interactively and the UI has finished updating (for example, after elements have been added to the browser DOM). Any Microsoft.AspNetCore.Components.ElementReference fields will be populated by the time this runs. This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated. Note that the component does not automatically re-render after the completion of any returned System.Threading.Tasks.Task, because that would cause an infinite render loop. protected override Task OnAfterRenderAsync(bool firstRender) Parameters firstRender bool Set to true if this is the first time OnAfterRender(bool) has been invoked on this component instance; otherwise false. Returns Task A System.Threading.Tasks.Task representing any asynchronous operation. Remarks The OnAfterRender(bool) and Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) lifecycle methods are useful for performing interop, or interacting with values received from @ref. Use the firstRender parameter to ensure that initialization work is only performed once. OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A System.Threading.Tasks.Task representing any asynchronous operation. PaneClasses(string) Special classes for divs surrounding panes pane, especially to indicate when it's empty protected string? PaneClasses(string paneName) Parameters paneName string Returns string ThemePath() Make a nicer theme path without the \".Client\" public string ThemePath() Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Themes.MagicThemeDebug.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.MagicThemeDebug.html",
    "title": "Class MagicThemeDebug | cre8magic",
    "keywords": "Class MagicThemeDebug Namespace ToSic.Cre8magic.Client.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicThemeDebug : MagicControl, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IHasMagicSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControl MagicThemeDebug Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IHasMagicSettings IMagicDesigner Inherited Members MagicControl.Settings MagicControl.PageFactory MagicControl.UserIsAdmin MagicControl.UserIsEditor MagicControl.UserIsLoggedIn MagicControl.Designer MagicControl.Classes(string) MagicControl.ClassesOrDefault(string, string) MagicControl.Value(string) MagicControl.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemeDesignSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemeDesignSettings.html",
    "title": "Class MagicThemeDesignSettings | cre8magic",
    "keywords": "Class MagicThemeDesignSettings Namespace ToSic.Cre8magic.Client.Themes.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Constants and helpers related to creating Css and Css Classes. If you change these, you must also update the SCSS files. public record MagicThemeDesignSettings : SettingsWithInherit, IEquatable<SettingsWithInherit>, ICanClone<MagicThemeDesignSettings>, IEquatable<MagicThemeDesignSettings> Inheritance object SettingsWithInherit MagicThemeDesignSettings Implements IEquatable<SettingsWithInherit> ICanClone<MagicThemeDesignSettings> IEquatable<MagicThemeDesignSettings> Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicThemeDesignSettings() public MagicThemeDesignSettings() MagicThemeDesignSettings(MagicThemeDesignSettings?, MagicThemeDesignSettings?) public MagicThemeDesignSettings(MagicThemeDesignSettings? priority, MagicThemeDesignSettings? fallback = null) Parameters priority MagicThemeDesignSettings fallback MagicThemeDesignSettings Properties Custom public NamedSettings<DesignSetting> Custom { get; init; } Property Value NamedSettings<DesignSetting> MagicContext public string[] MagicContext { get; init; } Property Value string[] MagicContextTagId public string? MagicContextTagId { get; init; } Property Value string PageIsHome public PairOnOff? PageIsHome { get; init; } Property Value PairOnOff PaneIsEmpty public PairOnOff? PaneIsEmpty { get; init; } Property Value PairOnOff Methods CloneWith(MagicThemeDesignSettings?, bool) public MagicThemeDesignSettings CloneWith(MagicThemeDesignSettings? priority, bool forceCopy = false) Parameters priority MagicThemeDesignSettings forceCopy bool Returns MagicThemeDesignSettings"
  },
  "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemePartSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemePartSettings.html",
    "title": "Class MagicThemePartSettings | cre8magic",
    "keywords": "Class MagicThemePartSettings Namespace ToSic.Cre8magic.Client.Themes.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicThemePartSettings : ICanClone<MagicThemePartSettings>, IEquatable<MagicThemePartSettings> Inheritance object MagicThemePartSettings Implements ICanClone<MagicThemePartSettings> IEquatable<MagicThemePartSettings> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicThemePartSettings() For json public MagicThemePartSettings() MagicThemePartSettings(bool) public MagicThemePartSettings(bool show) Parameters show bool MagicThemePartSettings(string) public MagicThemePartSettings(string name) Parameters name string MagicThemePartSettings(MagicThemePartSettings?, MagicThemePartSettings?) public MagicThemePartSettings(MagicThemePartSettings? priority, MagicThemePartSettings? fallback = null) Parameters priority MagicThemePartSettings fallback MagicThemePartSettings Properties Configuration public string? Configuration { get; init; } Property Value string Design public string? Design { get; init; } Property Value string Show public bool? Show { get; init; } Property Value bool? Methods CloneWith(MagicThemePartSettings?, bool) public MagicThemePartSettings CloneWith(MagicThemePartSettings? priority, bool forceCopy = false) Parameters priority MagicThemePartSettings forceCopy bool Returns MagicThemePartSettings"
  },
  "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemeSettings.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.Settings.MagicThemeSettings.html",
    "title": "Class MagicThemeSettings | cre8magic",
    "keywords": "Class MagicThemeSettings Namespace ToSic.Cre8magic.Client.Themes.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicThemeSettings : SettingsWithInherit, IEquatable<SettingsWithInherit>, ICanClone<MagicThemeSettings>, IEquatable<MagicThemeSettings> Inheritance object SettingsWithInherit MagicThemeSettings Implements IEquatable<SettingsWithInherit> ICanClone<MagicThemeSettings> IEquatable<MagicThemeSettings> Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicThemeSettings() public MagicThemeSettings() MagicThemeSettings(MagicThemeSettings?, MagicThemeSettings?) public MagicThemeSettings(MagicThemeSettings? priority, MagicThemeSettings? fallback = null) Parameters priority MagicThemeSettings fallback MagicThemeSettings Properties Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; init; } Property Value MagicDebugSettings Design public string? Design { get; init; } Property Value string LanguagesMin public int LanguagesMin { get; init; } Property Value int Logo The logo to show, should be located in the assets subfolder public string? Logo { get; set; } Property Value string MagicContextInBody public bool? MagicContextInBody { get; init; } Property Value bool? Parts The parts of this theme, like breadcrumb and various menu configs public NamedSettings<MagicThemePartSettings> Parts { get; init; } Property Value NamedSettings<MagicThemePartSettings> Methods CloneWith(MagicThemeSettings?, bool) public MagicThemeSettings CloneWith(MagicThemeSettings? priority, bool forceCopy = false) Parameters priority MagicThemeSettings forceCopy bool Returns MagicThemeSettings"
  },
  "api/ToSic.Cre8magic.Client.Themes.Settings.ThemePartJsonConverter.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.Settings.ThemePartJsonConverter.html",
    "title": "Class ThemePartJsonConverter | cre8magic",
    "keywords": "Class ThemePartJsonConverter Namespace ToSic.Cre8magic.Client.Themes.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Important: NEVER use this on a public class ThemePartJsonConverter : JsonConverterBase<MagicThemePartSettings> Inheritance object JsonConverter JsonConverter<MagicThemePartSettings> JsonConverterBase<MagicThemePartSettings> ThemePartJsonConverter Inherited Members JsonConverterBase<MagicThemePartSettings>.Logger JsonConverterBase<MagicThemePartSettings>.GetOptionsWithoutThisConverter(JsonSerializerOptions) JsonConverterBase<MagicThemePartSettings>.ConvertObject(JsonObject, JsonSerializerOptions) JsonConverter<MagicThemePartSettings>.CanConvert(Type) JsonConverter<MagicThemePartSettings>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<MagicThemePartSettings>.WriteAsPropertyName(Utf8JsonWriter, MagicThemePartSettings, JsonSerializerOptions) JsonConverter<MagicThemePartSettings>.HandleNull JsonConverter<MagicThemePartSettings>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNew(ILogger) public static ThemePartJsonConverter GetNew(ILogger logger) Parameters logger ILogger Returns ThemePartJsonConverter Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type MagicThemePartSettings. public override MagicThemePartSettings? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns MagicThemePartSettings The converted value. Write(Utf8JsonWriter, MagicThemePartSettings?, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, MagicThemePartSettings? part, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. part MagicThemePartSettings options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ToSic.Cre8magic.Client.Themes.Settings.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Client.Themes.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Themes.Settings Classes MagicThemeDesignSettings Constants and helpers related to creating Css and Css Classes. If you change these, you must also update the SCSS files. MagicThemePartSettings MagicThemeSettings ThemePartJsonConverter Important: NEVER use this on a"
  },
  "api/ToSic.Cre8magic.Client.Themes.html": {
    "href": "api/ToSic.Cre8magic.Client.Themes.html",
    "title": "Namespace ToSic.Cre8magic.Client.Themes | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Themes Namespaces ToSic.Cre8magic.Client.Themes.Settings Classes MagicContextAndSettings MagicTheme Base class for our themes. It's responsible for Some basic properties such as Name, BodyClasses etc. which each theme can configure Adding special classes to the body tag so that the CSS can best optimize for each scenario MagicThemeDebug"
  },
  "api/ToSic.Cre8magic.Client.Tokens.ThemeTokens.html": {
    "href": "api/ToSic.Cre8magic.Client.Tokens.ThemeTokens.html",
    "title": "Class ThemeTokens | cre8magic",
    "keywords": "Class ThemeTokens Namespace ToSic.Cre8magic.Client.Tokens Assembly ToSic.Cre8magic.Client.Oqtane.dll public class ThemeTokens Inheritance object ThemeTokens Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ThemeTokens(MagicPackageSettings) public ThemeTokens(MagicPackageSettings themeSettings) Parameters themeSettings MagicPackageSettings Fields NameIdConstant public const string NameIdConstant = \"ThemeTokens\" Field Value string Properties NameId public string NameId { get; } Property Value string Methods Parse(string) public virtual string Parse(string value) Parameters value string Returns string"
  },
  "api/ToSic.Cre8magic.Client.Tokens.html": {
    "href": "api/ToSic.Cre8magic.Client.Tokens.html",
    "title": "Namespace ToSic.Cre8magic.Client.Tokens | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client.Tokens Classes ThemeTokens"
  },
  "api/ToSic.Cre8magic.Client._Imports.html": {
    "href": "api/ToSic.Cre8magic.Client._Imports.html",
    "title": "Class _Imports | cre8magic",
    "keywords": "Class _Imports Namespace ToSic.Cre8magic.Client Assembly ToSic.Cre8magic.Client.Oqtane.dll public class _Imports : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase _Imports Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Client.html": {
    "href": "api/ToSic.Cre8magic.Client.html",
    "title": "Namespace ToSic.Cre8magic.Client | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Client Namespaces ToSic.Cre8magic.Client.Containers ToSic.Cre8magic.Client.Controls ToSic.Cre8magic.Client.Menus ToSic.Cre8magic.Client.Services ToSic.Cre8magic.Client.Themes.Settings Classes MagicConstants MagicTokens"
  },
  "api/ToSic.Cre8magic.Components.Internal.MagicDynamicComponent.html": {
    "href": "api/ToSic.Cre8magic.Components.Internal.MagicDynamicComponent.html",
    "title": "Class MagicDynamicComponent | cre8magic",
    "keywords": "Class MagicDynamicComponent Namespace ToSic.Cre8magic.Components.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicDynamicComponent Inheritance object MagicDynamicComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicDynamicComponent(string, Type, Dictionary<string, object>?) public MagicDynamicComponent(string group, Type type, Dictionary<string, object>? parameters) Parameters group string type Type parameters Dictionary<string, object> Properties Group public string Group { get; set; } Property Value string Parameters public Dictionary<string, object>? Parameters { get; set; } Property Value Dictionary<string, object> Type public Type Type { get; set; } Property Value Type"
  },
  "api/ToSic.Cre8magic.Components.Internal.MagicShowComponents.html": {
    "href": "api/ToSic.Cre8magic.Components.Internal.MagicShowComponents.html",
    "title": "Class MagicShowComponents | cre8magic",
    "keywords": "Class MagicShowComponents Namespace ToSic.Cre8magic.Components.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicShowComponents : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase MagicShowComponents Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) ComponentBase.RendererInfo ComponentBase.Assets ComponentBase.AssignedRenderMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Components [Parameter] public List<MagicDynamicComponent>? Components { get; set; } Property Value List<MagicDynamicComponent> Group [Parameter] public string? Group { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Components.Internal.html": {
    "href": "api/ToSic.Cre8magic.Components.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Components.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Components.Internal Classes MagicDynamicComponent MagicShowComponents"
  },
  "api/ToSic.Cre8magic.Containers.IMagicContainerKit.html": {
    "href": "api/ToSic.Cre8magic.Containers.IMagicContainerKit.html",
    "title": "Interface IMagicContainerKit | cre8magic",
    "keywords": "Interface IMagicContainerKit Namespace ToSic.Cre8magic.Containers Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicContainerKit Properties Designer MagicContainerDesigner Designer { get; init; } Property Value MagicContainerDesigner IsForAdminModule Modules are treated as admin modules (and must use the admin container) if they are marked as such, or come from the Oqtane ....Admin... type bool IsForAdminModule { get; } Property Value bool"
  },
  "api/ToSic.Cre8magic.Containers.MagicContainerDesignSettings.html": {
    "href": "api/ToSic.Cre8magic.Containers.MagicContainerDesignSettings.html",
    "title": "Class MagicContainerDesignSettings | cre8magic",
    "keywords": "Class MagicContainerDesignSettings Namespace ToSic.Cre8magic.Containers Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicContainerDesignSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicContainerDesignSettings Inherited Members SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Properties Parts [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicDesignSettingsPart>))] public Dictionary<string, MagicDesignSettingsPart> Parts { get; init; } Property Value Dictionary<string, MagicDesignSettingsPart>"
  },
  "api/ToSic.Cre8magic.Containers.MagicContainerDesigner.html": {
    "href": "api/ToSic.Cre8magic.Containers.MagicContainerDesigner.html",
    "title": "Class MagicContainerDesigner | cre8magic",
    "keywords": "Class MagicContainerDesigner Namespace ToSic.Cre8magic.Containers Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicContainerDesigner : MagicDesignerBase, IMagicDesigner Inheritance object MagicDesignerBase MagicContainerDesigner Implements IMagicDesigner Inherited Members MagicDesignerBase.DesignSettings MagicDesignerBase.GetSettings(string) MagicDesignerBase.ParseTokens MagicDesignerBase.ProcessTokens(string) MagicDesignerBase.Value(string) MagicDesignerBase.Id(string) Methods Classes(string) public override string? Classes(string tag) Parameters tag string Returns string"
  },
  "api/ToSic.Cre8magic.Containers.MagicContainerSettings.html": {
    "href": "api/ToSic.Cre8magic.Containers.MagicContainerSettings.html",
    "title": "Class MagicContainerSettings | cre8magic",
    "keywords": "Class MagicContainerSettings Namespace ToSic.Cre8magic.Containers Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicContainerSettings : MagicSettingsBase Inheritance object SettingsWithInherit MagicSettingsBase MagicContainerSettings Inherited Members MagicSettingsBase.PageState MagicSettingsBase.PartName MagicSettingsBase.SettingsName MagicSettingsBase.DesignName MagicSettingsBase.Debug SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Extension Methods MagicSettingsExtensions.RefillLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.Refill<TSettings>(TSettings?, PageState) MagicSettingsExtensions.Refill<TSettings, TWith>(TSettings?, TWith?) MagicSettingsExtensions.WithLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.With<TSettings>(TSettings?, PageState) MagicSettingsExtensions.With<TSettings, TWith>(TSettings?, TWith?) MagicContainerSettingsExtensions.With(MagicContainerSettings?, Module) MagicContainerSettingsExtensions.With(MagicContainerSettings?, PageState, Module) Properties DesignSettings [JsonIgnore] public MagicContainerDesignSettings? DesignSettings { get; init; } Property Value MagicContainerDesignSettings ModuleState public Module? ModuleState { get; init; } Property Value Module"
  },
  "api/ToSic.Cre8magic.Containers.MagicContainerSettingsExtensions.html": {
    "href": "api/ToSic.Cre8magic.Containers.MagicContainerSettingsExtensions.html",
    "title": "Class MagicContainerSettingsExtensions | cre8magic",
    "keywords": "Class MagicContainerSettingsExtensions Namespace ToSic.Cre8magic.Containers Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class MagicContainerSettingsExtensions Inheritance object MagicContainerSettingsExtensions Methods With(MagicContainerSettings?, Module) public static MagicContainerSettings With(this MagicContainerSettings? settings, Module moduleState) Parameters settings MagicContainerSettings moduleState Module Returns MagicContainerSettings With(MagicContainerSettings?, PageState, Module) public static MagicContainerSettings With(this MagicContainerSettings? settings, PageState pageState, Module moduleState) Parameters settings MagicContainerSettings pageState PageState moduleState Module Returns MagicContainerSettings"
  },
  "api/ToSic.Cre8magic.Containers.html": {
    "href": "api/ToSic.Cre8magic.Containers.html",
    "title": "Namespace ToSic.Cre8magic.Containers | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Containers Classes MagicContainerDesignSettings MagicContainerDesigner MagicContainerSettings MagicContainerSettingsExtensions Interfaces IMagicContainerKit"
  },
  "api/ToSic.Cre8magic.Controls.MagicDebug.html": {
    "href": "api/ToSic.Cre8magic.Controls.MagicDebug.html",
    "title": "Class MagicDebug | cre8magic",
    "keywords": "Class MagicDebug Namespace ToSic.Cre8magic.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicDebug : MagicControlBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControlBase MagicDebug Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IMagicDesigner Inherited Members MagicControlBase.AllSettings MagicControlBase.UserIsAdmin MagicControlBase.UserIsEditor MagicControlBase.UserIsLoggedIn MagicControlBase.Designer MagicControlBase.Classes(string) MagicControlBase.ClassesOrDefault(string, string) MagicControlBase.Value(string) MagicControlBase.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Button [Parameter] public RenderFragment? Button { get; set; } Property Value RenderFragment Content [Parameter] public RenderFragment? Content { get; set; } Property Value RenderFragment ContentMore [Parameter] public RenderFragment? ContentMore { get; set; } Property Value RenderFragment More [Parameter] public Dictionary<string, object>? More { get; set; } Property Value Dictionary<string, object> Show [Parameter] public bool? Show { get; set; } Property Value bool? Target [Parameter] [EditorRequired] public object? Target { get; set; } Property Value object Title [Parameter] public string? Title { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Controls.MagicDynamicComponents.html": {
    "href": "api/ToSic.Cre8magic.Controls.MagicDynamicComponents.html",
    "title": "Class MagicDynamicComponents | cre8magic",
    "keywords": "Class MagicDynamicComponents Namespace ToSic.Cre8magic.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicDynamicComponents : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase MagicDynamicComponents Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Components [Parameter] public List<MagicDynamicComponent>? Components { get; set; } Property Value List<MagicDynamicComponent> Group [Parameter] public string? Group { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Controls.MagicExceptions.html": {
    "href": "api/ToSic.Cre8magic.Controls.MagicExceptions.html",
    "title": "Class MagicExceptions | cre8magic",
    "keywords": "Class MagicExceptions Namespace ToSic.Cre8magic.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicExceptions : MagicControlBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControlBase MagicExceptions Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IMagicDesigner Inherited Members MagicControlBase.AllSettings MagicControlBase.UserIsAdmin MagicControlBase.UserIsEditor MagicControlBase.UserIsLoggedIn MagicControlBase.Designer MagicControlBase.Classes(string) MagicControlBase.ClassesOrDefault(string, string) MagicControlBase.Value(string) MagicControlBase.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Controls.MagicOqtaneControlPanel.html": {
    "href": "api/ToSic.Cre8magic.Controls.MagicOqtaneControlPanel.html",
    "title": "Class MagicOqtaneControlPanel | cre8magic",
    "keywords": "Class MagicOqtaneControlPanel Namespace ToSic.Cre8magic.Controls Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicOqtaneControlPanel : MagicControlBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControlBase MagicOqtaneControlPanel Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IMagicDesigner Inherited Members MagicControlBase.AllSettings MagicControlBase.UserIsAdmin MagicControlBase.UserIsEditor MagicControlBase.UserIsLoggedIn MagicControlBase.Designer MagicControlBase.Classes(string) MagicControlBase.ClassesOrDefault(string, string) MagicControlBase.Value(string) MagicControlBase.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Controls.html": {
    "href": "api/ToSic.Cre8magic.Controls.html",
    "title": "Namespace ToSic.Cre8magic.Controls | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Controls Classes MagicDebug MagicDynamicComponents MagicExceptions MagicOqtaneControlPanel"
  },
  "api/ToSic.Cre8magic.Designers.IMagicDesigner.html": {
    "href": "api/ToSic.Cre8magic.Designers.IMagicDesigner.html",
    "title": "Interface IMagicDesigner | cre8magic",
    "keywords": "Interface IMagicDesigner Namespace ToSic.Cre8magic.Designers Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicDesigner Methods Classes(string) string? Classes(string target) Parameters target string Returns string Id(string) string? Id(string target) Parameters target string Returns string Value(string) string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Designers.MagicDesignerBase.html": {
    "href": "api/ToSic.Cre8magic.Designers.MagicDesignerBase.html",
    "title": "Class MagicDesignerBase | cre8magic",
    "keywords": "Class MagicDesignerBase Namespace ToSic.Cre8magic.Designers Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicDesignerBase : IMagicDesigner Inheritance object MagicDesignerBase Implements IMagicDesigner Derived MagicContainerDesigner MagicLanguageDesigner Constructors MagicDesignerBase(TokenEngine, Dictionary<string, MagicDesignSettingsPart>) protected MagicDesignerBase(TokenEngine tokens, Dictionary<string, MagicDesignSettingsPart> designSettings) Parameters tokens TokenEngine designSettings Dictionary<string, MagicDesignSettingsPart> Properties DesignSettings protected Dictionary<string, MagicDesignSettingsPart> DesignSettings { get; } Property Value Dictionary<string, MagicDesignSettingsPart> ParseTokens protected virtual bool ParseTokens { get; } Property Value bool Methods Classes(string) public virtual string? Classes(string target) Parameters target string Returns string GetSettings(string) protected MagicDesignSettingsPart? GetSettings(string name) Parameters name string Returns MagicDesignSettingsPart Id(string) public string? Id(string name) Parameters name string Returns string ProcessTokens(string?) protected string? ProcessTokens(string? value) Parameters value string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Designers.html": {
    "href": "api/ToSic.Cre8magic.Designers.html",
    "title": "Namespace ToSic.Cre8magic.Designers | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Designers Classes MagicDesignerBase Interfaces IMagicDesigner"
  },
  "api/ToSic.Cre8magic.IMagicHat.html": {
    "href": "api/ToSic.Cre8magic.IMagicHat.html",
    "title": "Interface IMagicHat | cre8magic",
    "keywords": "Interface IMagicHat Namespace ToSic.Cre8magic Assembly ToSic.Cre8magic.Client.Oqtane.dll This is the magic hat from which you can pull just about anything you can think of. public interface IMagicHat Methods AnalyticsKit(MagicAnalyticsSettings?) Get a kit to work with analytics. IMagicAnalyticsKit AnalyticsKit(MagicAnalyticsSettings? settings = null) Parameters settings MagicAnalyticsSettings Optional settings. If not provided, will try to automatically find the settings as configured in the Theme. Returns IMagicAnalyticsKit BreadcrumbKit(MagicBreadcrumbSettings?) Get the Kit to work with a Breadcrumb. It will either use the provided settings, retrieve these from the global information or use a default settings. IMagicBreadcrumbKit BreadcrumbKit(MagicBreadcrumbSettings? settings = null) Parameters settings MagicBreadcrumbSettings Returns IMagicBreadcrumbKit ContainerKit(MagicContainerSettings) Get a kit to work with containers. IMagicContainerKit ContainerKit(MagicContainerSettings settings) Parameters settings MagicContainerSettings Required; must provide the ModuleState as a property and (if not specified in the Theme) also the PageState Returns IMagicContainerKit LanguageKitAsync(MagicLanguageSettings?) Get the kit to work with languages. Must be async, because it might need to load async data from Oqtane. Task<IMagicLanguageKit> LanguageKitAsync(MagicLanguageSettings? settings = null) Parameters settings MagicLanguageSettings Returns Task<IMagicLanguageKit> Link(PageState, MagicLinkSpecs) string Link(PageState pageState, MagicLinkSpecs linkSpecs) Parameters pageState PageState linkSpecs MagicLinkSpecs Returns string MenuKit(MagicMenuSettings?) IMagicMenuKit MenuKit(MagicMenuSettings? settings = null) Parameters settings MagicMenuSettings Returns IMagicMenuKit PageContextKit(MagicPageContextSettings?) IMagicPageContextKit PageContextKit(MagicPageContextSettings? settings = null) Parameters settings MagicPageContextSettings Returns IMagicPageContextKit ThemeKit(MagicThemeSettings?) IMagicThemeKit ThemeKit(MagicThemeSettings? settings = null) Parameters settings MagicThemeSettings Returns IMagicThemeKit UsePageState(PageState) IMagicHat UsePageState(PageState pageState) Parameters pageState PageState Returns IMagicHat UseSettingsCatalog(MagicSettingsCatalog) IMagicHat UseSettingsCatalog(MagicSettingsCatalog catalog) Parameters catalog MagicSettingsCatalog Returns IMagicHat UseSettingsPackage(MagicThemePackage, string?) IMagicHat UseSettingsPackage(MagicThemePackage themePackage, string? layoutName = null) Parameters themePackage MagicThemePackage layoutName string Returns IMagicHat UseSettingsProvider(Func<IMagicSettingsProvider, IMagicSettingsProvider>) IMagicHat UseSettingsProvider(Func<IMagicSettingsProvider, IMagicSettingsProvider> providerFunc) Parameters providerFunc Func<IMagicSettingsProvider, IMagicSettingsProvider> Returns IMagicHat User(PageState) MagicUser User(PageState pageState) Parameters pageState PageState Returns MagicUser UserLoginKit(MagicUserLoginSettings?) IMagicUserLoginKit UserLoginKit(MagicUserLoginSettings? settings = null) Parameters settings MagicUserLoginSettings Returns IMagicUserLoginKit"
  },
  "api/ToSic.Cre8magic.Internal.DebugExtensions.html": {
    "href": "api/ToSic.Cre8magic.Internal.DebugExtensions.html",
    "title": "Class DebugExtensions | cre8magic",
    "keywords": "Class DebugExtensions Namespace ToSic.Cre8magic.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll WIP class to provide certain debug information which is internal to external projects. public static class DebugExtensions Inheritance object DebugExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetExceptions(IMagicSettingsService) public static List<Exception> GetExceptions(this IMagicSettingsService settingsSvc) Parameters settingsSvc IMagicSettingsService Returns List<Exception> GetLogEntries(IMagicMenuKit) public static IEnumerable<object?>? GetLogEntries(this IMagicMenuKit menuKit) Parameters menuKit IMagicMenuKit Returns IEnumerable<object> GetThemeContext(IMagicSettingsService, PageState) public static MagicThemeContext GetThemeContext(this IMagicSettingsService settingsSvc, PageState pageState) Parameters settingsSvc IMagicSettingsService pageState PageState Returns MagicThemeContext"
  },
  "api/ToSic.Cre8magic.Internal.JsInterops.Internal.MagicThemeJsServiceTest.html": {
    "href": "api/ToSic.Cre8magic.Internal.JsInterops.Internal.MagicThemeJsServiceTest.html",
    "title": "Class MagicThemeJsServiceTest | cre8magic",
    "keywords": "Class MagicThemeJsServiceTest Namespace ToSic.Cre8magic.Internal.JsInterops.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Constants and helpers related to JS calls from the Theme to its own JS libraries public class MagicThemeJsServiceTest : MagicJsServiceBase, IMagicThemeJsService Inheritance object MagicJsServiceBase MagicThemeJsServiceTest Implements IMagicThemeJsService Inherited Members MagicJsServiceBase.JsRuntime MagicJsServiceBase.ModulePath MagicJsServiceBase.Log(params object[]) MagicJsServiceBase.Module() MagicJsServiceBase.InvokeAsync<TValue>(string) MagicJsServiceBase.InvokeAsync<TValue>(string, params object[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicThemeJsServiceTest(IJSRuntime) Constants and helpers related to JS calls from the Theme to its own JS libraries public MagicThemeJsServiceTest(IJSRuntime jsRuntime) Parameters jsRuntime IJSRuntime Methods SetBodyClasses(string) Set body classes (removes all previous classes in the process) public Task SetBodyClasses(string classes) Parameters classes string Returns Task TestFromTest() public Task<string> TestFromTest() Returns Task<string>"
  },
  "api/ToSic.Cre8magic.Internal.JsInterops.Internal.html": {
    "href": "api/ToSic.Cre8magic.Internal.JsInterops.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Internal.JsInterops.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Internal.JsInterops.Internal Classes MagicThemeJsServiceTest Constants and helpers related to JS calls from the Theme to its own JS libraries"
  },
  "api/ToSic.Cre8magic.Internal.JsInterops.MagicJsServiceBase.html": {
    "href": "api/ToSic.Cre8magic.Internal.JsInterops.MagicJsServiceBase.html",
    "title": "Class MagicJsServiceBase | cre8magic",
    "keywords": "Class MagicJsServiceBase Namespace ToSic.Cre8magic.Internal.JsInterops Assembly ToSic.Cre8magic.Client.Oqtane.dll Base for any JS Module Helper class public abstract class MagicJsServiceBase Inheritance object MagicJsServiceBase Derived MagicThemeJsServiceTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicJsServiceBase(IJSRuntime, string) Constructor protected MagicJsServiceBase(IJSRuntime jsRuntime, string modulePath) Parameters jsRuntime IJSRuntime JS Runtime of the control, usually available later, like in the OnAfterRenderAsync modulePath string Path to the javascript file, must be a JS6 Module Properties JsRuntime protected IJSRuntime JsRuntime { get; } Property Value IJSRuntime ModulePath protected string ModulePath { get; } Property Value string Methods InvokeAsync<TValue>(string) protected Task<TValue> InvokeAsync<TValue>(string identifier) Parameters identifier string Returns Task<TValue> Type Parameters TValue InvokeAsync<TValue>(string, params object[]) protected Task<TValue> InvokeAsync<TValue>(string identifier, params object[] args) Parameters identifier string args object[] Returns Task<TValue> Type Parameters TValue Log(params object[]) public Task Log(params object[] args) Parameters args object[] Returns Task Module() The JsObjectReference to the real module. Will need to load it on first access, so it's async. public Task<IJSObjectReference> Module() Returns Task<IJSObjectReference>"
  },
  "api/ToSic.Cre8magic.Internal.JsInterops.html": {
    "href": "api/ToSic.Cre8magic.Internal.JsInterops.html",
    "title": "Namespace ToSic.Cre8magic.Internal.JsInterops | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Internal.JsInterops Namespaces ToSic.Cre8magic.Internal.JsInterops.Internal Classes MagicJsServiceBase Base for any JS Module Helper class"
  },
  "api/ToSic.Cre8magic.Internal.Startup.OqtaneClientStartup.html": {
    "href": "api/ToSic.Cre8magic.Internal.Startup.OqtaneClientStartup.html",
    "title": "Class OqtaneClientStartup | cre8magic",
    "keywords": "Class OqtaneClientStartup Namespace ToSic.Cre8magic.Internal.Startup Assembly ToSic.Cre8magic.Client.Oqtane.dll Class to connect Oqtane with the Service Configuration. public class OqtaneClientStartup : IClientStartup Inheritance object OqtaneClientStartup Implements IClientStartup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureServices(IServiceCollection) Register Services public void ConfigureServices(IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/ToSic.Cre8magic.Internal.Startup.ServiceRegistration.html": {
    "href": "api/ToSic.Cre8magic.Internal.Startup.ServiceRegistration.html",
    "title": "Class ServiceRegistration | cre8magic",
    "keywords": "Class ServiceRegistration Namespace ToSic.Cre8magic.Internal.Startup Assembly ToSic.Cre8magic.Client.Oqtane.dll Standalone class to register all services for Cre8Magic. Done like this, so unit tests can better choose which parts to register. public static class ServiceRegistration Inheritance object ServiceRegistration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCre8magic(IServiceCollection) public static IServiceCollection AddCre8magic(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection AddCre8magicFoundation(IServiceCollection) public static IServiceCollection AddCre8magicFoundation(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection AddCre8magicJsLayer(IServiceCollection) public static IServiceCollection AddCre8magicJsLayer(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection AddCre8magicMainParts(IServiceCollection) public static IServiceCollection AddCre8magicMainParts(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection AddCre8magicSettingsCore(IServiceCollection) public static IServiceCollection AddCre8magicSettingsCore(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection AddCre8magicSettingsSourceProvider(IServiceCollection) public static IServiceCollection AddCre8magicSettingsSourceProvider(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection AddCre8magicSettingsSourcesPackage(IServiceCollection) public static IServiceCollection AddCre8magicSettingsSourcesPackage(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection AddOqtaneWorkarounds(IServiceCollection) public static IServiceCollection AddOqtaneWorkarounds(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/ToSic.Cre8magic.Internal.Startup.html": {
    "href": "api/ToSic.Cre8magic.Internal.Startup.html",
    "title": "Namespace ToSic.Cre8magic.Internal.Startup | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Internal.Startup Classes OqtaneClientStartup Class to connect Oqtane with the Service Configuration. ServiceRegistration Standalone class to register all services for Cre8Magic. Done like this, so unit tests can better choose which parts to register."
  },
  "api/ToSic.Cre8magic.Internal.html": {
    "href": "api/ToSic.Cre8magic.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Internal Namespaces ToSic.Cre8magic.Internal.JsInterops ToSic.Cre8magic.Internal.Startup Classes DebugExtensions WIP class to provide certain debug information which is internal to external projects."
  },
  "api/ToSic.Cre8magic.JsModules.MagicJsServiceBase.html": {
    "href": "api/ToSic.Cre8magic.JsModules.MagicJsServiceBase.html",
    "title": "Class MagicJsServiceBase | cre8magic",
    "keywords": "Class MagicJsServiceBase Namespace ToSic.Cre8magic.JsModules Assembly ToSic.Cre8magic.Client.Oqtane.dll Base for any JS Module Helper class public abstract class MagicJsServiceBase Inheritance object MagicJsServiceBase Derived MagicThemeJsServiceTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicJsServiceBase(IJSRuntime, string) Constructor protected MagicJsServiceBase(IJSRuntime jsRuntime, string modulePath) Parameters jsRuntime IJSRuntime JS Runtime of the control, usually available later, like in the OnAfterRenderAsync modulePath string Path to the javascript file, must be a JS6 Module Properties JsRuntime protected IJSRuntime JsRuntime { get; } Property Value IJSRuntime ModulePath protected string ModulePath { get; } Property Value string Methods InvokeAsync<TValue>(string) protected Task<TValue> InvokeAsync<TValue>(string identifier) Parameters identifier string Returns Task<TValue> Type Parameters TValue InvokeAsync<TValue>(string, params object[]) protected Task<TValue> InvokeAsync<TValue>(string identifier, params object[] args) Parameters identifier string args object[] Returns Task<TValue> Type Parameters TValue Log(params object[]) public Task Log(params object[] args) Parameters args object[] Returns Task Module() The JsObjectReference to the real module. Will need to load it on first access, so it's async. public Task<IJSObjectReference> Module() Returns Task<IJSObjectReference>"
  },
  "api/ToSic.Cre8magic.JsModules.html": {
    "href": "api/ToSic.Cre8magic.JsModules.html",
    "title": "Namespace ToSic.Cre8magic.JsModules | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.JsModules Classes MagicJsServiceBase Base for any JS Module Helper class"
  },
  "api/ToSic.Cre8magic.Languages.IMagicLanguageKit.html": {
    "href": "api/ToSic.Cre8magic.Languages.IMagicLanguageKit.html",
    "title": "Interface IMagicLanguageKit | cre8magic",
    "keywords": "Interface IMagicLanguageKit Namespace ToSic.Cre8magic.Languages Assembly ToSic.Cre8magic.Client.Oqtane.dll The Kit to Show language menus in the UI. You can get it by @inject / [Inject]-ing the IMagicHat and calling the LanguageKitAsync(MagicLanguageSettings?). public interface IMagicLanguageKit Properties Designer MagicLanguageDesigner Designer { get; init; } Property Value MagicLanguageDesigner Languages List of languages to show as specified in the settings. IEnumerable<MagicLanguage> Languages { get; init; } Property Value IEnumerable<MagicLanguage> Settings MagicLanguageSettings Settings { get; init; } Property Value MagicLanguageSettings Show Determines if the languages should be shown. Will be retrieved from the settings bool Show { get; init; } Property Value bool Methods SetCultureAsync(string) Command to set the culture. This will trigger a page reload. Task SetCultureAsync(string culture) Parameters culture string Returns Task"
  },
  "api/ToSic.Cre8magic.Languages.Internal.IMagicLanguageService.html": {
    "href": "api/ToSic.Cre8magic.Languages.Internal.IMagicLanguageService.html",
    "title": "Interface IMagicLanguageService | cre8magic",
    "keywords": "Interface IMagicLanguageService Namespace ToSic.Cre8magic.Languages.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll The service to get the language kit. Not meant to be used externally, so it's hidden for now. public interface IMagicLanguageService Methods LanguageKitAsync(PageState, MagicLanguageSettings?) Get the state. Must be async, because it might need to load data from Oqtane. Task<IMagicLanguageKit> LanguageKitAsync(PageState pageState, MagicLanguageSettings? settings = null) Parameters pageState PageState The Oqtane PageState settings MagicLanguageSettings Settings to use - or if null, just use all the defaults Returns Task<IMagicLanguageKit> SetCultureAsync(string) Task SetCultureAsync(string culture) Parameters culture string Returns Task"
  },
  "api/ToSic.Cre8magic.Languages.Internal.html": {
    "href": "api/ToSic.Cre8magic.Languages.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Languages.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Languages.Internal Interfaces IMagicLanguageService The service to get the language kit. Not meant to be used externally, so it's hidden for now."
  },
  "api/ToSic.Cre8magic.Languages.MagicLanguage.html": {
    "href": "api/ToSic.Cre8magic.Languages.MagicLanguage.html",
    "title": "Class MagicLanguage | cre8magic",
    "keywords": "Class MagicLanguage Namespace ToSic.Cre8magic.Languages Assembly ToSic.Cre8magic.Client.Oqtane.dll Describes a language inside Oqtane. With Name, Label, Culture and Active-State. public record MagicLanguage Inheritance object MagicLanguage Properties Culture public string Culture { get; init; } Property Value string Description Description to show for this language. Will auto-default to the system name for this language. public string? Description { get; init; } Property Value string IsActive public bool IsActive { get; } Property Value bool Label Label to show for this culture. Will auto-default to first two characters. public string? Label { get; init; } Property Value string"
  },
  "api/ToSic.Cre8magic.Languages.MagicLanguageDebug.html": {
    "href": "api/ToSic.Cre8magic.Languages.MagicLanguageDebug.html",
    "title": "Class MagicLanguageDebug | cre8magic",
    "keywords": "Class MagicLanguageDebug Namespace ToSic.Cre8magic.Languages Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicLanguageDebug : MagicControlBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControlBase MagicLanguageDebug Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IMagicDesigner Inherited Members MagicControlBase.AllSettings MagicControlBase.UserIsAdmin MagicControlBase.UserIsEditor MagicControlBase.UserIsLoggedIn MagicControlBase.Designer MagicControlBase.Classes(string) MagicControlBase.ClassesOrDefault(string, string) MagicControlBase.Value(string) MagicControlBase.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LanguageService [Parameter] [EditorRequired] public LanguageService LanguageService { get; set; } Property Value LanguageService Languages [Parameter] [EditorRequired] public List<MagicLanguage> Languages { get; set; } Property Value List<MagicLanguage> Show [Parameter] [EditorRequired] public bool Show { get; set; } Property Value bool Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Languages.MagicLanguageDesignSettings.html": {
    "href": "api/ToSic.Cre8magic.Languages.MagicLanguageDesignSettings.html",
    "title": "Class MagicLanguageDesignSettings | cre8magic",
    "keywords": "Class MagicLanguageDesignSettings Namespace ToSic.Cre8magic.Languages Assembly ToSic.Cre8magic.Client.Oqtane.dll Language Design Settings public record MagicLanguageDesignSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicLanguageDesignSettings Inherited Members SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Properties Parts Custom, named settings for classes, values etc. as you need them in your code. For things such as ul or li or a tags. [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicDesignSettingsPart>))] public Dictionary<string, MagicDesignSettingsPart> Parts { get; init; } Property Value Dictionary<string, MagicDesignSettingsPart>"
  },
  "api/ToSic.Cre8magic.Languages.MagicLanguageDesigner.html": {
    "href": "api/ToSic.Cre8magic.Languages.MagicLanguageDesigner.html",
    "title": "Class MagicLanguageDesigner | cre8magic",
    "keywords": "Class MagicLanguageDesigner Namespace ToSic.Cre8magic.Languages Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicLanguageDesigner : MagicDesignerBase, IMagicDesigner Inheritance object MagicDesignerBase MagicLanguageDesigner Implements IMagicDesigner Inherited Members MagicDesignerBase.DesignSettings MagicDesignerBase.GetSettings(string) MagicDesignerBase.ParseTokens MagicDesignerBase.ProcessTokens(string) MagicDesignerBase.Classes(string) MagicDesignerBase.Value(string) MagicDesignerBase.Id(string) Methods Classes(string, MagicLanguage?) TODO: PROBABLY MOVE TO Language? public string Classes(string tag, MagicLanguage? lang) Parameters tag string lang MagicLanguage Returns string"
  },
  "api/ToSic.Cre8magic.Languages.MagicLanguageMenuBase.html": {
    "href": "api/ToSic.Cre8magic.Languages.MagicLanguageMenuBase.html",
    "title": "Class MagicLanguageMenuBase | cre8magic",
    "keywords": "Class MagicLanguageMenuBase Namespace ToSic.Cre8magic.Languages Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicLanguageMenuBase : MagicControlBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControlBase MagicLanguageMenuBase Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IMagicDesigner Inherited Members MagicControlBase.AllSettings MagicControlBase.UserIsAdmin MagicControlBase.UserIsEditor MagicControlBase.UserIsLoggedIn MagicControlBase.Classes(string) MagicControlBase.ClassesOrDefault(string, string) MagicControlBase.Value(string) MagicControlBase.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Designer protected override IMagicDesigner Designer { get; } Property Value IMagicDesigner LanguageService [Inject] protected LanguageService LanguageService { get; set; } Property Value LanguageService Languages public List<MagicLanguage> Languages { get; } Property Value List<MagicLanguage> Show Determines if the languages should be shown. Will be retrieved from the settings protected bool? Show { get; } Property Value bool? Methods Classes(MagicLanguage?, string) public string? Classes(MagicLanguage? lang, string tag) Parameters lang MagicLanguage tag string Returns string OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A System.Threading.Tasks.Task representing any asynchronous operation. SetLanguage(string) public Task SetLanguage(string culture) Parameters culture string Returns Task"
  },
  "api/ToSic.Cre8magic.Languages.MagicLanguageSettings.html": {
    "href": "api/ToSic.Cre8magic.Languages.MagicLanguageSettings.html",
    "title": "Class MagicLanguageSettings | cre8magic",
    "keywords": "Class MagicLanguageSettings Namespace ToSic.Cre8magic.Languages Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicLanguageSettings : MagicSettingsBase Inheritance object SettingsWithInherit MagicSettingsBase MagicLanguageSettings Inherited Members MagicSettingsBase.PageState MagicSettingsBase.PartName MagicSettingsBase.SettingsName MagicSettingsBase.DesignName MagicSettingsBase.Debug SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Extension Methods MagicSettingsExtensions.RefillLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.Refill<TSettings>(TSettings?, PageState) MagicSettingsExtensions.Refill<TSettings, TWith>(TSettings?, TWith?) MagicSettingsExtensions.WithLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.With<TSettings>(TSettings?, PageState) MagicSettingsExtensions.With<TSettings, TWith>(TSettings?, TWith?) Properties DesignSettings [JsonIgnore] public MagicLanguageDesignSettings? DesignSettings { get; init; } Property Value MagicLanguageDesignSettings HideOthers If true, will only show the languages which are explicitly configured. If false, will first show the configured languages, then the rest. public bool? HideOthers { get; init; } Property Value bool? Languages List of languages [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicLanguage>))] public Dictionary<string, MagicLanguage>? Languages { get; init; } Property Value Dictionary<string, MagicLanguage> MinLanguagesToShow public int MinLanguagesToShow { get; init; } Property Value int"
  },
  "api/ToSic.Cre8magic.Languages.MagicLanguageSettingsData.html": {
    "href": "api/ToSic.Cre8magic.Languages.MagicLanguageSettingsData.html",
    "title": "Class MagicLanguageSettingsData | cre8magic",
    "keywords": "Class MagicLanguageSettingsData Namespace ToSic.Cre8magic.Languages Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicLanguageSettingsData : SettingsWithInherit Inheritance object SettingsWithInherit MagicLanguageSettingsData Derived MagicLanguageSettings Inherited Members SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Constructors MagicLanguageSettingsData() Dummy constructor so better find cases where it's created Note it must be without parameters for json deserialization public MagicLanguageSettingsData() Properties Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; init; } Property Value MagicDebugSettings HideOthers If true, will only show the languages which are explicitly configured. If false, will first show the configured languages, then the rest. public bool? HideOthers { get; init; } Property Value bool? Languages List of languages [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicLanguage>))] public Dictionary<string, MagicLanguage>? Languages { get; init; } Property Value Dictionary<string, MagicLanguage> MinLanguagesToShow public int MinLanguagesToShow { get; init; } Property Value int"
  },
  "api/ToSic.Cre8magic.Languages.Settings.MagicLanguage.html": {
    "href": "api/ToSic.Cre8magic.Languages.Settings.MagicLanguage.html",
    "title": "Class MagicLanguage | cre8magic",
    "keywords": "Class MagicLanguage Namespace ToSic.Cre8magic.Languages.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicLanguage : ICanClone<MagicLanguage>, IEquatable<MagicLanguage> Inheritance object MagicLanguage Implements ICanClone<MagicLanguage> IEquatable<MagicLanguage> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicLanguage() Empty constructor for deserialization public MagicLanguage() MagicLanguage(MagicLanguage?, MagicLanguage?) public MagicLanguage(MagicLanguage? priority, MagicLanguage? fallback = null) Parameters priority MagicLanguage fallback MagicLanguage Properties Culture public string? Culture { get; init; } Property Value string Description Description to show for this language. Will auto-default to the system name for this language. public string? Description { get; init; } Property Value string IsActive public bool IsActive { get; } Property Value bool Label Label to show for this culture. Will auto-default to first two characters. public string? Label { get; init; } Property Value string Methods CloneWith(MagicLanguage?, bool) public MagicLanguage CloneWith(MagicLanguage? priority, bool forceCopy = false) Parameters priority MagicLanguage forceCopy bool Returns MagicLanguage"
  },
  "api/ToSic.Cre8magic.Languages.Settings.MagicLanguagesSettings.html": {
    "href": "api/ToSic.Cre8magic.Languages.Settings.MagicLanguagesSettings.html",
    "title": "Class MagicLanguagesSettings | cre8magic",
    "keywords": "Class MagicLanguagesSettings Namespace ToSic.Cre8magic.Languages.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicLanguagesSettings : SettingsWithInherit, IEquatable<SettingsWithInherit>, ICanClone<MagicLanguagesSettings>, IEquatable<MagicLanguagesSettings> Inheritance object SettingsWithInherit MagicLanguagesSettings Implements IEquatable<SettingsWithInherit> ICanClone<MagicLanguagesSettings> IEquatable<MagicLanguagesSettings> Inherited Members SettingsWithInherit.Inherits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicLanguagesSettings() Dummy constructor so better find cases where it's created Note it must be without parameters for json deserialization public MagicLanguagesSettings() MagicLanguagesSettings(MagicLanguagesSettings?, MagicLanguagesSettings?) public MagicLanguagesSettings(MagicLanguagesSettings? priority, MagicLanguagesSettings? fallback = null) Parameters priority MagicLanguagesSettings fallback MagicLanguagesSettings Properties Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; init; } Property Value MagicDebugSettings HideOthers If true, will only show the languages which are explicitly configured. If false, will first show the configured languages, then the rest. public bool HideOthers { get; init; } Property Value bool Languages List of languages public NamedSettings<MagicLanguage>? Languages { get; init; } Property Value NamedSettings<MagicLanguage> Methods CloneWith(MagicLanguagesSettings?, bool) public MagicLanguagesSettings CloneWith(MagicLanguagesSettings? priority, bool forceCopy = false) Parameters priority MagicLanguagesSettings forceCopy bool Returns MagicLanguagesSettings"
  },
  "api/ToSic.Cre8magic.Languages.Settings.html": {
    "href": "api/ToSic.Cre8magic.Languages.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Languages.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Languages.Settings Classes MagicLanguage MagicLanguagesSettings"
  },
  "api/ToSic.Cre8magic.Languages.html": {
    "href": "api/ToSic.Cre8magic.Languages.html",
    "title": "Namespace ToSic.Cre8magic.Languages | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Languages Classes MagicLanguage Describes a language inside Oqtane. With Name, Label, Culture and Active-State. MagicLanguageDesignSettings Language Design Settings MagicLanguageDesigner MagicLanguageSettings Interfaces IMagicLanguageKit The Kit to Show language menus in the UI. You can get it by @inject / [Inject]-ing the IMagicHat and calling the LanguageKitAsync(MagicLanguageSettings?)."
  },
  "api/ToSic.Cre8magic.Links.IMagicLinkService.html": {
    "href": "api/ToSic.Cre8magic.Links.IMagicLinkService.html",
    "title": "Interface IMagicLinkService | cre8magic",
    "keywords": "Interface IMagicLinkService Namespace ToSic.Cre8magic.Links Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicLinkService Methods Link(PageState, MagicLinkSpecs) string Link(PageState pageState, MagicLinkSpecs linkSpecs) Parameters pageState PageState linkSpecs MagicLinkSpecs Returns string"
  },
  "api/ToSic.Cre8magic.Links.MagicLinkSpecs.html": {
    "href": "api/ToSic.Cre8magic.Links.MagicLinkSpecs.html",
    "title": "Class MagicLinkSpecs | cre8magic",
    "keywords": "Class MagicLinkSpecs Namespace ToSic.Cre8magic.Links Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicLinkSpecs Inheritance object MagicLinkSpecs Properties Path public string? Path { get; init; } Property Value string QueryString public string? QueryString { get; init; } Property Value string"
  },
  "api/ToSic.Cre8magic.Links.html": {
    "href": "api/ToSic.Cre8magic.Links.html",
    "title": "Namespace ToSic.Cre8magic.Links | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Links Classes MagicLinkSpecs Interfaces IMagicLinkService"
  },
  "api/ToSic.Cre8magic.MagicConstants.html": {
    "href": "api/ToSic.Cre8magic.MagicConstants.html",
    "title": "Class MagicConstants | cre8magic",
    "keywords": "Class MagicConstants Namespace ToSic.Cre8magic Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicConstants Inheritance object MagicConstants Fields Default public static string Default Field Value string DesignMobile public static string DesignMobile Field Value string InheritName If used on a name, means it should inherit the name used for the layout to find the menu/design/etc. public const string InheritName = \"=\" Field Value string MenuHorizontal public const string MenuHorizontal = \"Horizontal\" Field Value string MenuVertical public const string MenuVertical = \"Vertical\" Field Value string PackageId public const string PackageId = \"ToSic.Cre8magic.Oqtane\" Field Value string"
  },
  "api/ToSic.Cre8magic.MagicTokens.html": {
    "href": "api/ToSic.Cre8magic.MagicTokens.html",
    "title": "Class MagicTokens | cre8magic",
    "keywords": "Class MagicTokens Namespace ToSic.Cre8magic Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicTokens Inheritance object MagicTokens"
  },
  "api/ToSic.Cre8magic.Menus.IMagicMenuKit.html": {
    "href": "api/ToSic.Cre8magic.Menus.IMagicMenuKit.html",
    "title": "Interface IMagicMenuKit | cre8magic",
    "keywords": "Interface IMagicMenuKit Namespace ToSic.Cre8magic.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicMenuKit Properties Root The root node to start from. This behaves like a IMagicPage but is not really a page. It does provide Children and can also do design work like apply Classes, typically to the outermost <ul></ul> tags etc. IMagicPage Root { get; init; } Property Value IMagicPage Settings The settings used to retrieve and build the pages. MagicMenuSettings Settings { get; } Property Value MagicMenuSettings Variant The menu variant to use. Usually determined by the settings. string Variant { get; } Property Value string Methods IsVariant(string) Check if the menu is of a specific variant. Case-insensitive. bool IsVariant(string variant) Parameters variant string the variant to check, like \"vertical\" Returns bool"
  },
  "api/ToSic.Cre8magic.Menus.IMagicMenuService.html": {
    "href": "api/ToSic.Cre8magic.Menus.IMagicMenuService.html",
    "title": "Interface IMagicMenuService | cre8magic",
    "keywords": "Interface IMagicMenuService Namespace ToSic.Cre8magic.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Service to get a tree of pages for a menu. public interface IMagicMenuService Properties NoInheritSettingsWip bool NoInheritSettingsWip { get; set; } Property Value bool Methods MenuKit(PageState, MagicMenuSettings?) Get the menu kit containing all items for the current page and specified settings. IMagicMenuKit MenuKit(PageState pageState, MagicMenuSettings? settings = null) Parameters pageState PageState settings MagicMenuSettings Returns IMagicMenuKit"
  },
  "api/ToSic.Cre8magic.Menus.Internal.MagicMenuDesigner.html": {
    "href": "api/ToSic.Cre8magic.Menus.Internal.MagicMenuDesigner.html",
    "title": "Class MagicMenuDesigner | cre8magic",
    "keywords": "Class MagicMenuDesigner Namespace ToSic.Cre8magic.Menus.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Special helper to provide Css classes to menus public class MagicMenuDesigner : IMagicPageDesigner Inheritance object MagicMenuDesigner Implements IMagicPageDesigner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Classes(string, IMagicPage) public string Classes(string tag, IMagicPage page) Parameters tag string page IMagicPage Returns string Value(string, IMagicPage) public string Value(string key, IMagicPage page) Parameters key string page IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Menus.Internal.MagicMenuKit.html": {
    "href": "api/ToSic.Cre8magic.Menus.Internal.MagicMenuKit.html",
    "title": "Class MagicMenuKit | cre8magic",
    "keywords": "Class MagicMenuKit Namespace ToSic.Cre8magic.Menus.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll tbd public record MagicMenuKit : IMagicMenuKit, IEquatable<MagicMenuKit> Inheritance object MagicMenuKit Implements IMagicMenuKit IEquatable<MagicMenuKit> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DebugExtensions.GetLogEntries(IMagicMenuKit) Properties Context INTERNAL context for this menu, WIP. For debugging. public required IContextWip Context { get; init; } Property Value IContextWip Pages List of pages to show at this level of the menu. This is a magic page list, which means it contains magic pages and some more features. Can contain child pages. public required IMagicPageList Pages { get; init; } Property Value IMagicPageList Settings The settings used to retrieve and build the pages. public required MagicMenuSettings Settings { get; init; } Property Value MagicMenuSettings Variant The menu variant to use. Usually determined by the settings. public string Variant { get; } Property Value string Methods Kit(IMagicPageWithDesignWip) public IMagicMenuKit Kit(IMagicPageWithDesignWip page) Parameters page IMagicPageWithDesignWip Returns IMagicMenuKit"
  },
  "api/ToSic.Cre8magic.Menus.Internal.MagicMenuService.html": {
    "href": "api/ToSic.Cre8magic.Menus.Internal.MagicMenuService.html",
    "title": "Class MagicMenuService | cre8magic",
    "keywords": "Class MagicMenuService Namespace ToSic.Cre8magic.Menus.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Will create a MenuTree based on the current pages information and configuration public class MagicMenuService : IMagicMenuService Inheritance object MagicMenuService Implements IMagicMenuService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicMenuService(IMagicSettingsService) Will create a MenuTree based on the current pages information and configuration public MagicMenuService(IMagicSettingsService settingsSvc) Parameters settingsSvc IMagicSettingsService Properties NoInheritSettingsWip public bool NoInheritSettingsWip { get; set; } Property Value bool Methods MenuKit(PageState, MagicMenuSettings?) Get the menu kit containing all items for the current page and specified settings. public IMagicMenuKit MenuKit(PageState pageState, MagicMenuSettings? settings = null) Parameters pageState PageState settings MagicMenuSettings Returns IMagicMenuKit"
  },
  "api/ToSic.Cre8magic.Menus.Internal.html": {
    "href": "api/ToSic.Cre8magic.Menus.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Menus.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Menus.Internal Classes MagicMenuDesigner Special helper to provide Css classes to menus MagicMenuKit tbd MagicMenuService Will create a MenuTree based on the current pages information and configuration"
  },
  "api/ToSic.Cre8magic.Menus.MagicMenu.html": {
    "href": "api/ToSic.Cre8magic.Menus.MagicMenu.html",
    "title": "Class MagicMenu | cre8magic",
    "keywords": "Class MagicMenu Namespace ToSic.Cre8magic.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Base class for any menu list public abstract class MagicMenu : MagicMenuBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MagicMenuBase MagicMenu Implements IComponent IHandleEvent IHandleAfterRender IThemeControl Inherited Members MagicMenuBase.Classes(string) MagicMenuBase.Value(string) MagicMenuBase.Id(string) MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) MenuBase.MenuPages ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Menu [Parameter] [EditorRequired] public IMagicPageList Menu { get; set; } Property Value IMagicPageList"
  },
  "api/ToSic.Cre8magic.Menus.MagicMenuBase.html": {
    "href": "api/ToSic.Cre8magic.Menus.MagicMenuBase.html",
    "title": "Class MagicMenuBase | cre8magic",
    "keywords": "Class MagicMenuBase Namespace ToSic.Cre8magic.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class MagicMenuBase : MenuBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MagicMenuBase Implements IComponent IHandleEvent IHandleAfterRender IThemeControl Derived MagicMenuRoot MagicMenu Inherited Members MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) MenuBase.MenuPages ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Classes(string) public string? Classes(string target) Parameters target string Returns string Id(string) public string? Id(string target) Parameters target string Returns string Value(string) public string? Value(string target) Parameters target string Returns string"
  },
  "api/ToSic.Cre8magic.Menus.MagicMenuDebug.html": {
    "href": "api/ToSic.Cre8magic.Menus.MagicMenuDebug.html",
    "title": "Class MagicMenuDebug | cre8magic",
    "keywords": "Class MagicMenuDebug Namespace ToSic.Cre8magic.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicMenuDebug : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase MagicMenuDebug Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Menu [Parameter] [EditorRequired] public IMagicPageList? Menu { get; set; } Property Value IMagicPageList Standalone [Parameter] public bool Standalone { get; set; } Property Value bool Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Menus.MagicMenuDesignSettings.html": {
    "href": "api/ToSic.Cre8magic.Menus.MagicMenuDesignSettings.html",
    "title": "Class MagicMenuDesignSettings | cre8magic",
    "keywords": "Class MagicMenuDesignSettings Namespace ToSic.Cre8magic.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Menu Design Settings public record MagicMenuDesignSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicMenuDesignSettings Inherited Members SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Properties Parts Custom, named settings for classes, values etc. as you need them in your code. For things such as ul or li or a tags. [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicMenuDesignSettingsPart>))] public Dictionary<string, MagicMenuDesignSettingsPart> Parts { get; init; } Property Value Dictionary<string, MagicMenuDesignSettingsPart>"
  },
  "api/ToSic.Cre8magic.Menus.MagicMenuDesignSettingsPart.html": {
    "href": "api/ToSic.Cre8magic.Menus.MagicMenuDesignSettingsPart.html",
    "title": "Class MagicMenuDesignSettingsPart | cre8magic",
    "keywords": "Class MagicMenuDesignSettingsPart Namespace ToSic.Cre8magic.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicMenuDesignSettingsPart : MagicDesignSettingsPart Inheritance object MagicDesignSettingsPart MagicMenuDesignSettingsPart Inherited Members MagicDesignSettingsPart.Classes MagicDesignSettingsPart.Value MagicDesignSettingsPart.Id MagicDesignSettingsPart.IsActive MagicDesignSettingsPart.IsPublished MagicDesignSettingsPart.IsAdmin Properties ByLevel List of classes to add on certain levels only. Use level -1 to specify classes to apply to all the remaining ones which are not explicitly listed. public Dictionary<int, string>? ByLevel { get; init; } Property Value Dictionary<int, string> HasChildren Classes to add if this node is a parent (has-children). public MagicSettingOnOff? HasChildren { get; init; } Property Value MagicSettingOnOff InBreadcrumb Classes to add if this node is in the path / breadcrumb of the current page. public MagicSettingOnOff? InBreadcrumb { get; init; } Property Value MagicSettingOnOff IsDisabled Classes to add if the node is disabled. TODO: unclear why it's disabled, what would cause this... public MagicSettingOnOff? IsDisabled { get; init; } Property Value MagicSettingOnOff"
  },
  "api/ToSic.Cre8magic.Menus.MagicMenuRoot.html": {
    "href": "api/ToSic.Cre8magic.Menus.MagicMenuRoot.html",
    "title": "Class MagicMenuRoot | cre8magic",
    "keywords": "Class MagicMenuRoot Namespace ToSic.Cre8magic.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll Base class for Razor menus public abstract class MagicMenuRoot : ThemeControlBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase MagicMenuRoot Implements IThemeControl Inherited Members ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, string) ThemeBase.NavigateUrl(string, Dictionary<string, string>) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(int, string) ThemeBase.NavigateUrl(int, string, string) ThemeBase.NavigateUrl(int, string, Dictionary<string, string>) ThemeBase.NavigateUrl(string, int, string) ThemeBase.NavigateUrl(string, int, string, string) ThemeBase.NavigateUrl(string, int, string, Dictionary<string, string>) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(int, string, Dictionary<string, string>) ThemeBase.EditUrl(string, int, string, string) ThemeBase.EditUrl(string, int, string, Dictionary<string, string>) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources Properties Children [Parameter] public bool? Children { get; set; } Property Value bool? Debug [Parameter] public bool? Debug { get; set; } Property Value bool? Depth [Parameter] public int? Depth { get; set; } Property Value int? Design [Parameter] public string? Design { get; set; } Property Value string Display [Parameter] public bool? Display { get; set; } Property Value bool? IsHorizontal protected bool IsHorizontal { get; } Property Value bool IsVertical Detect if the menu is configured for vertical. For the most common 2 kinds of menu options. protected bool IsVertical { get; } Property Value bool Level [Parameter] public int? Level { get; set; } Property Value int? MagicMenuService [Inject] public IMagicMenuService? MagicMenuService { get; set; } Property Value IMagicMenuService MenuId [Parameter] public string? MenuId { get; set; } Property Value string MenuKit protected IMagicMenuKit? MenuKit { get; } Property Value IMagicMenuKit MenuSettings Complex object with all settings. If this is used, all other settings will be ignored. [Parameter] public MagicMenuSettings? MenuSettings { get; set; } Property Value MagicMenuSettings PageList [Parameter] public List<int>? PageList { get; set; } Property Value List<int> PartName [Parameter] public string? PartName { get; set; } Property Value string Start [Parameter] public string? Start { get; set; } Property Value string Template [Parameter] public string? Template { get; set; } Property Value string Methods OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A System.Threading.Tasks.Task representing any asynchronous operation."
  },
  "api/ToSic.Cre8magic.Menus.MagicMenuSettings.html": {
    "href": "api/ToSic.Cre8magic.Menus.MagicMenuSettings.html",
    "title": "Class MagicMenuSettings | cre8magic",
    "keywords": "Class MagicMenuSettings Namespace ToSic.Cre8magic.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll The raw settings for a menu, in a way which can be stored elsewhere. This is later augmented with additional information which only code can provide, in the MagicMenuSettings public record MagicMenuSettings : MagicSettingsBase, IMagicPageSetSettings Inheritance object SettingsWithInherit MagicSettingsBase MagicMenuSettings Implements IMagicPageSetSettings Inherited Members MagicSettingsBase.PageState MagicSettingsBase.PartName MagicSettingsBase.SettingsName MagicSettingsBase.DesignName MagicSettingsBase.Debug SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Extension Methods MagicSettingsExtensions.RefillLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.Refill<TSettings>(TSettings?, PageState) MagicSettingsExtensions.Refill<TSettings, TWith>(TSettings?, TWith?) MagicSettingsExtensions.WithLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.With<TSettings>(TSettings?, PageState) MagicSettingsExtensions.With<TSettings, TWith>(TSettings?, TWith?) Remarks This is implemented as an immutable record. Fields ChildrenFallback public const bool ChildrenFallback = false Field Value bool DisplayDefault public const bool DisplayDefault = true Field Value bool StartLevelFallback public const int StartLevelFallback = 0 Field Value int StartPageCurrent public const string StartPageCurrent = \".\" Field Value string StartPageRoot public const string StartPageRoot = \"*\" Field Value string StartPageRoot2 public const string StartPageRoot2 = \"/\" Field Value string Properties Children Levels to skip from the initial stating point. 0 means don't skip any, so if we're starting at the root, show that level 1 means skip the first level, so if we're starting at the root, show the children See inspiration context from DDRMenu https://www.dnnsoftware.com/wiki/ddrmenu-reference-guide in DDR it was called 'skip' but it didn't make sense IMHO TODO: possibly rename to StartOnChildren or StartSkip? public bool? Children { get; init; } Property Value bool? Depth public int? Depth { get; init; } Property Value int? DesignSettings [JsonIgnore] public MagicMenuDesignSettings? DesignSettings { get; init; } Property Value MagicMenuDesignSettings Designer [JsonIgnore] public IMagicPageDesigner? Designer { get; init; } Property Value IMagicPageDesigner Display Determines if this navigation should be shown. Mainly used for standard menus which could be disabled through settings. public bool? Display { get; init; } Property Value bool? Id A unique ID to identify the menu. Would be used for debugging but also to help in creating unique css-classes for collapsible menus public string? Id { get; init; } Property Value string Level The level this menu should start from. 0 is the top level (default) 1 is the top level containing home and other pages -1 is one level up from the current node -2 is two levels up from the current node public int? Level { get; init; } Property Value int? MenuId Menu ID for use in JavaScript etc. Usually predefined OR a random number public string MenuId { get; } Property Value string Pages List of pages to respect when creating the breadcrumb. Default is null - so it will just take all the pages. TODO: NAMING [JsonIgnore] public IEnumerable<IMagicPage>? Pages { get; init; } Property Value IEnumerable<IMagicPage> Start Start page of this navigation - like home or another specific page. Can be a specific ID a CSV of IDs ??? * to indicate all pages on the specified level . to indicate current page blank / null, to use another start ??? public string? Start { get; init; } Property Value string Variant The template to use - horizontal/vertical public string? Variant { get; init; } Property Value string"
  },
  "api/ToSic.Cre8magic.Menus.MagicMenuSettingsData.html": {
    "href": "api/ToSic.Cre8magic.Menus.MagicMenuSettingsData.html",
    "title": "Class MagicMenuSettingsData | cre8magic",
    "keywords": "Class MagicMenuSettingsData Namespace ToSic.Cre8magic.Menus Assembly ToSic.Cre8magic.Client.Oqtane.dll The raw settings for a menu, in a way which can be stored elsewhere. This is later augmented with additional information which only code can provide, in the MagicMenuSettings public record MagicMenuSettingsData : SettingsWithInherit, IMagicPageSetSettings Inheritance object SettingsWithInherit MagicMenuSettingsData Implements IMagicPageSetSettings Derived MagicMenuSettings Inherited Members SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Remarks This is implemented as an immutable record. Constructors MagicMenuSettingsData() Default constructor, so this record can be created anywhere. public MagicMenuSettingsData() Fields ChildrenFallback public const bool ChildrenFallback = false Field Value bool DisplayDefault public const bool DisplayDefault = true Field Value bool StartLevelFallback public const int StartLevelFallback = 0 Field Value int StartPageCurrent public const string StartPageCurrent = \".\" Field Value string StartPageRoot public const string StartPageRoot = \"*\" Field Value string StartPageRoot2 public const string StartPageRoot2 = \"/\" Field Value string Properties Children Levels to skip from the initial stating point. 0 means don't skip any, so if we're starting at the root, show that level 1 means skip the first level, so if we're starting at the root, show the children See inspiration context from DDRMenu https://www.dnnsoftware.com/wiki/ddrmenu-reference-guide in DDR it was called 'skip' but it didn't make sense IMHO TODO: possibly rename to StartOnChildren or StartSkip? public bool? Children { get; init; } Property Value bool? Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; init; } Property Value MagicDebugSettings Depth public int? Depth { get; init; } Property Value int? Display Determines if this navigation should be shown. Mainly used for standard menus which could be disabled through configuration. public bool? Display { get; init; } Property Value bool? Id A unique ID to identify the menu. Would be used for debugging but also to help in creating unique css-classes for collapsible menus public string? Id { get; init; } Property Value string Level The level this menu should start from. 0 is the top level (default) 1 is the top level containing home and other pages -1 is one level up from the current node -2 is two levels up from the current node public int? Level { get; init; } Property Value int? MenuId Menu ID for use in JavaScript etc. Usually predefined OR a random number public string MenuId { get; } Property Value string Start Start page of this navigation - like home or another specific page. Can be a specific ID a CSV of IDs ??? * to indicate all pages on the specified level . to indicate current page blank / null, to use another start ??? public string? Start { get; init; } Property Value string Template The template to use - horizontal/vertical public string? Template { get; init; } Property Value string Variant public string Variant { get; } Property Value string"
  },
  "api/ToSic.Cre8magic.Menus.Settings.MagicMenuDesigner.html": {
    "href": "api/ToSic.Cre8magic.Menus.Settings.MagicMenuDesigner.html",
    "title": "Class MagicMenuDesigner | cre8magic",
    "keywords": "Class MagicMenuDesigner Namespace ToSic.Cre8magic.Menus.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Special helper to provide Css classes to menus public class MagicMenuDesigner : IMagicPageDesigner Inheritance object MagicMenuDesigner Implements IMagicPageDesigner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Classes(string, IMagicPage) public string Classes(string tag, IMagicPage page) Parameters tag string page IMagicPage Returns string Value(string, IMagicPage) public string Value(string key, IMagicPage page) Parameters key string page IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Menus.Settings.html": {
    "href": "api/ToSic.Cre8magic.Menus.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Menus.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Menus.Settings Classes MagicMenuDesigner Special helper to provide Css classes to menus"
  },
  "api/ToSic.Cre8magic.Menus.html": {
    "href": "api/ToSic.Cre8magic.Menus.html",
    "title": "Namespace ToSic.Cre8magic.Menus | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Menus Classes MagicMenuDesignSettings Menu Design Settings MagicMenuDesignSettingsPart MagicMenuSettings The raw settings for a menu, in a way which can be stored elsewhere. This is later augmented with additional information which only code can provide, in the MagicMenuSettings Interfaces IMagicMenuKit"
  },
  "api/ToSic.Cre8magic.PageContext.IMagicPageContextService.html": {
    "href": "api/ToSic.Cre8magic.PageContext.IMagicPageContextService.html",
    "title": "Interface IMagicPageContextService | cre8magic",
    "keywords": "Interface IMagicPageContextService Namespace ToSic.Cre8magic.PageContext Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicPageContextService Methods SetBodyClasses(PageState, MagicPageContextSettings?) Task SetBodyClasses(PageState pageState, MagicPageContextSettings? settings) Parameters pageState PageState settings MagicPageContextSettings Returns Task State(PageState, MagicPageContextSettings?) MagicPageContextState State(PageState pageState, MagicPageContextSettings? settings = null) Parameters pageState PageState settings MagicPageContextSettings Returns MagicPageContextState"
  },
  "api/ToSic.Cre8magic.PageContext.MagicPageContextSettings.html": {
    "href": "api/ToSic.Cre8magic.PageContext.MagicPageContextSettings.html",
    "title": "Class MagicPageContextSettings | cre8magic",
    "keywords": "Class MagicPageContextSettings Namespace ToSic.Cre8magic.PageContext Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicPageContextSettings Inheritance object MagicPageContextSettings Properties Classes public string? Classes { get; init; } Property Value string TagId public string? TagId { get; init; } Property Value string UseBodyTag public bool? UseBodyTag { get; init; } Property Value bool?"
  },
  "api/ToSic.Cre8magic.PageContext.MagicPageContextState.html": {
    "href": "api/ToSic.Cre8magic.PageContext.MagicPageContextState.html",
    "title": "Class MagicPageContextState | cre8magic",
    "keywords": "Class MagicPageContextState Namespace ToSic.Cre8magic.PageContext Assembly ToSic.Cre8magic.Client.Oqtane.dll TODO: LATER INTERFACE...? public record MagicPageContextState Inheritance object MagicPageContextState Constructors MagicPageContextState(bool, string?, string?) TODO: LATER INTERFACE...? public MagicPageContextState(bool UseBodyTag, string? Classes, string? TagId) Parameters UseBodyTag bool Classes string TagId string Properties Classes public string? Classes { get; init; } Property Value string TagId public string? TagId { get; init; } Property Value string UseBodyTag public bool UseBodyTag { get; init; } Property Value bool"
  },
  "api/ToSic.Cre8magic.PageContext.html": {
    "href": "api/ToSic.Cre8magic.PageContext.html",
    "title": "Namespace ToSic.Cre8magic.PageContext | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.PageContext Classes MagicPageContextSettings MagicPageContextState TODO: LATER INTERFACE...? Interfaces IMagicPageContextService"
  },
  "api/ToSic.Cre8magic.PageContexts.IMagicPageContextKit.html": {
    "href": "api/ToSic.Cre8magic.PageContexts.IMagicPageContextKit.html",
    "title": "Interface IMagicPageContextKit | cre8magic",
    "keywords": "Interface IMagicPageContextKit Namespace ToSic.Cre8magic.PageContexts Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicPageContextKit Properties Classes string? Classes { get; } Property Value string Settings MagicPageContextSettings Settings { get; } Property Value MagicPageContextSettings TagId string? TagId { get; } Property Value string UseBodyTag bool UseBodyTag { get; } Property Value bool Methods UpdateBodyTag() Task UpdateBodyTag() Returns Task"
  },
  "api/ToSic.Cre8magic.PageContexts.MagicPageContextDesigner.html": {
    "href": "api/ToSic.Cre8magic.PageContexts.MagicPageContextDesigner.html",
    "title": "Class MagicPageContextDesigner | cre8magic",
    "keywords": "Class MagicPageContextDesigner Namespace ToSic.Cre8magic.PageContexts Assembly ToSic.Cre8magic.Client.Oqtane.dll Special helper to figure out what classes should be applied to the page. public class MagicPageContextDesigner Inheritance object MagicPageContextDesigner Constructors MagicPageContextDesigner(MagicPageContextSettings, PageState) Special helper to figure out what classes should be applied to the page. public MagicPageContextDesigner(MagicPageContextSettings settings, PageState pageState) Parameters settings MagicPageContextSettings pageState PageState"
  },
  "api/ToSic.Cre8magic.PageContexts.MagicPageContextSettings.html": {
    "href": "api/ToSic.Cre8magic.PageContexts.MagicPageContextSettings.html",
    "title": "Class MagicPageContextSettings | cre8magic",
    "keywords": "Class MagicPageContextSettings Namespace ToSic.Cre8magic.PageContexts Assembly ToSic.Cre8magic.Client.Oqtane.dll Magic Page Context Settings - Data. This configures how the page context is rendered, and what classes are added to the body tag. public record MagicPageContextSettings : MagicSettingsBase Inheritance object SettingsWithInherit MagicSettingsBase MagicPageContextSettings Inherited Members MagicSettingsBase.PageState MagicSettingsBase.PartName MagicSettingsBase.SettingsName MagicSettingsBase.DesignName MagicSettingsBase.Debug SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Extension Methods MagicSettingsExtensions.RefillLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.Refill<TSettings>(TSettings?, PageState) MagicSettingsExtensions.Refill<TSettings, TWith>(TSettings?, TWith?) MagicSettingsExtensions.WithLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.With<TSettings>(TSettings?, PageState) MagicSettingsExtensions.With<TSettings, TWith>(TSettings?, TWith?) Properties ClassList List of classes to add for the context. Should usually contain placeholders. public string[]? ClassList { get; init; } Property Value string[] Classes public string? Classes { get; init; } Property Value string PageIsHome Classes to use if the page is the home page - or not. public MagicSettingOnOff? PageIsHome { get; init; } Property Value MagicSettingOnOff TagId public string? TagId { get; init; } Property Value string UseBodyTag If true, the body tag will be used to add classes and other attributes. If false, it will use a div around the content. public bool? UseBodyTag { get; init; } Property Value bool?"
  },
  "api/ToSic.Cre8magic.PageContexts.html": {
    "href": "api/ToSic.Cre8magic.PageContexts.html",
    "title": "Namespace ToSic.Cre8magic.PageContexts | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.PageContexts Classes MagicPageContextDesigner Special helper to figure out what classes should be applied to the page. MagicPageContextSettings Magic Page Context Settings - Data. This configures how the page context is rendered, and what classes are added to the body tag. Interfaces IMagicPageContextKit"
  },
  "api/ToSic.Cre8magic.Pages.IMagicPage.html": {
    "href": "api/ToSic.Cre8magic.Pages.IMagicPage.html",
    "title": "Interface IMagicPage | cre8magic",
    "keywords": "Interface IMagicPage Namespace ToSic.Cre8magic.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll Magic Pages are smart wrappers around Oqtane Pages. They offer many benefits such as: Read-only properties (no accidental writing properties with unexpected side effects) Improved naming, e.g. .Id instead of .PageId Calculated properties such as Target (which becomes \"_blank\" for external links or null for normal links) Corrected values - e.g. the Link property will be javascript:void(0) if the page is not clickable Navigation properties such as Parent and Breadcrumb public interface IMagicPage Properties Breadcrumb The current pages bread-crumb, going from the top-level to the current page. Note that the \"Home\" page is usually not a parent, so it's not included. IEnumerable<IMagicPage> Breadcrumb { get; } Property Value IEnumerable<IMagicPage> Children IEnumerable<IMagicPage> Children { get; } Property Value IEnumerable<IMagicPage> HasChildren Determines if there are sub-pages. Note that this information will vary by user (because of permissions) and scenario. For example, when creating a menu which should only show 1 level, all pages will declare they have no children. bool HasChildren { get; } Property Value bool Id ID of this Page int Id { get; } Property Value int IsActive True if this page is the active / current page which the user is viewing. bool IsActive { get; } Property Value bool IsClickable Link in site navigation is enabled or disabled. bool IsClickable { get; } Property Value bool IsHome True if this is the home page. bool IsHome { get; } Property Value bool IsInBreadcrumb Determine if the menu page is in the breadcrumb. bool IsInBreadcrumb { get; } Property Value bool Level Current page level from the top of the Menu. As in Oqtane, it's 0 based. int Level { get; } Property Value int Link Link to this page. string Link { get; } Property Value string MenuLevel Level in the menu, starting from 1. As different menus may start at other depths, this is not always the same as the Oqtane level. Note that when building menus or breadcrumbs, this menu-level is recalculated to fit the current menu. So if the menu itself starts at another level (e.g. showing only all pages under Products), then these pages would declare they are MenuLevel=1 int MenuLevel { get; } Property Value int Name Page Name. string Name { get; } Property Value string OqtanePage Original Oqtane page wrapped in MagicPage. Can be used to access additional properties of the Oqtane page. Page OqtanePage { get; } Property Value Page Parent The parent page of this page. IMagicPage? Parent { get; } Property Value IMagicPage The parent page, or null if the page is on the top level and doesn't have a parent page. ParentId Reference to the parent Oqtane.Models.Page if it has one. int? ParentId { get; } Property Value int? Path Path of the page. string Path { get; } Property Value string Target Target for link to this page. string? Target { get; } Property Value string Url Full URL to this page. string Url { get; } Property Value string Methods Classes(string) Get css class for something - typically a tag. string? Classes(string tagOrKey) Parameters tagOrKey string Returns string Value(string) Get some value - often for an attribute or something similar. string? Value(string tagOrKey) Parameters tagOrKey string Returns string"
  },
  "api/ToSic.Cre8magic.Pages.IMagicPageDesigner.html": {
    "href": "api/ToSic.Cre8magic.Pages.IMagicPageDesigner.html",
    "title": "Interface IMagicPageDesigner | cre8magic",
    "keywords": "Interface IMagicPageDesigner Namespace ToSic.Cre8magic.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll Interface for a designer of a magic page. Anything implementing this interface can be used as a designer for a magic page, providing custom classes and values when generating the HTML for the page. public interface IMagicPageDesigner Methods Classes(string, IMagicPage) string? Classes(string tag, IMagicPage page) Parameters tag string page IMagicPage Returns string Value(string, IMagicPage) string? Value(string key, IMagicPage page) Parameters key string page IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Pages.IMagicPageList.html": {
    "href": "api/ToSic.Cre8magic.Pages.IMagicPageList.html",
    "title": "Interface IMagicPageList | cre8magic",
    "keywords": "Interface IMagicPageList Namespace ToSic.Cre8magic.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll A list of magic pages with design capabilities. It does not represent a page itself, but a list of pages. For example, a breadcrumb or a menu. It can be iterated to get the pages. public interface IMagicPageList Properties MenuLevel The depth in the current menu, starting from 1. Can be different from the normal Level, since it starts at 1 (not 0) and if the menu starts at level 2 or 3, this will still be 1. int MenuLevel { get; } Property Value int Methods Classes(string) Get css class for tag. string? Classes(string tag) Parameters tag string Returns string Value(string) Get attribute value. string? Value(string key) Parameters key string Returns string"
  },
  "api/ToSic.Cre8magic.Pages.IMagicPageService.html": {
    "href": "api/ToSic.Cre8magic.Pages.IMagicPageService.html",
    "title": "Interface IMagicPageService | cre8magic",
    "keywords": "Interface IMagicPageService Namespace ToSic.Cre8magic.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicPageService Methods GetAll(PageState, bool) IEnumerable<IMagicPage> GetAll(PageState pageState, bool ignorePermissions = false) Parameters pageState PageState ignorePermissions bool Returns IEnumerable<IMagicPage> GetCurrent(PageState) IMagicPage GetCurrent(PageState pageState) Parameters pageState PageState Returns IMagicPage GetHome(PageState) IMagicPage GetHome(PageState pageState) Parameters pageState PageState Returns IMagicPage GetPage(PageState, Page?) IMagicPage? GetPage(PageState pageState, Page? page) Parameters pageState PageState page Page Returns IMagicPage GetPage(PageState, int) IMagicPage? GetPage(PageState pageState, int pageId) Parameters pageState PageState pageId int Returns IMagicPage GetPages(PageState, IEnumerable<int>) IEnumerable<IMagicPage> GetPages(PageState pageState, IEnumerable<int> pageIds) Parameters pageState PageState pageIds IEnumerable<int> Returns IEnumerable<IMagicPage>"
  },
  "api/ToSic.Cre8magic.Pages.IMagicPageSetSettings.html": {
    "href": "api/ToSic.Cre8magic.Pages.IMagicPageSetSettings.html",
    "title": "Interface IMagicPageSetSettings | cre8magic",
    "keywords": "Interface IMagicPageSetSettings Namespace ToSic.Cre8magic.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll WIP TODO: naming not final public interface IMagicPageSetSettings Properties Id Id of the settings, usually a random number TODO: UNCLEAR difference to MenuId - or could be the same? string? Id { get; } Property Value string MenuId Menu ID for use in JavaScript etc. Usually predefined OR a random number string MenuId { get; } Property Value string Variant string? Variant { get; } Property Value string"
  },
  "api/ToSic.Cre8magic.Pages.IMagicPageWithDesignWip.html": {
    "href": "api/ToSic.Cre8magic.Pages.IMagicPageWithDesignWip.html",
    "title": "Interface IMagicPageWithDesignWip | cre8magic",
    "keywords": "Interface IMagicPageWithDesignWip Namespace ToSic.Cre8magic.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll An extended magic page which includes design information. TODO: naming not final public interface IMagicPageWithDesignWip : IMagicPage, IMagicPageList Inherited Members IMagicPage.IsActive IMagicPage.IsHome IMagicPage.Link IMagicPage.Target IMagicPage.Breadcrumb IMagicPage.IsInBreadcrumb IMagicPage.OqtanePage IMagicPage.Id IMagicPage.ParentId IMagicPage.Path IMagicPage.Name IMagicPage.Url IMagicPage.IsClickable IMagicPage.Level IMagicPage.HasChildren IMagicPage.Parent IMagicPageList.Classes(string) IMagicPageList.Value(string) Properties MenuLevel int MenuLevel { get; } Property Value int"
  },
  "api/ToSic.Cre8magic.Pages.Internal.MagicPageFactory.html": {
    "href": "api/ToSic.Cre8magic.Pages.Internal.MagicPageFactory.html",
    "title": "Class MagicPageFactory | cre8magic",
    "keywords": "Class MagicPageFactory Namespace ToSic.Cre8magic.Pages.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Factory to create Magic Pages. This is necessary, because the pages need certain properties which require other services to be available. public class MagicPageFactory Inheritance object MagicPageFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicPageFactory(PageState, IEnumerable<IMagicPage>?, bool, LogRoot?) Factory to create Magic Pages. This is necessary, because the pages need certain properties which require other services to be available. public MagicPageFactory(PageState pageState, IEnumerable<IMagicPage>? restrictPages = null, bool ignorePermissions = false, LogRoot? logRoot = null) Parameters pageState PageState restrictPages IEnumerable<IMagicPage> ignorePermissions bool logRoot LogRoot Properties Current public IMagicPage Current { get; } Property Value IMagicPage Home public IMagicPage Home { get; } Property Value IMagicPage Methods ChildrenOf(int) public List<IMagicPage> ChildrenOf(int pageId) Parameters pageId int Returns List<IMagicPage> Create(Page) public IMagicPage Create(Page page) Parameters page Page Returns IMagicPage CreateOrNull(Page?) public IMagicPage? CreateOrNull(Page? page) Parameters page Page Returns IMagicPage Get(IEnumerable<Page>) public IEnumerable<IMagicPage> Get(IEnumerable<Page> pages) Parameters pages IEnumerable<Page> Returns IEnumerable<IMagicPage> Get(IEnumerable<int>) public IEnumerable<IMagicPage> Get(IEnumerable<int> ids) Parameters ids IEnumerable<int> Returns IEnumerable<IMagicPage> GetOrNull(int?) public IMagicPage? GetOrNull(int? id) Parameters id int? Returns IMagicPage PagesAll() List of all pages - even these which would currently not be shown in the menu. public IEnumerable<IMagicPage> PagesAll() Returns IEnumerable<IMagicPage> PagesCurrent() public IEnumerable<IMagicPage> PagesCurrent() Returns IEnumerable<IMagicPage> PagesUser() Pages in the menu according to Oqtane pre-processing Should be limited to pages which should be in the menu, visible and permissions ok. public IEnumerable<IMagicPage> PagesUser() Returns IEnumerable<IMagicPage>"
  },
  "api/ToSic.Cre8magic.Pages.Internal.PageStateProxy.html": {
    "href": "api/ToSic.Cre8magic.Pages.Internal.PageStateProxy.html",
    "title": "Class PageStateProxy | cre8magic",
    "keywords": "Class PageStateProxy Namespace ToSic.Cre8magic.Pages.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Wrapper for PageState, so that we can \"inject\" a debug state to a specific menu. This is just for internal development. Goal is that if we have a page with a lot of test-menus, we can provide this instead of the real PageState, and then we can stop in certain places - only for this menu. To do that, see the extension methods below. Usage ca.: if (PageState.IsDebug()) PageState.DoNothing(); // set breakpoint here public class PageStateProxy : PageState Inheritance object PageState PageStateProxy Inherited Members PageState.Alias PageState.Site PageState.Page PageState.Modules PageState.User PageState.Uri PageState.Route PageState.QueryString PageState.UrlParameters PageState.ModuleId PageState.Action PageState.EditMode PageState.LastSyncDate PageState.RenderMode PageState.Runtime PageState.VisitorId PageState.RemoteIPAddress PageState.ReturnUrl PageState.IsInternalNavigation PageState.RenderId PageState.Refresh PageState.Pages PageState.Languages object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PageStateProxyExtensions.DoNothing(PageState) PageStateProxyExtensions.IsDebug(PageState) PageStateProxyExtensions.ToProxy(PageState, bool) Constructors PageStateProxy(PageState, bool) public PageStateProxy(PageState pageState, bool debug = false) Parameters pageState PageState debug bool Properties Debug Debug state to check if we should debug this case. public bool Debug { get; } Property Value bool PageState Underlying PageState, in case we think the proxy is broken. public PageState PageState { get; } Property Value PageState"
  },
  "api/ToSic.Cre8magic.Pages.Internal.PageStateProxyExtensions.html": {
    "href": "api/ToSic.Cre8magic.Pages.Internal.PageStateProxyExtensions.html",
    "title": "Class PageStateProxyExtensions | cre8magic",
    "keywords": "Class PageStateProxyExtensions Namespace ToSic.Cre8magic.Pages.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class PageStateProxyExtensions Inheritance object PageStateProxyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DoNothing(PageState) public static void DoNothing(this PageState pageState) Parameters pageState PageState IsDebug(PageState) Check if we should debug this. public static bool IsDebug(this PageState pageState) Parameters pageState PageState Returns bool ToProxy(PageState, bool) Convert to proxy public static PageStateProxy ToProxy(this PageState pageState, bool debug = false) Parameters pageState PageState debug bool Returns PageStateProxy"
  },
  "api/ToSic.Cre8magic.Pages.Internal.html": {
    "href": "api/ToSic.Cre8magic.Pages.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Pages.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Pages.Internal Classes MagicPageFactory Factory to create Magic Pages. This is necessary, because the pages need certain properties which require other services to be available. PageStateProxy Wrapper for PageState, so that we can \"inject\" a debug state to a specific menu. This is just for internal development. Goal is that if we have a page with a lot of test-menus, we can provide this instead of the real PageState, and then we can stop in certain places - only for this menu. To do that, see the extension methods below. Usage ca.: if (PageState.IsDebug()) PageState.DoNothing(); // set breakpoint here PageStateProxyExtensions"
  },
  "api/ToSic.Cre8magic.Pages.MagicPageDesignerBase.html": {
    "href": "api/ToSic.Cre8magic.Pages.MagicPageDesignerBase.html",
    "title": "Class MagicPageDesignerBase | cre8magic",
    "keywords": "Class MagicPageDesignerBase Namespace ToSic.Cre8magic.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll Base class for page designers. Can be used as a foundation for creating your custom designers. This is a bit safer than just implementing the interface, as future enhancements would appear on this class so your implementation would work even on an upgrade. public class MagicPageDesignerBase : IMagicPageDesigner Inheritance object MagicPageDesignerBase Implements IMagicPageDesigner Derived MagicPageDesignerBasic Methods Classes(string, IMagicPage) Very basic implementation of the Classes generator. Will return null if not overriden. public virtual string? Classes(string tag, IMagicPage item) Parameters tag string item IMagicPage Returns string Value(string, IMagicPage) Very basic implementation of the Value generator. Will return null if not overriden. public virtual string? Value(string key, IMagicPage item) Parameters key string item IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Pages.MagicPageDesignerBasic.html": {
    "href": "api/ToSic.Cre8magic.Pages.MagicPageDesignerBasic.html",
    "title": "Class MagicPageDesignerBasic | cre8magic",
    "keywords": "Class MagicPageDesignerBasic Namespace ToSic.Cre8magic.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll Simple page designer for breadcrumbs or menus. If no lookups are specified, the Classes(...) and Data(...) methods will return empty strings. public class MagicPageDesignerBasic : MagicPageDesignerBase, IMagicPageDesigner Inheritance object MagicPageDesignerBase MagicPageDesignerBasic Implements IMagicPageDesigner Derived MagicBreadcrumbDesignerBs5 Remarks This is also a great candidate to inherit from, as you can specify the Lookups in the constructor. The methods are also virtual, so you can override them as needed. Fields All public static string All Field Value string Properties LookupClassActive The class to add to the active item. Note that it will be applied to all tags. For more advanced scenarios, you may want to override the Classes method. public string? LookupClassActive { get; init; } Property Value string LookupClasses Dictionary which is used to lookup what classes to provide for each tag. Can be specified when creating an instance of this class. We recommend to supply a case-insensitive dictionary. public IDictionary<string, string> LookupClasses { get; init; } Property Value IDictionary<string, string> LookupData Dictionary which is used to lookup what data/values to provide for each tag. Can be specified when creating an instance of this class. We recommend to supply a case-insensitive dictionary. public IDictionary<string, string> LookupData { get; init; } Property Value IDictionary<string, string> Methods Classes(string, IMagicPage) Very basic implementation of the Classes generator. Will combine classes from the ClassLookup and ClassActive properties. public override string? Classes(string tag, IMagicPage item) Parameters tag string item IMagicPage Returns string a space-separated list of classes, or null Value(string, IMagicPage) Very basic implementation of the Data/Value generator. Will use the LookupData to find the value for the key. public override string? Value(string key, IMagicPage item) Parameters key string item IMagicPage Returns string"
  },
  "api/ToSic.Cre8magic.Pages.MagicPageEditService.html": {
    "href": "api/ToSic.Cre8magic.Pages.MagicPageEditService.html",
    "title": "Class MagicPageEditService | cre8magic",
    "keywords": "Class MagicPageEditService Namespace ToSic.Cre8magic.Pages Assembly ToSic.Cre8magic.Client.Oqtane.dll Helper to remove the logic/code from the razor file. It's just meant to support the AdminButtons, without placing the logic code inside that. public class MagicPageEditService Inheritance object MagicPageEditService Constructors MagicPageEditService(IPageService, NavigationManager) Helper to remove the logic/code from the razor file. It's just meant to support the AdminButtons, without placing the logic code inside that. public MagicPageEditService(IPageService pageService, NavigationManager navigationManager) Parameters pageService IPageService navigationManager NavigationManager Methods ToggleEditMode(PageState) public Task ToggleEditMode(PageState pageState) Parameters pageState PageState Returns Task"
  },
  "api/ToSic.Cre8magic.Pages.html": {
    "href": "api/ToSic.Cre8magic.Pages.html",
    "title": "Namespace ToSic.Cre8magic.Pages | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Pages Classes MagicPageDesignerBase Base class for page designers. Can be used as a foundation for creating your custom designers. This is a bit safer than just implementing the interface, as future enhancements would appear on this class so your implementation would work even on an upgrade. MagicPageDesignerBasic Simple page designer for breadcrumbs or menus. If no lookups are specified, the Classes(...) and Data(...) methods will return empty strings. MagicPageEditService Helper to remove the logic/code from the razor file. It's just meant to support the AdminButtons, without placing the logic code inside that. Interfaces IMagicPage Magic Pages are smart wrappers around Oqtane Pages. They offer many benefits such as: Read-only properties (no accidental writing properties with unexpected side effects) Improved naming, e.g. .Id instead of .PageId Calculated properties such as Target (which becomes \"_blank\" for external links or null for normal links) Corrected values - e.g. the Link property will be javascript:void(0) if the page is not clickable Navigation properties such as Parent and Breadcrumb IMagicPageDesigner Interface for a designer of a magic page. Anything implementing this interface can be used as a designer for a magic page, providing custom classes and values when generating the HTML for the page. IMagicPageSetSettings WIP TODO: naming not final"
  },
  "api/ToSic.Cre8magic.Settings.Debug.MagicDebugSettings.html": {
    "href": "api/ToSic.Cre8magic.Settings.Debug.MagicDebugSettings.html",
    "title": "Class MagicDebugSettings | cre8magic",
    "keywords": "Class MagicDebugSettings Namespace ToSic.Cre8magic.Settings.Debug Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicDebugSettings : IEquatable<MagicDebugSettings> Inheritance object MagicDebugSettings Implements IEquatable<MagicDebugSettings> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicDebugSettings() public MagicDebugSettings() MagicDebugSettings(MagicDebugSettings?, MagicDebugSettings?) public MagicDebugSettings(MagicDebugSettings? priority, MagicDebugSettings? fallbackOriginal = null) Parameters priority MagicDebugSettings fallbackOriginal MagicDebugSettings Properties Admin public bool? Admin { get; init; } Property Value bool? Allowed public bool? Allowed { get; init; } Property Value bool? Anonymous public bool? Anonymous { get; init; } Property Value bool? Detailed public bool? Detailed { get; init; } Property Value bool? Methods GetState(object?, bool) public MagicDebugState GetState(object? target, bool isAdmin) Parameters target object isAdmin bool Returns MagicDebugState"
  },
  "api/ToSic.Cre8magic.Settings.Debug.MagicDebugState.html": {
    "href": "api/ToSic.Cre8magic.Settings.Debug.MagicDebugState.html",
    "title": "Class MagicDebugState | cre8magic",
    "keywords": "Class MagicDebugState Namespace ToSic.Cre8magic.Settings.Debug Assembly ToSic.Cre8magic.Client.Oqtane.dll Current debug state - show/enabled yes no public class MagicDebugState Inheritance object MagicDebugState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Show public bool Show { get; set; } Property Value bool"
  },
  "api/ToSic.Cre8magic.Settings.Debug.html": {
    "href": "api/ToSic.Cre8magic.Settings.Debug.html",
    "title": "Namespace ToSic.Cre8magic.Settings.Debug | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings.Debug Classes MagicDebugSettings MagicDebugState Current debug state - show/enabled yes no"
  },
  "api/ToSic.Cre8magic.Settings.DesignSetting.html": {
    "href": "api/ToSic.Cre8magic.Settings.DesignSetting.html",
    "title": "Class DesignSetting | cre8magic",
    "keywords": "Class DesignSetting Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Anything that can define what classes it should have. This is usually the base class for something that can also have more information. public record DesignSetting : ICanClone<DesignSetting>, IEquatable<DesignSetting> Inheritance object DesignSetting Implements ICanClone<DesignSetting> IEquatable<DesignSetting> Derived MagicBreadcrumbDesign MagicMenuDesignSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DesignSetting() public DesignSetting() DesignSetting(DesignSetting?, DesignSetting?) public DesignSetting(DesignSetting? priority, DesignSetting? fallback = null) Parameters priority DesignSetting fallback DesignSetting Properties Classes Classes which are applied to all the tags of this type public string? Classes { get; init; } Property Value string Id public string? Id { get; init; } Property Value string IsActive Classes to apply if this thing is active. For example, the current page or language. public PairOnOff? IsActive { get; init; } Property Value PairOnOff IsAdmin If a module is admin or not, usually just for containers public PairOnOff? IsAdmin { get; init; } Property Value PairOnOff IsPublished If something is published or not, usually just for Containers public PairOnOff? IsPublished { get; init; } Property Value PairOnOff Value Special key to get a value - for non-css configurations public string? Value { get; init; } Property Value string Methods CloneWith(DesignSetting?, bool) public DesignSetting CloneWith(DesignSetting? priority, bool forceCopy = false) Parameters priority DesignSetting forceCopy bool Returns DesignSetting"
  },
  "api/ToSic.Cre8magic.Settings.IContextWip.html": {
    "href": "api/ToSic.Cre8magic.Settings.IContextWip.html",
    "title": "Interface IContextWip | cre8magic",
    "keywords": "Interface IContextWip Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IContextWip Properties PageDesigner IMagicPageDesigner? PageDesigner { get; } Property Value IMagicPageDesigner PageFactory MagicPageFactory PageFactory { get; } Property Value MagicPageFactory"
  },
  "api/ToSic.Cre8magic.Settings.IMagicSettingsProvider.html": {
    "href": "api/ToSic.Cre8magic.Settings.IMagicSettingsProvider.html",
    "title": "Interface IMagicSettingsProvider | cre8magic",
    "keywords": "Interface IMagicSettingsProvider Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Provider to give settings. It is scoped, so anything added to it - typically in the Theme, will be available in all other components. public interface IMagicSettingsProvider Properties Analytics IMagicSettingsProviderSection<MagicAnalyticsSettings> Analytics { get; } Property Value IMagicSettingsProviderSection<MagicAnalyticsSettings> Breadcrumbs IMagicSettingsProviderSection<MagicBreadcrumbSettings> Breadcrumbs { get; } Property Value IMagicSettingsProviderSection<MagicBreadcrumbSettings> Containers IMagicSettingsProviderSection<MagicContainerSettings> Containers { get; } Property Value IMagicSettingsProviderSection<MagicContainerSettings> MenuDesigns IMagicSettingsProviderSection<MagicMenuDesignSettings> MenuDesigns { get; } Property Value IMagicSettingsProviderSection<MagicMenuDesignSettings> Themes IMagicSettingsProviderSection<MagicThemeSettings> Themes { get; } Property Value IMagicSettingsProviderSection<MagicThemeSettings> Methods Provide(MagicSettingsCatalog) IMagicSettingsProvider Provide(MagicSettingsCatalog catalog) Parameters catalog MagicSettingsCatalog Returns IMagicSettingsProvider Reset() void Reset()"
  },
  "api/ToSic.Cre8magic.Settings.IMagicSettingsProviderSection-1.html": {
    "href": "api/ToSic.Cre8magic.Settings.IMagicSettingsProviderSection-1.html",
    "title": "Interface IMagicSettingsProviderSection<TSettings> | cre8magic",
    "keywords": "Interface IMagicSettingsProviderSection<TSettings> Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll A provider for one type of settings. public interface IMagicSettingsProviderSection<TSettings> where TSettings : class Type Parameters TSettings Methods Provide(IDictionary<string, TSettings>) Configure to provide a dictionary of named values. IMagicSettingsProvider Provide(IDictionary<string, TSettings> dictionary) Parameters dictionary IDictionary<string, TSettings> Returns IMagicSettingsProvider Provide(string, TSettings) Configure to provide a named value. IMagicSettingsProvider Provide(string key, TSettings value) Parameters key string value TSettings Returns IMagicSettingsProvider SetDefault(TSettings) Configure to provide a value - either as the only result for all requests, or as a default. IMagicSettingsProvider SetDefault(TSettings value) Parameters value TSettings Returns IMagicSettingsProvider"
  },
  "api/ToSic.Cre8magic.Settings.IMagicSettingsService.html": {
    "href": "api/ToSic.Cre8magic.Settings.IMagicSettingsService.html",
    "title": "Interface IMagicSettingsService | cre8magic",
    "keywords": "Interface IMagicSettingsService Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicSettingsService Properties Debug MagicDebugSettings Debug { get; } Property Value MagicDebugSettings PageState WIP: PageState for this service PageState? PageState { get; } Property Value PageState Methods DebugState(PageState) MagicDebugState DebugState(PageState pageState) Parameters pageState PageState Returns MagicDebugState Setup(MagicThemePackage, string?) Set up the settings service with the package settings, layout name and body classes. This will result in other controls and services being able to use these settings. Otherwise, the settings are just defaulted to some standard values. IMagicSettingsService Setup(MagicThemePackage themePackage, string? layoutName) Parameters themePackage MagicThemePackage layoutName string Returns IMagicSettingsService UsePageState(PageState) IMagicSettingsService UsePageState(PageState pageState) Parameters pageState PageState Returns IMagicSettingsService"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Debug.IDebugSettings.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Debug.IDebugSettings.html",
    "title": "Interface IDebugSettings | cre8magic",
    "keywords": "Interface IDebugSettings Namespace ToSic.Cre8magic.Settings.Internal.Debug Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IDebugSettings Extension Methods IDebugSettingsExtensions.UseCatalog<T>(T, MagicSettingsCatalog) IDebugSettingsExtensions.UseLanguageSettings<T>(T, MagicLanguageSettingsData)"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Debug.IDebugSettingsExtensions.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Debug.IDebugSettingsExtensions.html",
    "title": "Class IDebugSettingsExtensions | cre8magic",
    "keywords": "Class IDebugSettingsExtensions Namespace ToSic.Cre8magic.Settings.Internal.Debug Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class IDebugSettingsExtensions Inheritance object IDebugSettingsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseCatalog<T>(T, MagicSettingsCatalog) public static T UseCatalog<T>(this T settings, MagicSettingsCatalog catalog) where T : IDebugSettings Parameters settings T catalog MagicSettingsCatalog Returns T Type Parameters T UseLanguageSettings<T>(T, MagicLanguageSettingsData) public static T UseLanguageSettings<T>(this T settings, MagicLanguageSettingsData languageSettings) where T : IDebugSettings Parameters settings T languageSettings MagicLanguageSettingsData Returns T Type Parameters T"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Debug.MagicDebugSettings.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Debug.MagicDebugSettings.html",
    "title": "Class MagicDebugSettings | cre8magic",
    "keywords": "Class MagicDebugSettings Namespace ToSic.Cre8magic.Settings.Internal.Debug Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicDebugSettings : IEquatable<MagicDebugSettings> Inheritance object MagicDebugSettings Implements IEquatable<MagicDebugSettings> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicDebugSettings() public MagicDebugSettings() MagicDebugSettings(MagicDebugSettings?, MagicDebugSettings?) public MagicDebugSettings(MagicDebugSettings? priority, MagicDebugSettings? fallbackOriginal = null) Parameters priority MagicDebugSettings fallbackOriginal MagicDebugSettings Properties Admin public bool? Admin { get; init; } Property Value bool? Allowed public bool? Allowed { get; init; } Property Value bool? Anonymous public bool? Anonymous { get; init; } Property Value bool? Detailed public bool? Detailed { get; init; } Property Value bool? Methods GetState(object?, bool) public MagicDebugState GetState(object? target, bool isAdmin) Parameters target object isAdmin bool Returns MagicDebugState"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Debug.MagicDebugState.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Debug.MagicDebugState.html",
    "title": "Class MagicDebugState | cre8magic",
    "keywords": "Class MagicDebugState Namespace ToSic.Cre8magic.Settings.Internal.Debug Assembly ToSic.Cre8magic.Client.Oqtane.dll Current debug state - show/enabled yes no public class MagicDebugState Inheritance object MagicDebugState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Show public bool Show { get; set; } Property Value bool"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Debug.MagicSettingsDebugExtensions.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Debug.MagicSettingsDebugExtensions.html",
    "title": "Class MagicSettingsDebugExtensions | cre8magic",
    "keywords": "Class MagicSettingsDebugExtensions Namespace ToSic.Cre8magic.Settings.Internal.Debug Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class MagicSettingsDebugExtensions Inheritance object MagicSettingsDebugExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NoCachingForDebug<TDebug>(IMagicSettingsService, Func<IMagicSettingsService, TDebug>) public static TDebug NoCachingForDebug<TDebug>(this IMagicSettingsService settings, Func<IMagicSettingsService, TDebug> func) Parameters settings IMagicSettingsService func Func<IMagicSettingsService, TDebug> Returns TDebug Type Parameters TDebug"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Debug.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Debug.html",
    "title": "Namespace ToSic.Cre8magic.Settings.Internal.Debug | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings.Internal.Debug Classes IDebugSettingsExtensions MagicDebugSettings MagicDebugState Current debug state - show/enabled yes no MagicSettingsDebugExtensions Interfaces IDebugSettings"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Experimental.IMagicSettingsContext.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Experimental.IMagicSettingsContext.html",
    "title": "Interface IMagicSettingsContext | cre8magic",
    "keywords": "Interface IMagicSettingsContext Namespace ToSic.Cre8magic.Settings.Internal.Experimental Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicSettingsContext Properties FallbackToDefault bool FallbackToDefault { get; } Property Value bool ModuleState The Module State, which could be used to deliver alternate settings depending on the module. Can be null, if the settings are not related to a module. For example, Login Settings. Module? ModuleState { get; } Property Value Module Name Name of the settings - in case there are named settings to retrieve. Can be null, for example when the default settings are requested. string? Name { get; } Property Value string PageState The Page State, which could be used to deliver alternate settings depending on the page. PageState? PageState { get; } Property Value PageState Prefix string? Prefix { get; } Property Value string"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Experimental.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Experimental.html",
    "title": "Namespace ToSic.Cre8magic.Settings.Internal.Experimental | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings.Internal.Experimental Interfaces IMagicSettingsContext"
  },
  "api/ToSic.Cre8magic.Settings.Internal.ICanClone-1.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.ICanClone-1.html",
    "title": "Interface ICanClone<T> | cre8magic",
    "keywords": "Interface ICanClone<T> Namespace ToSic.Cre8magic.Settings.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface ICanClone<T> Type Parameters T Methods CloneUnder(T?, bool) T CloneUnder(T? priority, bool forceCopy = false) Parameters priority T forceCopy bool Returns T"
  },
  "api/ToSic.Cre8magic.Settings.Internal.IHasSettingsExceptions.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.IHasSettingsExceptions.html",
    "title": "Interface IHasSettingsExceptions | cre8magic",
    "keywords": "Interface IHasSettingsExceptions Namespace ToSic.Cre8magic.Settings.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IHasSettingsExceptions Properties Exceptions List<Exception> Exceptions { get; } Property Value List<Exception> HasExceptions bool HasExceptions { get; } Property Value bool"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Journal.DataWithJournal-1.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Journal.DataWithJournal-1.html",
    "title": "Class DataWithJournal<T> | cre8magic",
    "keywords": "Class DataWithJournal<T> Namespace ToSic.Cre8magic.Settings.Internal.Journal Assembly ToSic.Cre8magic.Client.Oqtane.dll public record DataWithJournal<T> : IEquatable<DataWithJournal<T>> Type Parameters T Inheritance object DataWithJournal<T> Implements IEquatable<DataWithJournal<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataWithJournal(T, Journal) public DataWithJournal(T Data, Journal Journal) Parameters Data T Journal Journal Properties Data public T Data { get; init; } Property Value T Journal public Journal Journal { get; init; } Property Value Journal"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Journal.Journal.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Journal.Journal.html",
    "title": "Class Journal | cre8magic",
    "keywords": "Class Journal Namespace ToSic.Cre8magic.Settings.Internal.Journal Assembly ToSic.Cre8magic.Client.Oqtane.dll public record Journal : IEquatable<Journal> Inheritance object Journal Implements IEquatable<Journal> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Journal() public Journal() Journal(List<string>, List<Exception>) public Journal(List<string> Messages, List<Exception> Exceptions) Parameters Messages List<string> Exceptions List<Exception> Properties Exceptions public List<Exception> Exceptions { get; init; } Property Value List<Exception> Messages public List<string> Messages { get; init; } Property Value List<string> Methods With(List<Exception>) public Journal With(List<Exception> exceptions) Parameters exceptions List<Exception> Returns Journal With(List<string>) public Journal With(List<string> messages) Parameters messages List<string> Returns Journal With(Exception) public Journal With(Exception exception) Parameters exception Exception Returns Journal With(string) public Journal With(string message) Parameters message string Returns Journal With(Journal) public Journal With(Journal journal) Parameters journal Journal Returns Journal"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Journal.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Journal.html",
    "title": "Namespace ToSic.Cre8magic.Settings.Internal.Journal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings.Internal.Journal Classes DataWithJournal<T> Journal"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Json.DesignSettingsJsonConverter-1.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Json.DesignSettingsJsonConverter-1.html",
    "title": "Class DesignSettingsJsonConverter<T> | cre8magic",
    "keywords": "Class DesignSettingsJsonConverter<T> Namespace ToSic.Cre8magic.Settings.Internal.Json Assembly ToSic.Cre8magic.Client.Oqtane.dll Important: NEVER use this on a public class DesignSettingsJsonConverter<T> : JsonConverterBase<T> where T : MagicDesignSettingsPart, new() Type Parameters T Inheritance object JsonConverter JsonConverter<T> JsonConverterBase<T> DesignSettingsJsonConverter<T> Inherited Members JsonConverterBase<T>.Logger JsonConverterBase<T>.GetOptionsWithoutThisConverter(JsonSerializerOptions) JsonConverterBase<T>.ConvertObject(JsonObject, JsonSerializerOptions) JsonConverter<T>.CanConvert(Type) JsonConverter<T>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.WriteAsPropertyName(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.HandleNull JsonConverter<T>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNew(ILogger) public static DesignSettingsJsonConverter<T> GetNew(ILogger logger) Parameters logger ILogger Returns DesignSettingsJsonConverter<T> Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type T. public override T? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns T The converted value. Write(Utf8JsonWriter, T?, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, T? pair, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. pair T options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ToSic.Cre8magic.Settings.Internal.Json.JsonConverterBase-1.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Json.JsonConverterBase-1.html",
    "title": "Class JsonConverterBase<T> | cre8magic",
    "keywords": "Class JsonConverterBase<T> Namespace ToSic.Cre8magic.Settings.Internal.Json Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class JsonConverterBase<T> : JsonConverter<T> Type Parameters T Inheritance object JsonConverter JsonConverter<T> JsonConverterBase<T> Derived DesignSettingsJsonConverter<T> PairOnOffJsonConverter ThemePartJsonConverter Inherited Members JsonConverter<T>.CanConvert(Type) JsonConverter<T>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.Write(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.WriteAsPropertyName(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.HandleNull JsonConverter<T>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonConverterBase(ILogger) protected JsonConverterBase(ILogger logger) Parameters logger ILogger Properties Logger public ILogger Logger { get; } Property Value ILogger Methods ConvertObject(JsonObject, JsonSerializerOptions) protected T? ConvertObject(JsonObject jsonObject, JsonSerializerOptions options) Parameters jsonObject JsonObject options JsonSerializerOptions Returns T GetOptionsWithoutThisConverter(JsonSerializerOptions) protected JsonSerializerOptions GetOptionsWithoutThisConverter(JsonSerializerOptions options) Parameters options JsonSerializerOptions Returns JsonSerializerOptions"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Json.MagicSettingsCatalogLoaderJson.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Json.MagicSettingsCatalogLoaderJson.html",
    "title": "Class MagicSettingsCatalogLoaderJson | cre8magic",
    "keywords": "Class MagicSettingsCatalogLoaderJson Namespace ToSic.Cre8magic.Settings.Internal.Json Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicSettingsCatalogLoaderJson Inheritance object MagicSettingsCatalogLoaderJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicSettingsCatalogLoaderJson(ILogger<MagicSettingsCatalogLoaderJson>) public MagicSettingsCatalogLoaderJson(ILogger<MagicSettingsCatalogLoaderJson> logger) Parameters logger ILogger<MagicSettingsCatalogLoaderJson> Properties Logger public ILogger<MagicSettingsCatalogLoaderJson> Logger { get; } Property Value ILogger<MagicSettingsCatalogLoaderJson> Methods LoadJson(MagicPackageSettings) public DataWithJournal<MagicSettingsCatalog> LoadJson(MagicPackageSettings themeConfig) Parameters themeConfig MagicPackageSettings Returns DataWithJournal<MagicSettingsCatalog>"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Json.PairOnOffJsonConverter.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Json.PairOnOffJsonConverter.html",
    "title": "Class PairOnOffJsonConverter | cre8magic",
    "keywords": "Class PairOnOffJsonConverter Namespace ToSic.Cre8magic.Settings.Internal.Json Assembly ToSic.Cre8magic.Client.Oqtane.dll Important: NEVER use this on a public class PairOnOffJsonConverter : JsonConverterBase<PairOnOff> Inheritance object JsonConverter JsonConverter<PairOnOff> JsonConverterBase<PairOnOff> PairOnOffJsonConverter Inherited Members JsonConverterBase<PairOnOff>.Logger JsonConverterBase<PairOnOff>.GetOptionsWithoutThisConverter(JsonSerializerOptions) JsonConverterBase<PairOnOff>.ConvertObject(JsonObject, JsonSerializerOptions) JsonConverter<PairOnOff>.CanConvert(Type) JsonConverter<PairOnOff>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<PairOnOff>.WriteAsPropertyName(Utf8JsonWriter, PairOnOff, JsonSerializerOptions) JsonConverter<PairOnOff>.HandleNull JsonConverter<PairOnOff>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNew(ILogger) public static PairOnOffJsonConverter GetNew(ILogger logger) Parameters logger ILogger Returns PairOnOffJsonConverter Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type PairOnOff. public override PairOnOff? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns PairOnOff The converted value. Write(Utf8JsonWriter, PairOnOff?, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, PairOnOff? pair, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. pair PairOnOff options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ToSic.Cre8magic.Settings.Internal.Json.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Json.html",
    "title": "Namespace ToSic.Cre8magic.Settings.Internal.Json | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings.Internal.Json Classes DesignSettingsJsonConverter<T> Important: NEVER use this on a JsonConverterBase<T> MagicSettingsCatalogLoaderJson PairOnOffJsonConverter Important: NEVER use this on a"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Logging.SettingsException.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Logging.SettingsException.html",
    "title": "Class SettingsException | cre8magic",
    "keywords": "Class SettingsException Namespace ToSic.Cre8magic.Settings.Internal.Logging Assembly ToSic.Cre8magic.Client.Oqtane.dll public class SettingsException : Exception, ISerializable Inheritance object Exception SettingsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SettingsException(string) public SettingsException(string message) Parameters message string"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Logging.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Logging.html",
    "title": "Namespace ToSic.Cre8magic.Settings.Internal.Logging | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings.Internal.Logging Classes SettingsException"
  },
  "api/ToSic.Cre8magic.Settings.Internal.MagicSettingsCatalogsLoader.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.MagicSettingsCatalogsLoader.html",
    "title": "Class MagicSettingsCatalogsLoader | cre8magic",
    "keywords": "Class MagicSettingsCatalogsLoader Namespace ToSic.Cre8magic.Settings.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Helper to load all the magic settings which could be used by the IMagicSettingsService. It requires that there are MagicPackageSettings which were usually configured in the theme, and then passed to the SettingsService on Setup. public class MagicSettingsCatalogsLoader Inheritance object MagicSettingsCatalogsLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicSettingsCatalogsLoader(IEnumerable<IMagicSettingsSource>) Helper to load all the magic settings which could be used by the IMagicSettingsService. It requires that there are MagicPackageSettings which were usually configured in the theme, and then passed to the SettingsService on Setup. public MagicSettingsCatalogsLoader(IEnumerable<IMagicSettingsSource> sources) Parameters sources IEnumerable<IMagicSettingsSource> Methods Catalogs(MagicPackageSettings, bool) public List<DataWithJournal<MagicSettingsCatalog>> Catalogs(MagicPackageSettings packageSettings, bool cache = true) Parameters packageSettings MagicPackageSettings cache bool Returns List<DataWithJournal<MagicSettingsCatalog>>"
  },
  "api/ToSic.Cre8magic.Settings.Internal.MagicSettingsLoader.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.MagicSettingsLoader.html",
    "title": "Class MagicSettingsLoader | cre8magic",
    "keywords": "Class MagicSettingsLoader Namespace ToSic.Cre8magic.Settings.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Helper to load all the magic settings which could be used by the IMagicSettingsService. It requires that there are MagicPackageSettings which were usually configured in the theme, and then passed to the SettingsService on Setup. public class MagicSettingsLoader : IHasSettingsExceptions Inheritance object MagicSettingsLoader Implements IHasSettingsExceptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicSettingsLoader(MagicSettingsJsonService, ILogger<MagicSettingsLoader>) Helper to load all the magic settings which could be used by the IMagicSettingsService. It requires that there are MagicPackageSettings which were usually configured in the theme, and then passed to the SettingsService on Setup. public MagicSettingsLoader(MagicSettingsJsonService jsonService, ILogger<MagicSettingsLoader> logger) Parameters jsonService MagicSettingsJsonService logger ILogger<MagicSettingsLoader> Properties DebugSettings public MagicDebugSettings? DebugSettings { get; } Property Value MagicDebugSettings Exceptions public List<Exception> Exceptions { get; } Property Value List<Exception> Methods Setup(MagicPackageSettings) public MagicSettingsLoader Setup(MagicPackageSettings packageSettings) Parameters packageSettings MagicPackageSettings Returns MagicSettingsLoader"
  },
  "api/ToSic.Cre8magic.Settings.Internal.SettingsException.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.SettingsException.html",
    "title": "Class SettingsException | cre8magic",
    "keywords": "Class SettingsException Namespace ToSic.Cre8magic.Settings.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public class SettingsException : Exception, ISerializable Inheritance object Exception SettingsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SettingsException(string) public SettingsException(string message) Parameters message string"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Sources.IMagicSettingsSource.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Sources.IMagicSettingsSource.html",
    "title": "Interface IMagicSettingsSource | cre8magic",
    "keywords": "Interface IMagicSettingsSource Namespace ToSic.Cre8magic.Settings.Internal.Sources Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicSettingsSource Properties Priority Priority, high number means higher priority int Priority { get; } Property Value int Methods Catalog(MagicPackageSettings) List<DataWithJournal<MagicSettingsCatalog>> Catalog(MagicPackageSettings packageSettings) Parameters packageSettings MagicPackageSettings Returns List<DataWithJournal<MagicSettingsCatalog>>"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Sources.MagicSettingsSourceJson.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Sources.MagicSettingsSourceJson.html",
    "title": "Class MagicSettingsSourceJson | cre8magic",
    "keywords": "Class MagicSettingsSourceJson Namespace ToSic.Cre8magic.Settings.Internal.Sources Assembly ToSic.Cre8magic.Client.Oqtane.dll Helper to load all the magic settings which could be used by the IMagicSettingsService. It requires that there are MagicPackageSettings which were usually configured in the theme, and then passed to the SettingsService on Setup. public class MagicSettingsSourceJson : IMagicSettingsSource Inheritance object MagicSettingsSourceJson Implements IMagicSettingsSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicSettingsSourceJson(MagicSettingsCatalogLoaderJson) Helper to load all the magic settings which could be used by the IMagicSettingsService. It requires that there are MagicPackageSettings which were usually configured in the theme, and then passed to the SettingsService on Setup. public MagicSettingsSourceJson(MagicSettingsCatalogLoaderJson catalogLoaderJson) Parameters catalogLoaderJson MagicSettingsCatalogLoaderJson Properties Priority Priority, high number means higher priority public int Priority { get; } Property Value int Methods Catalog(MagicPackageSettings) public List<DataWithJournal<MagicSettingsCatalog>> Catalog(MagicPackageSettings packageSettings) Parameters packageSettings MagicPackageSettings Returns List<DataWithJournal<MagicSettingsCatalog>>"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Sources.MagicSettingsSourcePackageDefaults.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Sources.MagicSettingsSourcePackageDefaults.html",
    "title": "Class MagicSettingsSourcePackageDefaults | cre8magic",
    "keywords": "Class MagicSettingsSourcePackageDefaults Namespace ToSic.Cre8magic.Settings.Internal.Sources Assembly ToSic.Cre8magic.Client.Oqtane.dll Load the package settings defaults. Fairly trivial, but the goal is that all sources implement the same interface. public class MagicSettingsSourcePackageDefaults : IMagicSettingsSource Inheritance object MagicSettingsSourcePackageDefaults Implements IMagicSettingsSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Priority Priority, high number means higher priority public int Priority { get; } Property Value int Methods Catalog(MagicPackageSettings) public List<DataWithJournal<MagicSettingsCatalog>> Catalog(MagicPackageSettings packageSettings) Parameters packageSettings MagicPackageSettings Returns List<DataWithJournal<MagicSettingsCatalog>>"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Sources.TestTestTest.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Sources.TestTestTest.html",
    "title": "Class TestTestTest | cre8magic",
    "keywords": "Class TestTestTest Namespace ToSic.Cre8magic.Settings.Internal.Sources Assembly ToSic.Cre8magic.Client.Oqtane.dll public class TestTestTest Inheritance object TestTestTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ToSic.Cre8magic.Settings.Internal.Sources.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.Sources.html",
    "title": "Namespace ToSic.Cre8magic.Settings.Internal.Sources | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings.Internal.Sources Classes MagicSettingsSourceJson Helper to load all the magic settings which could be used by the IMagicSettingsService. It requires that there are MagicPackageSettings which were usually configured in the theme, and then passed to the SettingsService on Setup. MagicSettingsSourcePackageDefaults Load the package settings defaults. Fairly trivial, but the goal is that all sources implement the same interface. TestTestTest Interfaces IMagicSettingsSource"
  },
  "api/ToSic.Cre8magic.Settings.Internal.html": {
    "href": "api/ToSic.Cre8magic.Settings.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Settings.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings.Internal Namespaces ToSic.Cre8magic.Settings.Internal.Debug ToSic.Cre8magic.Settings.Internal.Experimental ToSic.Cre8magic.Settings.Internal.Journal ToSic.Cre8magic.Settings.Internal.Json ToSic.Cre8magic.Settings.Internal.Logging ToSic.Cre8magic.Settings.Internal.Sources Classes MagicSettingsCatalogsLoader Helper to load all the magic settings which could be used by the IMagicSettingsService. It requires that there are MagicPackageSettings which were usually configured in the theme, and then passed to the SettingsService on Setup. Interfaces ICanClone<T>"
  },
  "api/ToSic.Cre8magic.Settings.Json.DesignSettingsJsonConverter-1.html": {
    "href": "api/ToSic.Cre8magic.Settings.Json.DesignSettingsJsonConverter-1.html",
    "title": "Class DesignSettingsJsonConverter<T> | cre8magic",
    "keywords": "Class DesignSettingsJsonConverter<T> Namespace ToSic.Cre8magic.Settings.Json Assembly ToSic.Cre8magic.Client.Oqtane.dll Important: NEVER use this on a public class DesignSettingsJsonConverter<T> : JsonConverterBase<T> where T : DesignSetting, new() Type Parameters T Inheritance object JsonConverter JsonConverter<T> JsonConverterBase<T> DesignSettingsJsonConverter<T> Inherited Members JsonConverterBase<T>.Logger JsonConverterBase<T>.GetOptionsWithoutThisConverter(JsonSerializerOptions) JsonConverterBase<T>.ConvertObject(JsonObject, JsonSerializerOptions) JsonConverter<T>.CanConvert(Type) JsonConverter<T>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.WriteAsPropertyName(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.HandleNull JsonConverter<T>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNew(ILogger) public static DesignSettingsJsonConverter<T> GetNew(ILogger logger) Parameters logger ILogger Returns DesignSettingsJsonConverter<T> Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type T. public override T? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns T The converted value. Write(Utf8JsonWriter, T?, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, T? pair, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. pair T options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ToSic.Cre8magic.Settings.Json.JsonConverterBase-1.html": {
    "href": "api/ToSic.Cre8magic.Settings.Json.JsonConverterBase-1.html",
    "title": "Class JsonConverterBase<T> | cre8magic",
    "keywords": "Class JsonConverterBase<T> Namespace ToSic.Cre8magic.Settings.Json Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract class JsonConverterBase<T> : JsonConverter<T> Type Parameters T Inheritance object JsonConverter JsonConverter<T> JsonConverterBase<T> Derived ThemePartJsonConverter DesignSettingsJsonConverter<T> PairOnOffJsonConverter Inherited Members JsonConverter<T>.CanConvert(Type) JsonConverter<T>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.Write(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.WriteAsPropertyName(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.HandleNull JsonConverter<T>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonConverterBase(ILogger) protected JsonConverterBase(ILogger logger) Parameters logger ILogger Properties Logger public ILogger Logger { get; } Property Value ILogger Methods ConvertObject(JsonObject, JsonSerializerOptions) protected T? ConvertObject(JsonObject jsonObject, JsonSerializerOptions options) Parameters jsonObject JsonObject options JsonSerializerOptions Returns T GetOptionsWithoutThisConverter(JsonSerializerOptions) protected JsonSerializerOptions GetOptionsWithoutThisConverter(JsonSerializerOptions options) Parameters options JsonSerializerOptions Returns JsonSerializerOptions"
  },
  "api/ToSic.Cre8magic.Settings.Json.MagicSettingsJsonService.html": {
    "href": "api/ToSic.Cre8magic.Settings.Json.MagicSettingsJsonService.html",
    "title": "Class MagicSettingsJsonService | cre8magic",
    "keywords": "Class MagicSettingsJsonService Namespace ToSic.Cre8magic.Settings.Json Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicSettingsJsonService : IHasSettingsExceptions Inheritance object MagicSettingsJsonService Implements IHasSettingsExceptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicSettingsJsonService(ILogger<MagicSettingsJsonService>) public MagicSettingsJsonService(ILogger<MagicSettingsJsonService> logger) Parameters logger ILogger<MagicSettingsJsonService> Properties Exceptions public List<Exception> Exceptions { get; } Property Value List<Exception> Logger public ILogger<MagicSettingsJsonService> Logger { get; } Property Value ILogger<MagicSettingsJsonService> Methods LoadJson(MagicPackageSettings) public MagicSettingsCatalog LoadJson(MagicPackageSettings themeConfig) Parameters themeConfig MagicPackageSettings Returns MagicSettingsCatalog"
  },
  "api/ToSic.Cre8magic.Settings.Json.PairOnOffJsonConverter.html": {
    "href": "api/ToSic.Cre8magic.Settings.Json.PairOnOffJsonConverter.html",
    "title": "Class PairOnOffJsonConverter | cre8magic",
    "keywords": "Class PairOnOffJsonConverter Namespace ToSic.Cre8magic.Settings.Json Assembly ToSic.Cre8magic.Client.Oqtane.dll Important: NEVER use this on a public class PairOnOffJsonConverter : JsonConverterBase<PairOnOff> Inheritance object JsonConverter JsonConverter<PairOnOff> JsonConverterBase<PairOnOff> PairOnOffJsonConverter Inherited Members JsonConverterBase<PairOnOff>.Logger JsonConverterBase<PairOnOff>.GetOptionsWithoutThisConverter(JsonSerializerOptions) JsonConverterBase<PairOnOff>.ConvertObject(JsonObject, JsonSerializerOptions) JsonConverter<PairOnOff>.CanConvert(Type) JsonConverter<PairOnOff>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<PairOnOff>.WriteAsPropertyName(Utf8JsonWriter, PairOnOff, JsonSerializerOptions) JsonConverter<PairOnOff>.HandleNull JsonConverter<PairOnOff>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNew(ILogger) public static PairOnOffJsonConverter GetNew(ILogger logger) Parameters logger ILogger Returns PairOnOffJsonConverter Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type PairOnOff. public override PairOnOff? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns PairOnOff The converted value. Write(Utf8JsonWriter, PairOnOff?, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, PairOnOff? pair, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. pair PairOnOff options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ToSic.Cre8magic.Settings.Json.html": {
    "href": "api/ToSic.Cre8magic.Settings.Json.html",
    "title": "Namespace ToSic.Cre8magic.Settings.Json | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings.Json Classes DesignSettingsJsonConverter<T> Important: NEVER use this on a JsonConverterBase<T> MagicSettingsJsonService PairOnOffJsonConverter Important: NEVER use this on a"
  },
  "api/ToSic.Cre8magic.Settings.MagicAllSettings.html": {
    "href": "api/ToSic.Cre8magic.Settings.MagicAllSettings.html",
    "title": "Class MagicAllSettings | cre8magic",
    "keywords": "Class MagicAllSettings Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll All the current \"global\" settings of a page, which apply to anything on the page. public record MagicAllSettings : IHasSettingsExceptions, ICanClone<MagicAllSettings>, IEquatable<MagicAllSettings> Inheritance object MagicAllSettings Implements IHasSettingsExceptions ICanClone<MagicAllSettings> IEquatable<MagicAllSettings> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Analytics public MagicAnalyticsSettings Analytics { get; } Property Value MagicAnalyticsSettings Debug public MagicDebugState Debug { get; } Property Value MagicDebugState DebugSources public Dictionary<string, string> DebugSources { get; } Property Value Dictionary<string, string> Exceptions public List<Exception> Exceptions { get; } Property Value List<Exception> Languages public MagicLanguagesSettings Languages { get; } Property Value MagicLanguagesSettings MagicContext public string MagicContext { get; set; } Property Value string Name public string Name { get; } Property Value string Service [JsonIgnore] public IMagicSettingsService Service { get; } Property Value IMagicSettingsService Theme public MagicThemeSettings Theme { get; } Property Value MagicThemeSettings ThemeDesign public MagicThemeDesignSettings ThemeDesign { get; } Property Value MagicThemeDesignSettings Methods CloneWith(MagicAllSettings?, bool) public MagicAllSettings CloneWith(MagicAllSettings? priority, bool forceCopy = false) Parameters priority MagicAllSettings forceCopy bool Returns MagicAllSettings DebugState(object?) public MagicDebugState DebugState(object? target) Parameters target object Returns MagicDebugState Show(string) Determine if we should show a specific part public bool Show(string name) Parameters name string Returns bool"
  },
  "api/ToSic.Cre8magic.Settings.MagicDebugSettings.html": {
    "href": "api/ToSic.Cre8magic.Settings.MagicDebugSettings.html",
    "title": "Class MagicDebugSettings | cre8magic",
    "keywords": "Class MagicDebugSettings Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Debug settings to help during development. These settings can also be loaded from the configuration. This allows you to do things like enable temporarily for admins, without restarting/recompiling anything. public record MagicDebugSettings Inheritance object MagicDebugSettings Constructors MagicDebugSettings(bool) Create debug settings which set everything to the specified state. This is mainly for quick interventions, so you can just do new(true) to enable everything. public MagicDebugSettings(bool enable) Parameters enable bool Properties Admin public bool? Admin { get; init; } Property Value bool? Allowed public bool? Allowed { get; init; } Property Value bool? Anonymous public bool? Anonymous { get; init; } Property Value bool? Detailed public bool? Detailed { get; init; } Property Value bool? Methods GetState(object?, bool) public MagicDebugState GetState(object? target, bool isAdmin) Parameters target object isAdmin bool Returns MagicDebugState"
  },
  "api/ToSic.Cre8magic.Settings.MagicDesignSettingsPart.html": {
    "href": "api/ToSic.Cre8magic.Settings.MagicDesignSettingsPart.html",
    "title": "Class MagicDesignSettingsPart | cre8magic",
    "keywords": "Class MagicDesignSettingsPart Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Anything that can define what classes it should have. This is usually the base class for something that can also have more information. public record MagicDesignSettingsPart Inheritance object MagicDesignSettingsPart Derived MagicBreadcrumbDesignSettingsPart MagicMenuDesignSettingsPart Properties Classes Classes which are applied to all the tags of this type public string? Classes { get; init; } Property Value string Id public string? Id { get; init; } Property Value string IsActive Classes to apply if this thing is active. For example, the current page or language. public MagicSettingOnOff? IsActive { get; init; } Property Value MagicSettingOnOff IsAdmin If a module is admin or not, usually just for containers public MagicSettingOnOff? IsAdmin { get; init; } Property Value MagicSettingOnOff IsPublished If something is published or not, usually just for Containers public MagicSettingOnOff? IsPublished { get; init; } Property Value MagicSettingOnOff Value Special key to get a value - for non-css settings public string? Value { get; init; } Property Value string"
  },
  "api/ToSic.Cre8magic.Settings.MagicPackageSettings.html": {
    "href": "api/ToSic.Cre8magic.Settings.MagicPackageSettings.html",
    "title": "Class MagicPackageSettings | cre8magic",
    "keywords": "Class MagicPackageSettings Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Settings for a Theme Package. It contains things like location of assets configuration for various parts like CSS public record MagicPackageSettings Inheritance object MagicPackageSettings Properties Defaults All kinds of settings for the layout, how it should be etc. Should usually only serve as backup in case the JSON fails. public MagicSettingsCatalog? Defaults { get; init; } Property Value MagicSettingsCatalog PackageName public string PackageName { get; init; } Property Value string SettingsJsonFile public string SettingsJsonFile { get; init; } Property Value string Url public string Url { get; init; } Property Value string WwwRoot public string WwwRoot { get; init; } Property Value string"
  },
  "api/ToSic.Cre8magic.Settings.MagicSettingOnOff.html": {
    "href": "api/ToSic.Cre8magic.Settings.MagicSettingOnOff.html",
    "title": "Class MagicSettingOnOff | cre8magic",
    "keywords": "Class MagicSettingOnOff Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Special Setting containing a value to be used when a state is on or off. Typically used to specify strings to place in classes when something: is active is home etc. public class MagicSettingOnOff Inheritance object MagicSettingOnOff Extension Methods PairOnOffExtensions.Get(MagicSettingOnOff?, bool?) Constructors MagicSettingOnOff(string?, string?) public MagicSettingOnOff(string? on, string? off = null) Parameters on string off string Properties Off Value / Class to add if the setting is off public string? Off { get; init; } Property Value string On Value / Class to add if the setting is on public string? On { get; init; } Property Value string"
  },
  "api/ToSic.Cre8magic.Settings.MagicSettingsBase.html": {
    "href": "api/ToSic.Cre8magic.Settings.MagicSettingsBase.html",
    "title": "Class MagicSettingsBase | cre8magic",
    "keywords": "Class MagicSettingsBase Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Internal intermediate base class containing all kinds of settings which all settings share. public abstract record MagicSettingsBase : SettingsWithInherit Inheritance object SettingsWithInherit MagicSettingsBase Derived MagicAnalyticsSettings MagicBreadcrumbSettings MagicContainerSettings MagicLanguageSettings MagicMenuSettings MagicPageContextSettings MagicThemeSettings MagicUserLoginSettings Inherited Members SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Properties Debug Debug settings for anything that can configure show/hide of debug public MagicDebugSettings? Debug { get; init; } Property Value MagicDebugSettings DesignName Name to identify which design settings to load. [JsonIgnore] public string? DesignName { get; init; } Property Value string PageState The PageState which is needed for doing everything. It can be provided in the settings, or it must be provided in the theme using UsePageState(PageState). [JsonIgnore] public virtual PageState? PageState { get; init; } Property Value PageState PartName Name to identify this part. This information is used to load settings (menu settings and design settings) [JsonIgnore] public string? PartName { get; init; } Property Value string SettingsName Name to identify which settings to load. This is used before looking in the Theme Part. If not specified, will check the theme part for a name it provides, or use the theme-part name to find the settings. [JsonIgnore] public string? SettingsName { get; init; } Property Value string"
  },
  "api/ToSic.Cre8magic.Settings.MagicSettingsCatalog.html": {
    "href": "api/ToSic.Cre8magic.Settings.MagicSettingsCatalog.html",
    "title": "Class MagicSettingsCatalog | cre8magic",
    "keywords": "Class MagicSettingsCatalog Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll This is a catalog of all kinds of settings. It serves as a kind of database to manage all settings, which will usually be retrieved using a name. public record MagicSettingsCatalog Inheritance object MagicSettingsCatalog Constructors MagicSettingsCatalog() Empty Constructor so it can be created in code and Json-Deserialized public MagicSettingsCatalog() Fields SourceDefault public const string SourceDefault = \"Unknown\" Field Value string Properties Analytics [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicAnalyticsSettings>))] public Dictionary<string, MagicAnalyticsSettings> Analytics { get; init; } Property Value Dictionary<string, MagicAnalyticsSettings> BreadcrumbDesigns [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicBreadcrumbDesignSettings>))] public Dictionary<string, MagicBreadcrumbDesignSettings> BreadcrumbDesigns { get; init; } Property Value Dictionary<string, MagicBreadcrumbDesignSettings> Breadcrumbs [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicBreadcrumbSettings>))] public Dictionary<string, MagicBreadcrumbSettings> Breadcrumbs { get; init; } Property Value Dictionary<string, MagicBreadcrumbSettings> ContainerDesigns [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicContainerDesignSettings>))] public Dictionary<string, MagicContainerDesignSettings> ContainerDesigns { get; init; } Property Value Dictionary<string, MagicContainerDesignSettings> Containers [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicContainerSettings>))] public Dictionary<string, MagicContainerSettings> Containers { get; init; } Property Value Dictionary<string, MagicContainerSettings> Debug Master debug settings - would override other debugs public MagicDebugSettings? Debug { get; init; } Property Value MagicDebugSettings LanguageDesigns Design definitions of languages [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicLanguageDesignSettings>))] public Dictionary<string, MagicLanguageDesignSettings> LanguageDesigns { get; init; } Property Value Dictionary<string, MagicLanguageDesignSettings> Languages Language Settings [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicLanguageSettings>))] public Dictionary<string, MagicLanguageSettings> Languages { get; init; } Property Value Dictionary<string, MagicLanguageSettings> MenuDesigns Design definitions of the menu [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicMenuDesignSettings>))] public Dictionary<string, MagicMenuDesignSettings> MenuDesigns { get; init; } Property Value Dictionary<string, MagicMenuDesignSettings> Menus The menu definitions [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicMenuSettings>))] public Dictionary<string, MagicMenuSettings> Menus { get; init; } Property Value Dictionary<string, MagicMenuSettings> PageContexts The menu definitions [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicPageContextSettings>))] public Dictionary<string, MagicPageContextSettings> PageContexts { get; init; } Property Value Dictionary<string, MagicPageContextSettings> Source Source of these settings / where they came from, to ensure that we can see in debug where a value was picked up from public string Source { get; set; } Property Value string ThemeDesigns [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicThemeDesignSettings>))] public Dictionary<string, MagicThemeDesignSettings> ThemeDesigns { get; init; } Property Value Dictionary<string, MagicThemeDesignSettings> Themes List of Themes and mainly what parts they want to explicitly configure (e.g. determine Show, and there these parts find their settings) [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicThemeSettings>))] public Dictionary<string, MagicThemeSettings> Themes { get; init; } Property Value Dictionary<string, MagicThemeSettings> Version Version number when loading from JSON to verify it's what we expect public float Version { get; init; } Property Value float"
  },
  "api/ToSic.Cre8magic.Settings.MagicSettingsExtensions.html": {
    "href": "api/ToSic.Cre8magic.Settings.MagicSettingsExtensions.html",
    "title": "Class MagicSettingsExtensions | cre8magic",
    "keywords": "Class MagicSettingsExtensions Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class MagicSettingsExtensions Inheritance object MagicSettingsExtensions Methods With<TSettings>(TSettings?, PageState, bool) Add a PageState to a settings object. This uses normal record with manipulations, so it creates a new object but preserves all other settings. public static TSettings With<TSettings>(this TSettings? settings, PageState pageState, bool overwrite = false) where TSettings : MagicSettingsBase, new() Parameters settings TSettings The initial settings object - can be null (in which case a fresh one is created) pageState PageState The PageState overwrite bool Determines if an existing value should be overwritten. If false (default) any original value is preserved. Returns TSettings Type Parameters TSettings The type of settings we're expanding with this PageState data. With<TSettings, TWith>(TSettings?, TWith?, bool) public static TSettings With<TSettings, TWith>(this TSettings? settings, TWith? addition, bool overwrite = false) where TSettings : MagicSettingsBase, IWith<TWith>, new() where TWith : class Parameters settings TSettings addition TWith overwrite bool Returns TSettings Type Parameters TSettings TWith"
  },
  "api/ToSic.Cre8magic.Settings.MagicSettingsLookup.html": {
    "href": "api/ToSic.Cre8magic.Settings.MagicSettingsLookup.html",
    "title": "Class MagicSettingsLookup | cre8magic",
    "keywords": "Class MagicSettingsLookup Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicSettingsLookup Inheritance object MagicSettingsLookup Properties DesignName public string? DesignName { get; init; } Property Value string PartName public string? PartName { get; init; } Property Value string SettingsName public string? SettingsName { get; init; } Property Value string"
  },
  "api/ToSic.Cre8magic.Settings.NamedSettings-1.html": {
    "href": "api/ToSic.Cre8magic.Settings.NamedSettings-1.html",
    "title": "Class NamedSettings<T> | cre8magic",
    "keywords": "Class NamedSettings<T> Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Case-insensitive dictionary managing a list of named settings public class NamedSettings<T> : Dictionary<string, T>, IDictionary<string, T>, ICollection<KeyValuePair<string, T>>, IReadOnlyDictionary<string, T>, IReadOnlyCollection<KeyValuePair<string, T>>, IEnumerable<KeyValuePair<string, T>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, ICanClone<NamedSettings<T>> where T : class, ICanClone<T> Type Parameters T Inheritance object Dictionary<string, T> NamedSettings<T> Implements IDictionary<string, T> ICollection<KeyValuePair<string, T>> IReadOnlyDictionary<string, T> IReadOnlyCollection<KeyValuePair<string, T>> IEnumerable<KeyValuePair<string, T>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable ICanClone<NamedSettings<T>> Inherited Members Dictionary<string, T>.Add(string, T) Dictionary<string, T>.Clear() Dictionary<string, T>.ContainsKey(string) Dictionary<string, T>.ContainsValue(T) Dictionary<string, T>.EnsureCapacity(int) Dictionary<string, T>.GetEnumerator() Dictionary<string, T>.OnDeserialization(object) Dictionary<string, T>.Remove(string) Dictionary<string, T>.Remove(string, out T) Dictionary<string, T>.TrimExcess() Dictionary<string, T>.TrimExcess(int) Dictionary<string, T>.TryAdd(string, T) Dictionary<string, T>.TryGetValue(string, out T) Dictionary<string, T>.Comparer Dictionary<string, T>.Count Dictionary<string, T>.this[string] Dictionary<string, T>.Keys Dictionary<string, T>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NamedSettings() public NamedSettings() NamedSettings(IDictionary<string, T>) public NamedSettings(IDictionary<string, T> dic) Parameters dic IDictionary<string, T> NamedSettings(IEnumerable<KeyValuePair<string, T>>) public NamedSettings(IEnumerable<KeyValuePair<string, T>> dic) Parameters dic IEnumerable<KeyValuePair<string, T>> NamedSettings(NamedSettings<T>?, NamedSettings<T>?) Copy / clone constructor public NamedSettings(NamedSettings<T>? priority, NamedSettings<T>? fallback = null) Parameters priority NamedSettings<T> fallback NamedSettings<T> Methods CloneWith(NamedSettings<T>?, bool) public NamedSettings<T> CloneWith(NamedSettings<T>? priority, bool forceCopy = false) Parameters priority NamedSettings<T> forceCopy bool Returns NamedSettings<T> GetInvariant(string) public T? GetInvariant(string key) Parameters key string Returns T"
  },
  "api/ToSic.Cre8magic.Settings.PairOnOff.html": {
    "href": "api/ToSic.Cre8magic.Settings.PairOnOff.html",
    "title": "Class PairOnOff | cre8magic",
    "keywords": "Class PairOnOff Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Simple Object containing a setting to be used when a value is on or off. Typically used to specify strings to place in classes when something is active, is home, etc. public class PairOnOff Inheritance object PairOnOff Extension Methods PairOnOffExtensions.Get(PairOnOff, bool?) Constructors PairOnOff() Empty constructor for JSON serialization public PairOnOff() PairOnOff(string?, string?) public PairOnOff(string? on, string? off = null) Parameters on string off string Properties Off Value / Class to add if the setting is off public string? Off { get; init; } Property Value string On Value / Class to add if the setting is on public string? On { get; init; } Property Value string Methods CloneUnder(PairOnOff?, bool) public PairOnOff CloneUnder(PairOnOff? priority, bool forceCopy = false) Parameters priority PairOnOff forceCopy bool Returns PairOnOff"
  },
  "api/ToSic.Cre8magic.Settings.PairOnOffExtensions.html": {
    "href": "api/ToSic.Cre8magic.Settings.PairOnOffExtensions.html",
    "title": "Class PairOnOffExtensions | cre8magic",
    "keywords": "Class PairOnOffExtensions Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class PairOnOffExtensions Inheritance object PairOnOffExtensions Methods Get(MagicSettingOnOff?, bool?) Null-safe pair access public static string? Get(this MagicSettingOnOff? pair, bool? isOn) Parameters pair MagicSettingOnOff isOn bool? Returns string"
  },
  "api/ToSic.Cre8magic.Settings.Providers.IMagicProviderSection-1.html": {
    "href": "api/ToSic.Cre8magic.Settings.Providers.IMagicProviderSection-1.html",
    "title": "Interface IMagicProviderSection<TSettings> | cre8magic",
    "keywords": "Interface IMagicProviderSection<TSettings> Namespace ToSic.Cre8magic.Settings.Providers Assembly ToSic.Cre8magic.Client.Oqtane.dll A provider for one type of settings. public interface IMagicProviderSection<TSettings> where TSettings : class Type Parameters TSettings Methods Provide(IDictionary<string, TSettings>) Configure to provide a dictionary of named values. IMagicSettingsProvider Provide(IDictionary<string, TSettings> dictionary) Parameters dictionary IDictionary<string, TSettings> Returns IMagicSettingsProvider Provide(string, TSettings) Configure to provide a named value. IMagicSettingsProvider Provide(string key, TSettings value) Parameters key string value TSettings Returns IMagicSettingsProvider Provide(TSettings) Configure to provide a value - either as the only result for all requests, or as a default. IMagicSettingsProvider Provide(TSettings value) Parameters value TSettings Returns IMagicSettingsProvider"
  },
  "api/ToSic.Cre8magic.Settings.Providers.IMagicSettingsProvider.html": {
    "href": "api/ToSic.Cre8magic.Settings.Providers.IMagicSettingsProvider.html",
    "title": "Interface IMagicSettingsProvider | cre8magic",
    "keywords": "Interface IMagicSettingsProvider Namespace ToSic.Cre8magic.Settings.Providers Assembly ToSic.Cre8magic.Client.Oqtane.dll Special provider to retrieve settings. It is scoped, so anything added to it - typically in the Theme, will be available in all other components. public interface IMagicSettingsProvider Properties Analytics IMagicProviderSection<MagicAnalyticsSettings> Analytics { get; } Property Value IMagicProviderSection<MagicAnalyticsSettings> Breadcrumbs IMagicProviderSection<MagicBreadcrumbSettings> Breadcrumbs { get; } Property Value IMagicProviderSection<MagicBreadcrumbSettings> Containers IMagicProviderSection<MagicContainerSettings> Containers { get; } Property Value IMagicProviderSection<MagicContainerSettings> MenuDesigns IMagicProviderSection<MagicMenuDesignSettings> MenuDesigns { get; } Property Value IMagicProviderSection<MagicMenuDesignSettings> Themes IMagicProviderSection<MagicThemeSettings> Themes { get; } Property Value IMagicProviderSection<MagicThemeSettings> Methods Reset() void Reset()"
  },
  "api/ToSic.Cre8magic.Settings.Providers.Internal.IMagicProviderSectionWithMoreWip-2.html": {
    "href": "api/ToSic.Cre8magic.Settings.Providers.Internal.IMagicProviderSectionWithMoreWip-2.html",
    "title": "Interface IMagicProviderSectionWithMoreWip<TSettings, TProvider> | cre8magic",
    "keywords": "Interface IMagicProviderSectionWithMoreWip<TSettings, TProvider> Namespace ToSic.Cre8magic.Settings.Providers.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll A provider for one type of settings. public interface IMagicProviderSectionWithMoreWip<TSettings, out TProvider> : IMagicProviderSection<TSettings> where TSettings : class Type Parameters TSettings TProvider Inherited Members IMagicProviderSection<TSettings>.Provide(TSettings) IMagicProviderSection<TSettings>.Provide(string, TSettings) IMagicProviderSection<TSettings>.Provide(IDictionary<string, TSettings>) Extension Methods ProviderFindWip.Find<T>(IMagicProviderSection<T>, IMagicSettingsContext) Methods Provide(Func<IMagicSettingsContext, TSettings>) Configure to provide a function to retrieve the value, which can contain more sophisticated logic. TProvider Provide(Func<IMagicSettingsContext, TSettings> getter) Parameters getter Func<IMagicSettingsContext, TSettings> Returns TProvider"
  },
  "api/ToSic.Cre8magic.Settings.Providers.Internal.MagicProviderSection-1.html": {
    "href": "api/ToSic.Cre8magic.Settings.Providers.Internal.MagicProviderSection-1.html",
    "title": "Class MagicProviderSection<T> | cre8magic",
    "keywords": "Class MagicProviderSection<T> Namespace ToSic.Cre8magic.Settings.Providers.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicProviderSection<T> : IMagicProviderSectionWithMoreWip<T, IMagicSettingsProvider>, IMagicProviderSection<T> where T : class Type Parameters T Inheritance object MagicProviderSection<T> Implements IMagicProviderSectionWithMoreWip<T, IMagicSettingsProvider> IMagicProviderSection<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ProviderFindWip.Find<T>(IMagicProviderSection<T>, IMagicSettingsContext) Constructors MagicProviderSection(IMagicSettingsProvider) public MagicProviderSection(IMagicSettingsProvider parent) Parameters parent IMagicSettingsProvider Properties HasValues public bool HasValues { get; } Property Value bool Methods Provide(IDictionary<string, T>) Configure to provide a dictionary of named values. public IMagicSettingsProvider Provide(IDictionary<string, T> dictionary) Parameters dictionary IDictionary<string, T> Returns IMagicSettingsProvider Provide(Func<IMagicSettingsContext, T>) Configure to provide a function to retrieve the value, which can contain more sophisticated logic. public IMagicSettingsProvider Provide(Func<IMagicSettingsContext, T> getter) Parameters getter Func<IMagicSettingsContext, T> Returns IMagicSettingsProvider Provide(string, T) Configure to provide a named value. public IMagicSettingsProvider Provide(string key, T value) Parameters key string value T Returns IMagicSettingsProvider Provide(T) Configure to provide a value - either as the only result for all requests, or as a default. public IMagicSettingsProvider Provide(T value) Parameters value T Returns IMagicSettingsProvider Reset() public void Reset()"
  },
  "api/ToSic.Cre8magic.Settings.Providers.Internal.ProviderFindWip.html": {
    "href": "api/ToSic.Cre8magic.Settings.Providers.Internal.ProviderFindWip.html",
    "title": "Class ProviderFindWip | cre8magic",
    "keywords": "Class ProviderFindWip Namespace ToSic.Cre8magic.Settings.Providers.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class ProviderFindWip Inheritance object ProviderFindWip Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Find<T>(IMagicProviderSection<T>, IMagicSettingsContext) Retrieve specified settings according to specs in the context. Will search all providers according to the following priority: First it will check if there is a function provider Then it will check if a provider is available in the dictionary using the name and optionally the prefix in the context Then it will check for a default provider in the dictionary, or a prefix-default Finally, it will check the simple Value provider Last but not least: null public static T? Find<T>(this IMagicProviderSection<T> source, IMagicSettingsContext context) where T : class Parameters source IMagicProviderSection<T> context IMagicSettingsContext Returns T Type Parameters T StaticFind<T>(IMagicSettingsContext, Func<IMagicSettingsContext, T?>?, T?, IDictionary<string, T>?) public static T? StaticFind<T>(IMagicSettingsContext context, Func<IMagicSettingsContext, T?>? getter, T? value, IDictionary<string, T>? values) where T : class Parameters context IMagicSettingsContext getter Func<IMagicSettingsContext, T> value T values IDictionary<string, T> Returns T Type Parameters T"
  },
  "api/ToSic.Cre8magic.Settings.Providers.Internal.html": {
    "href": "api/ToSic.Cre8magic.Settings.Providers.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Settings.Providers.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings.Providers.Internal Classes MagicProviderSection<T> ProviderFindWip Interfaces IMagicProviderSectionWithMoreWip<TSettings, TProvider> A provider for one type of settings."
  },
  "api/ToSic.Cre8magic.Settings.Providers.html": {
    "href": "api/ToSic.Cre8magic.Settings.Providers.html",
    "title": "Namespace ToSic.Cre8magic.Settings.Providers | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings.Providers Interfaces IMagicProviderSection<TSettings> A provider for one type of settings. IMagicSettingsProvider Special provider to retrieve settings. It is scoped, so anything added to it - typically in the Theme, will be available in all other components."
  },
  "api/ToSic.Cre8magic.Settings.SettingsWithInherit.html": {
    "href": "api/ToSic.Cre8magic.Settings.SettingsWithInherit.html",
    "title": "Class SettingsWithInherit | cre8magic",
    "keywords": "Class SettingsWithInherit Namespace ToSic.Cre8magic.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public abstract record SettingsWithInherit Inheritance object SettingsWithInherit Derived MagicBreadcrumbDesignSettings MagicContainerDesignSettings MagicLanguageDesignSettings MagicMenuDesignSettings MagicSettingsBase MagicThemeDesignSettings Constructors SettingsWithInherit() Empty Constructor necessary for deserialization of inheriting classes protected SettingsWithInherit() SettingsWithInherit(SettingsWithInherit?, SettingsWithInherit?) Clone support. protected SettingsWithInherit(SettingsWithInherit? priority, SettingsWithInherit? fallback = null) Parameters priority SettingsWithInherit fallback SettingsWithInherit Properties Inherits [JsonPropertyName(\"@inherits\")] public string? Inherits { get; init; } Property Value string Methods PickFirstNonZeroInt(int?[]) protected static int PickFirstNonZeroInt(int?[] values) Parameters values int?[] Returns int"
  },
  "api/ToSic.Cre8magic.Settings.html": {
    "href": "api/ToSic.Cre8magic.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Settings Classes MagicDebugSettings Debug settings to help during development. These settings can also be loaded from the configuration. This allows you to do things like enable temporarily for admins, without restarting/recompiling anything. MagicDesignSettingsPart Anything that can define what classes it should have. This is usually the base class for something that can also have more information. MagicSettingOnOff Special Setting containing a value to be used when a state is on or off. Typically used to specify strings to place in classes when something: is active is home etc. MagicSettingsBase Internal intermediate base class containing all kinds of settings which all settings share. MagicSettingsCatalog This is a catalog of all kinds of settings. It serves as a kind of database to manage all settings, which will usually be retrieved using a name. MagicSettingsLookup PairOnOffExtensions SettingsWithInherit Interfaces IMagicSettingsProvider Provider to give settings. It is scoped, so anything added to it - typically in the Theme, will be available in all other components. IMagicSettingsProviderSection<TSettings> A provider for one type of settings. IMagicSettingsService"
  },
  "api/ToSic.Cre8magic.Startup.html": {
    "href": "api/ToSic.Cre8magic.Startup.html",
    "title": "Class Startup | cre8magic",
    "keywords": "Class Startup Namespace ToSic.Cre8magic Assembly ToSic.Cre8magic.Client.Oqtane.dll public class Startup : IClientStartup Inheritance object Startup Implements IClientStartup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureServices(IServiceCollection) Register Services public void ConfigureServices(IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/ToSic.Cre8magic.Themes.IMagicThemeJsService.html": {
    "href": "api/ToSic.Cre8magic.Themes.IMagicThemeJsService.html",
    "title": "Interface IMagicThemeJsService | cre8magic",
    "keywords": "Interface IMagicThemeJsService Namespace ToSic.Cre8magic.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicThemeJsService Methods Log(params object[]) Task Log(params object[] args) Parameters args object[] Returns Task SetBodyClasses(string) Set body classes (removes all previous classes in the process) Task SetBodyClasses(string classes) Parameters classes string Returns Task"
  },
  "api/ToSic.Cre8magic.Themes.IMagicThemeKit.html": {
    "href": "api/ToSic.Cre8magic.Themes.IMagicThemeKit.html",
    "title": "Interface IMagicThemeKit | cre8magic",
    "keywords": "Interface IMagicThemeKit Namespace ToSic.Cre8magic.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicThemeKit Properties Designer MagicThemeDesigner Designer { get; } Property Value MagicThemeDesigner Logo string Logo { get; } Property Value string Settings MagicThemeSettings Settings { get; } Property Value MagicThemeSettings Methods ShowPart(string) Determine if we should show a specific part bool ShowPart(string name) Parameters name string Returns bool"
  },
  "api/ToSic.Cre8magic.Themes.IMagicThemeService.html": {
    "href": "api/ToSic.Cre8magic.Themes.IMagicThemeService.html",
    "title": "Interface IMagicThemeService | cre8magic",
    "keywords": "Interface IMagicThemeService Namespace ToSic.Cre8magic.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicThemeService Methods ThemeKit(PageState, MagicThemeSettings?) IMagicThemeKit ThemeKit(PageState pageState, MagicThemeSettings? settings) Parameters pageState PageState settings MagicThemeSettings Returns IMagicThemeKit"
  },
  "api/ToSic.Cre8magic.Themes.Internal.MagicThemeContext.html": {
    "href": "api/ToSic.Cre8magic.Themes.Internal.MagicThemeContext.html",
    "title": "Class MagicThemeContext | cre8magic",
    "keywords": "Class MagicThemeContext Namespace ToSic.Cre8magic.Themes.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Lightweight context, mainly used for retrieving settings parts. public record MagicThemeContext : IEquatable<MagicThemeContext> Inheritance object MagicThemeContext Implements IEquatable<MagicThemeContext> Derived MagicThemeContextFull Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicThemeContext(string, MagicThemeSettings, Journal) Lightweight context, mainly used for retrieving settings parts. public MagicThemeContext(string SettingsName, MagicThemeSettings ThemeSettings, Journal Journal) Parameters SettingsName string ThemeSettings MagicThemeSettings Journal Journal Properties Journal public Journal Journal { get; init; } Property Value Journal SettingsName public string SettingsName { get; init; } Property Value string ThemeSettings public MagicThemeSettings ThemeSettings { get; init; } Property Value MagicThemeSettings"
  },
  "api/ToSic.Cre8magic.Themes.Internal.MagicThemeContextFull.html": {
    "href": "api/ToSic.Cre8magic.Themes.Internal.MagicThemeContextFull.html",
    "title": "Class MagicThemeContextFull | cre8magic",
    "keywords": "Class MagicThemeContextFull Namespace ToSic.Cre8magic.Themes.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicThemeContextFull : MagicThemeContext, IEquatable<MagicThemeContext>, IEquatable<MagicThemeContextFull> Inheritance object MagicThemeContext MagicThemeContextFull Implements IEquatable<MagicThemeContext> IEquatable<MagicThemeContextFull> Inherited Members MagicThemeContext.SettingsName MagicThemeContext.ThemeSettings MagicThemeContext.Journal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicThemeContextFull(string, PageState, MagicThemeSettings, MagicThemeDesignSettings, TokenEngine, Journal) public MagicThemeContextFull(string SettingsName, PageState PageState, MagicThemeSettings ThemeSettings, MagicThemeDesignSettings ThemeDesignSettings, TokenEngine PageTokens, Journal Journal) Parameters SettingsName string PageState PageState ThemeSettings MagicThemeSettings ThemeDesignSettings MagicThemeDesignSettings PageTokens TokenEngine Journal Journal Properties PageState public PageState PageState { get; init; } Property Value PageState PageTokens public TokenEngine PageTokens { get; init; } Property Value TokenEngine ThemeDesignSettings public MagicThemeDesignSettings ThemeDesignSettings { get; init; } Property Value MagicThemeDesignSettings"
  },
  "api/ToSic.Cre8magic.Themes.Internal.MagicThemeDesigner.html": {
    "href": "api/ToSic.Cre8magic.Themes.Internal.MagicThemeDesigner.html",
    "title": "Class MagicThemeDesigner | cre8magic",
    "keywords": "Class MagicThemeDesigner Namespace ToSic.Cre8magic.Themes.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll Special helper to figure out what classes should be applied to the page. public class MagicThemeDesigner : MagicDesignerBase, IMagicDesigner Inheritance object MagicDesignerBase MagicThemeDesigner Implements IMagicDesigner Inherited Members MagicDesignerBase.Context MagicDesignerBase.DesignSettings MagicDesignerBase.GetSettings(string) MagicDesignerBase.ParseTokens MagicDesignerBase.ProcessTokens(string) MagicDesignerBase.Classes(string) MagicDesignerBase.Value(string) MagicDesignerBase.Id(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MagicThemeDesigner(MagicThemeContextFull) Special helper to figure out what classes should be applied to the page. public MagicThemeDesigner(MagicThemeContextFull context) Parameters context MagicThemeContextFull Methods PaneClasses(string) Special classes for divs surrounding panes pane, especially to indicate when it's empty public string? PaneClasses(string paneName) Parameters paneName string Returns string"
  },
  "api/ToSic.Cre8magic.Themes.Internal.html": {
    "href": "api/ToSic.Cre8magic.Themes.Internal.html",
    "title": "Namespace ToSic.Cre8magic.Themes.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Themes.Internal Classes MagicThemeContext Lightweight context, mainly used for retrieving settings parts. MagicThemeContextFull MagicThemeDesigner Special helper to figure out what classes should be applied to the page."
  },
  "api/ToSic.Cre8magic.Themes.MagicContextAndSettings.html": {
    "href": "api/ToSic.Cre8magic.Themes.MagicContextAndSettings.html",
    "title": "Class MagicContextAndSettings | cre8magic",
    "keywords": "Class MagicContextAndSettings Namespace ToSic.Cre8magic.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicContextAndSettings : ComponentBase Inheritance object ComponentBase MagicContextAndSettings Properties ChildContent The HTML contents which is wrapped by this component. If the settings specify that it uses the Body tag, then no div is added. Otherwise, everything will be wrapped in a div with the magic CSS classes. [Parameter] public RenderFragment? ChildContent { get; set; } Property Value RenderFragment PageState Get the PageState from the CascadingParameter [CascadingParameter] public required PageState PageState { get; set; } Property Value PageState Settings [Parameter] public MagicPageContextSettings? Settings { get; set; } Property Value MagicPageContextSettings Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnAfterRenderAsync(bool) Method invoked after each time the component has been rendered interactively and the UI has finished updating (for example, after elements have been added to the browser DOM). Any Microsoft.AspNetCore.Components.ElementReference fields will be populated by the time this runs. This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated. Note that the component does not automatically re-render after the completion of any returned System.Threading.Tasks.Task, because that would cause an infinite render loop. protected override Task OnAfterRenderAsync(bool firstRender) Parameters firstRender bool Set to true if this is the first time OnAfterRender(bool) has been invoked on this component instance; otherwise false. Returns Task A System.Threading.Tasks.Task representing any asynchronous operation. Remarks The OnAfterRender(bool) and Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) lifecycle methods are useful for performing interop, or interacting with values received from @ref. Use the firstRender parameter to ensure that initialization work is only performed once."
  },
  "api/ToSic.Cre8magic.Themes.MagicThemeBase.html": {
    "href": "api/ToSic.Cre8magic.Themes.MagicThemeBase.html",
    "title": "Class MagicThemeBase | cre8magic",
    "keywords": "Class MagicThemeBase Namespace ToSic.Cre8magic.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll Base class for our themes. It's responsible for Some basic properties such as Name, BodyClasses etc. which each theme can configure Adding special classes to the body tag so that the CSS can best optimize for each scenario public abstract class MagicThemeBase : ThemeBase, IThemeControl Inheritance object ComponentBase ThemeBase MagicThemeBase Implements IThemeControl Inherited Members ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, string) ThemeBase.NavigateUrl(string, Dictionary<string, string>) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(int, string) ThemeBase.NavigateUrl(int, string, string) ThemeBase.NavigateUrl(int, string, Dictionary<string, string>) ThemeBase.NavigateUrl(string, int, string) ThemeBase.NavigateUrl(string, int, string, string) ThemeBase.NavigateUrl(string, int, string, Dictionary<string, string>) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(int, string, Dictionary<string, string>) ThemeBase.EditUrl(string, int, string, string) ThemeBase.EditUrl(string, int, string, Dictionary<string, string>) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Thumbnail ThemeBase.Resources Remarks The base class must be abstract, so that Oqtane doesn't see it as a real them. The config-properties must be abstract, so the inheriting files are forced to set them. Fields PaneNameHeader public const string PaneNameHeader = \"Header\" Field Value string Properties Layout The layout name which is used to lookup settings. The inheriting file is required to specify it. public abstract string Layout { get; } Property Value string MagicComponents Option to inject dynamic components - mainly for testing inspired by http://www.binaryintellect.net/articles/a92dea29-3218-4d1c-a132-9671b518d1f4.aspx protected List<MagicDynamicComponent> MagicComponents { get; } Property Value List<MagicDynamicComponent> MagicContextClasses Sets additional body classes - usually to activate CSS variations for this theme Note that ATM they are not set on the body, but on a div wrapping the entire contents. This is because of some shortcomings in Oqtane, which doesn't allow to reliably set classes on the body. Just remember that when you write your CSS ;). protected abstract string MagicContextClasses { get; } Property Value string MagicHat Get the Magic Hat from the DI [Inject] public required IMagicHat MagicHat { get; set; } Property Value IMagicHat Name Name to show in the Theme-picker. Must be set by each inheriting theme, which is why it's marked abstract to enforce this. public override abstract string Name { get; } Property Value string Panes Force the user to overwrite panes. public override abstract string Panes { get; } Property Value string ThemeKit public IMagicThemeKit ThemeKit { get; } Property Value IMagicThemeKit ThemePackage This contains the default settings which must be used in this theme. Any inheriting class must specify what it will be. public abstract MagicThemePackage ThemePackage { get; } Property Value MagicThemePackage Methods OnAfterRenderAsync(bool) OnAfterRender, track page views protected override Task OnAfterRenderAsync(bool firstRender) Parameters firstRender bool Returns Task OnInitialized() OnInitialized will run early (and once only). It also runs before OnInitializedAsync. protected override void OnInitialized() OnParametersSet() This will run whenever any parameter changes - such as PageState. It also runs before OnParametersSetAsync. protected override void OnParametersSet() ThemePath() Make a nicer theme path without the \".Client\" public string ThemePath() Returns string"
  },
  "api/ToSic.Cre8magic.Themes.MagicThemeDebug.html": {
    "href": "api/ToSic.Cre8magic.Themes.MagicThemeDebug.html",
    "title": "Class MagicThemeDebug | cre8magic",
    "keywords": "Class MagicThemeDebug Namespace ToSic.Cre8magic.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll public class MagicThemeDebug : MagicControlBase, IComponent, IHandleEvent, IHandleAfterRender, IThemeControl, IMagicControlWithSettings, IMagicDesigner Inheritance object ComponentBase ThemeBase ThemeControlBase MagicControlBase MagicThemeDebug Implements IComponent IHandleEvent IHandleAfterRender IThemeControl IMagicControlWithSettings IMagicDesigner Inherited Members MagicControlBase.AllSettings MagicControlBase.UserIsAdmin MagicControlBase.UserIsEditor MagicControlBase.UserIsLoggedIn MagicControlBase.Designer MagicControlBase.Classes(string) MagicControlBase.ClassesOrDefault(string, string) MagicControlBase.Value(string) MagicControlBase.Id(string) ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.Themes.MagicThemePackage.html": {
    "href": "api/ToSic.Cre8magic.Themes.MagicThemePackage.html",
    "title": "Class MagicThemePackage | cre8magic",
    "keywords": "Class MagicThemePackage Namespace ToSic.Cre8magic.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll Settings for a Theme Package. It contains things like location of assets settings for various parts like CSS public record MagicThemePackage Inheritance object MagicThemePackage Properties Defaults All kinds of settings for the layout, how it should be etc. Should usually only serve as backup in case the JSON fails. public MagicSettingsCatalog? Defaults { get; init; } Property Value MagicSettingsCatalog PackageName public string PackageName { get; init; } Property Value string SettingsJsonFile public string SettingsJsonFile { get; init; } Property Value string Url public string Url { get; init; } Property Value string WwwRoot public string WwwRoot { get; init; } Property Value string"
  },
  "api/ToSic.Cre8magic.Themes.MagicThemeSettings.html": {
    "href": "api/ToSic.Cre8magic.Themes.MagicThemeSettings.html",
    "title": "Class MagicThemeSettings | cre8magic",
    "keywords": "Class MagicThemeSettings Namespace ToSic.Cre8magic.Themes Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicThemeSettings : MagicSettingsBase Inheritance object SettingsWithInherit MagicSettingsBase MagicThemeSettings Inherited Members MagicSettingsBase.PageState MagicSettingsBase.PartName MagicSettingsBase.SettingsName MagicSettingsBase.DesignName MagicSettingsBase.Debug SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Extension Methods MagicSettingsExtensions.RefillLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.Refill<TSettings>(TSettings?, PageState) MagicSettingsExtensions.Refill<TSettings, TWith>(TSettings?, TWith?) MagicSettingsExtensions.WithLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.With<TSettings>(TSettings?, PageState) MagicSettingsExtensions.With<TSettings, TWith>(TSettings?, TWith?) Properties Design public string? Design { get; init; } Property Value string Logo The logo to show, should be located in the assets subfolder public string? Logo { get; init; } Property Value string Parts The parts of this theme, like breadcrumb and various menu configs [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicThemePartSettings>))] public Dictionary<string, MagicThemePartSettings> Parts { get; init; } Property Value Dictionary<string, MagicThemePartSettings>"
  },
  "api/ToSic.Cre8magic.Themes.Settings.MagicThemeDesignSettings.html": {
    "href": "api/ToSic.Cre8magic.Themes.Settings.MagicThemeDesignSettings.html",
    "title": "Class MagicThemeDesignSettings | cre8magic",
    "keywords": "Class MagicThemeDesignSettings Namespace ToSic.Cre8magic.Themes.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Constants and helpers related to creating Css and Css Classes. If you change these, you must also update the SCSS files. public record MagicThemeDesignSettings : SettingsWithInherit Inheritance object SettingsWithInherit MagicThemeDesignSettings Inherited Members SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Properties PaneIsEmpty public MagicSettingOnOff? PaneIsEmpty { get; init; } Property Value MagicSettingOnOff Parts Custom values / classes as you need them in your code [JsonConverter(typeof(CaseInsensitiveDictionaryConverter<MagicDesignSettingsPart>))] public Dictionary<string, MagicDesignSettingsPart> Parts { get; init; } Property Value Dictionary<string, MagicDesignSettingsPart>"
  },
  "api/ToSic.Cre8magic.Themes.Settings.MagicThemePartSettings.html": {
    "href": "api/ToSic.Cre8magic.Themes.Settings.MagicThemePartSettings.html",
    "title": "Class MagicThemePartSettings | cre8magic",
    "keywords": "Class MagicThemePartSettings Namespace ToSic.Cre8magic.Themes.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicThemePartSettings Inheritance object MagicThemePartSettings Constructors MagicThemePartSettings(bool) public MagicThemePartSettings(bool show) Parameters show bool MagicThemePartSettings(string) public MagicThemePartSettings(string name) Parameters name string Properties Design Name of the design settings to look up. public string? Design { get; init; } Property Value string Settings Name of the settings to look up. public string? Settings { get; init; } Property Value string Show Determines if this part should be shown or not. This allows you to configure to show / not show certain bits like breadcrumbs in certain scenarios. public bool? Show { get; init; } Property Value bool?"
  },
  "api/ToSic.Cre8magic.Themes.Settings.ThemePartJsonConverter.html": {
    "href": "api/ToSic.Cre8magic.Themes.Settings.ThemePartJsonConverter.html",
    "title": "Class ThemePartJsonConverter | cre8magic",
    "keywords": "Class ThemePartJsonConverter Namespace ToSic.Cre8magic.Themes.Settings Assembly ToSic.Cre8magic.Client.Oqtane.dll Important: NEVER use this on a public class ThemePartJsonConverter : JsonConverterBase<MagicThemePartSettings> Inheritance object JsonConverter JsonConverter<MagicThemePartSettings> JsonConverterBase<MagicThemePartSettings> ThemePartJsonConverter Methods GetNew(ILogger) public static ThemePartJsonConverter GetNew(ILogger logger) Parameters logger ILogger Returns ThemePartJsonConverter Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type MagicThemePartSettings. public override MagicThemePartSettings? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns MagicThemePartSettings The converted value. Write(Utf8JsonWriter, MagicThemePartSettings?, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, MagicThemePartSettings? part, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. part MagicThemePartSettings options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ToSic.Cre8magic.Themes.Settings.html": {
    "href": "api/ToSic.Cre8magic.Themes.Settings.html",
    "title": "Namespace ToSic.Cre8magic.Themes.Settings | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Themes.Settings Classes MagicThemeDesignSettings Constants and helpers related to creating Css and Css Classes. If you change these, you must also update the SCSS files. MagicThemePartSettings ThemePartJsonConverter Important: NEVER use this on a"
  },
  "api/ToSic.Cre8magic.Themes.html": {
    "href": "api/ToSic.Cre8magic.Themes.html",
    "title": "Namespace ToSic.Cre8magic.Themes | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Themes Namespaces ToSic.Cre8magic.Themes.Settings Classes MagicThemeBase Base class for our themes. It's responsible for Some basic properties such as Name, BodyClasses etc. which each theme can configure Adding special classes to the body tag so that the CSS can best optimize for each scenario MagicThemePackage Settings for a Theme Package. It contains things like location of assets settings for various parts like CSS MagicThemeSettings Interfaces IMagicThemeJsService IMagicThemeKit IMagicThemeService"
  },
  "api/ToSic.Cre8magic.Tokens.ITokenReplace.html": {
    "href": "api/ToSic.Cre8magic.Tokens.ITokenReplace.html",
    "title": "Interface ITokenReplace | cre8magic",
    "keywords": "Interface ITokenReplace Namespace ToSic.Cre8magic.Tokens Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface ITokenReplace Properties NameId string NameId { get; } Property Value string Methods Parse(string?) string? Parse(string? value) Parameters value string Returns string"
  },
  "api/ToSic.Cre8magic.Tokens.TokenEngine.html": {
    "href": "api/ToSic.Cre8magic.Tokens.TokenEngine.html",
    "title": "Class TokenEngine | cre8magic",
    "keywords": "Class TokenEngine Namespace ToSic.Cre8magic.Tokens Assembly ToSic.Cre8magic.Client.Oqtane.dll Basic token engine which takes a list of token replacers and runs them. In the future, should be a bit more modern using a token parser and token providers similar to 2sxc. But ATM there are only ca. 10 tokens so the current model is probably sufficient public class TokenEngine : ITokenReplace Inheritance object TokenEngine Implements ITokenReplace Constructors TokenEngine() public TokenEngine() TokenEngine(List<ITokenReplace>) public TokenEngine(List<ITokenReplace> parsers) Parameters parsers List<ITokenReplace> Fields NameIdConst public const string NameIdConst = \"TokenEngine\" Field Value string Properties NameId public string NameId { get; } Property Value string Parsers public ReadOnlyCollection<ITokenReplace> Parsers { get; } Property Value ReadOnlyCollection<ITokenReplace> Methods CloneWith(IMagicPage) public TokenEngine CloneWith(IMagicPage page) Parameters page IMagicPage Returns TokenEngine Expanded(ITokenReplace) public TokenEngine Expanded(ITokenReplace add) Parameters add ITokenReplace Returns TokenEngine Parse(string?) public string? Parse(string? value) Parameters value string Returns string"
  },
  "api/ToSic.Cre8magic.Tokens.html": {
    "href": "api/ToSic.Cre8magic.Tokens.html",
    "title": "Namespace ToSic.Cre8magic.Tokens | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Tokens Classes TokenEngine Basic token engine which takes a list of token replacers and runs them. In the future, should be a bit more modern using a token parser and token providers similar to 2sxc. But ATM there are only ca. 10 tokens so the current model is probably sufficient Interfaces ITokenReplace"
  },
  "api/ToSic.Cre8magic.UserLogins.IMagicUserLoginKit.html": {
    "href": "api/ToSic.Cre8magic.UserLogins.IMagicUserLoginKit.html",
    "title": "Interface IMagicUserLoginKit | cre8magic",
    "keywords": "Interface IMagicUserLoginKit Namespace ToSic.Cre8magic.UserLogins Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicUserLoginKit Properties Designer TODO: not final, probably not correct! MagicThemeDesigner Designer { get; init; } Property Value MagicThemeDesigner Resources MagicUserLoginResources Resources { get; init; } Property Value MagicUserLoginResources User MagicUser User { get; init; } Property Value MagicUser Methods ToggleLogin() Task ToggleLogin() Returns Task"
  },
  "api/ToSic.Cre8magic.UserLogins.Internal.IUserLoginService.html": {
    "href": "api/ToSic.Cre8magic.UserLogins.Internal.IUserLoginService.html",
    "title": "Interface IUserLoginService | cre8magic",
    "keywords": "Interface IUserLoginService Namespace ToSic.Cre8magic.UserLogins.Internal Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IUserLoginService Methods UserLoginKit(PageState) IMagicUserLoginKit UserLoginKit(PageState pageState) Parameters pageState PageState Returns IMagicUserLoginKit"
  },
  "api/ToSic.Cre8magic.UserLogins.Internal.html": {
    "href": "api/ToSic.Cre8magic.UserLogins.Internal.html",
    "title": "Namespace ToSic.Cre8magic.UserLogins.Internal | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.UserLogins.Internal Interfaces IUserLoginService"
  },
  "api/ToSic.Cre8magic.UserLogins.MagicUserLoginResources.html": {
    "href": "api/ToSic.Cre8magic.UserLogins.MagicUserLoginResources.html",
    "title": "Class MagicUserLoginResources | cre8magic",
    "keywords": "Class MagicUserLoginResources Namespace ToSic.Cre8magic.UserLogins Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicUserLoginResources Inheritance object MagicUserLoginResources Properties Login public string Login { get; } Property Value string Logout public string Logout { get; } Property Value string Title public string Title { get; } Property Value string"
  },
  "api/ToSic.Cre8magic.UserLogins.MagicUserLoginSettings.html": {
    "href": "api/ToSic.Cre8magic.UserLogins.MagicUserLoginSettings.html",
    "title": "Class MagicUserLoginSettings | cre8magic",
    "keywords": "Class MagicUserLoginSettings Namespace ToSic.Cre8magic.UserLogins Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicUserLoginSettings : MagicSettingsBase Inheritance object SettingsWithInherit MagicSettingsBase MagicUserLoginSettings Inherited Members MagicSettingsBase.PageState MagicSettingsBase.PartName MagicSettingsBase.SettingsName MagicSettingsBase.DesignName MagicSettingsBase.Debug SettingsWithInherit.Inherits SettingsWithInherit.PickFirstNonZeroInt(int?[]) Extension Methods MagicSettingsExtensions.RefillLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.Refill<TSettings>(TSettings?, PageState) MagicSettingsExtensions.Refill<TSettings, TWith>(TSettings?, TWith?) MagicSettingsExtensions.WithLookup<TSettings>(TSettings?, MagicSettingsLookup) MagicSettingsExtensions.With<TSettings>(TSettings?, PageState) MagicSettingsExtensions.With<TSettings, TWith>(TSettings?, TWith?)"
  },
  "api/ToSic.Cre8magic.UserLogins.html": {
    "href": "api/ToSic.Cre8magic.UserLogins.html",
    "title": "Namespace ToSic.Cre8magic.UserLogins | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.UserLogins Classes MagicUserLoginResources MagicUserLoginSettings Interfaces IMagicUserLoginKit"
  },
  "api/ToSic.Cre8magic.Users.IMagicUserLoginKit.html": {
    "href": "api/ToSic.Cre8magic.Users.IMagicUserLoginKit.html",
    "title": "Interface IMagicUserLoginKit | cre8magic",
    "keywords": "Interface IMagicUserLoginKit Namespace ToSic.Cre8magic.Users Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicUserLoginKit Properties Designer TODO: not final, probably not correct! MagicThemeDesigner Designer { get; init; } Property Value MagicThemeDesigner Resources MagicUserLoginResources Resources { get; init; } Property Value MagicUserLoginResources User MagicUser User { get; init; } Property Value MagicUser Methods ToggleLogin() Task ToggleLogin() Returns Task"
  },
  "api/ToSic.Cre8magic.Users.IMagicUserService.html": {
    "href": "api/ToSic.Cre8magic.Users.IMagicUserService.html",
    "title": "Interface IMagicUserService | cre8magic",
    "keywords": "Interface IMagicUserService Namespace ToSic.Cre8magic.Users Assembly ToSic.Cre8magic.Client.Oqtane.dll public interface IMagicUserService Methods User(PageState) MagicUser User(PageState pageState) Parameters pageState PageState Returns MagicUser"
  },
  "api/ToSic.Cre8magic.Users.MagicUser.html": {
    "href": "api/ToSic.Cre8magic.Users.MagicUser.html",
    "title": "Class MagicUser | cre8magic",
    "keywords": "Class MagicUser Namespace ToSic.Cre8magic.Users Assembly ToSic.Cre8magic.Client.Oqtane.dll public record MagicUser Inheritance object MagicUser Constructors MagicUser(PageState) Note: needs a custom constructor because the property PageState should be internal public MagicUser(PageState pageState) Parameters pageState PageState Properties DisplayName The display name of the user. public string? DisplayName { get; } Property Value string The display name or null if the user is anonymous. Email The email address of the user. public string? Email { get; } Property Value string The email address or null if the user is anonymous. Id The User ID as specified in the DB. public int Id { get; } Property Value int The ID or 0 (zero) if user is anonymous. IsAnonymous Is the user anonymous (not authenticated)? public bool IsAnonymous { get; } Property Value bool IsAuthenticated Is the user authenticated (not anonymous)? public bool IsAuthenticated { get; } Property Value bool IsRegistered public bool IsRegistered { get; } Property Value bool MayAdminCurrentPage public bool MayAdminCurrentPage { get; } Property Value bool MayEditCurrentPage public bool MayEditCurrentPage { get; } Property Value bool OqtaneUser The underlying Oqtane User object. public User? OqtaneUser { get; } Property Value User The object or null if the user is not authenticated. Username The username of the user. public string? Username { get; } Property Value string The username or null if the user is anonymous."
  },
  "api/ToSic.Cre8magic.Users.html": {
    "href": "api/ToSic.Cre8magic.Users.html",
    "title": "Namespace ToSic.Cre8magic.Users | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Users Classes MagicUser Interfaces IMagicUserService"
  },
  "api/ToSic.Cre8magic.Utils.DictionaryExtensions.html": {
    "href": "api/ToSic.Cre8magic.Utils.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | cre8magic",
    "keywords": "Class DictionaryExtensions Namespace ToSic.Cre8magic.Utils Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class DictionaryExtensions Inheritance object DictionaryExtensions"
  },
  "api/ToSic.Cre8magic.Utils.GetKeep-2.html": {
    "href": "api/ToSic.Cre8magic.Utils.GetKeep-2.html",
    "title": "Class GetKeep<TResult, TCompare> | cre8magic",
    "keywords": "Class GetKeep<TResult, TCompare> Namespace ToSic.Cre8magic.Utils Assembly ToSic.Cre8magic.Client.Oqtane.dll Get-or-Keep helper. Will expect a second return value when generating the value, which it will ask for comparison every time it's accessed again. public class GetKeep<TResult, TCompare> where TResult : class Type Parameters TResult TCompare Inheritance object GetKeep<TResult, TCompare> Properties IsValueCreated Determines if value has been created. The name IsValueCreated is the same as in a Lazy() object public bool IsValueCreated { get; } Property Value bool Methods Get(Func<(TResult Result, TCompare Compare)>, Func<TResult?, TCompare?, bool>) public TResult Get(Func<(TResult Result, TCompare Compare)> getter, Func<TResult?, TCompare?, bool> keep) Parameters getter Func<(TResult Result, TCompare Compare)> keep Func<TResult, TCompare, bool> Returns TResult GetAsync(Func<Task<(TResult Result, TCompare Compare)>>, Func<TResult?, TCompare?, bool>) public Task<TResult> GetAsync(Func<Task<(TResult Result, TCompare Compare)>> getter, Func<TResult?, TCompare?, bool> keep) Parameters getter Func<Task<(TResult Result, TCompare Compare)>> keep Func<TResult, TCompare, bool> Returns Task<TResult>"
  },
  "api/ToSic.Cre8magic.Utils.GetKeepByPageId-1.html": {
    "href": "api/ToSic.Cre8magic.Utils.GetKeepByPageId-1.html",
    "title": "Class GetKeepByPageId<T> | cre8magic",
    "keywords": "Class GetKeepByPageId<T> Namespace ToSic.Cre8magic.Utils Assembly ToSic.Cre8magic.Client.Oqtane.dll public class GetKeepByPageId<T> where T : class Type Parameters T Inheritance object GetKeepByPageId<T> Methods Get(PageState, Func<T>) public T Get(PageState pageState, Func<T> create) Parameters pageState PageState create Func<T> Returns T GetAsync(PageState, Func<Task<T>>) public Task<T> GetAsync(PageState pageState, Func<Task<T>> create) Parameters pageState PageState create Func<Task<T>> Returns Task<T>"
  },
  "api/ToSic.Cre8magic.Utils.Logging.CodeRef.html": {
    "href": "api/ToSic.Cre8magic.Utils.Logging.CodeRef.html",
    "title": "Class CodeRef | cre8magic",
    "keywords": "Class CodeRef Namespace ToSic.Cre8magic.Utils.Logging Assembly ToSic.Cre8magic.Client.Oqtane.dll Reference to code - containing the path to the file, the method name and the line in the code. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class CodeRef Inheritance object CodeRef Constructors CodeRef(bool, string, string, int) This constructor should be called without params, so that the compiler automatically injects all values. public CodeRef(bool autoPickup = true, string cPath = null, string cName = null, int cLine = 0) Parameters autoPickup bool Dummy parameter just to have a different signature. cPath string auto pre filled by the compiler - the path to the code file cName string auto pre filled by the compiler - the method name cLine int auto pre filled by the compiler - the code line CodeRef(string, string, int) Default constructor to set the values public CodeRef(string cPath, string cName, int cLine) Parameters cPath string cName string cLine int Fields Line Line of code where the code was running public int Line Field Value int Name Name of the method/property accessed public string Name Field Value string Path Path to the code file public string Path Field Value string"
  },
  "api/ToSic.Cre8magic.Utils.Logging.LogRoot.html": {
    "href": "api/ToSic.Cre8magic.Utils.Logging.LogRoot.html",
    "title": "Class LogRoot | cre8magic",
    "keywords": "Class LogRoot Namespace ToSic.Cre8magic.Utils.Logging Assembly ToSic.Cre8magic.Client.Oqtane.dll public class LogRoot Inheritance object LogRoot Properties Depth [JsonIgnore] public int Depth { get; set; } Property Value int Entries public IEnumerable<object?> Entries { get; } Property Value IEnumerable<object>"
  },
  "api/ToSic.Cre8magic.Utils.Logging.html": {
    "href": "api/ToSic.Cre8magic.Utils.Logging.html",
    "title": "Namespace ToSic.Cre8magic.Utils.Logging | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Utils.Logging Classes CodeRef Reference to code - containing the path to the file, the method name and the line in the code. LogRoot"
  },
  "api/ToSic.Cre8magic.Utils.PageStateSecurityExtensions.html": {
    "href": "api/ToSic.Cre8magic.Utils.PageStateSecurityExtensions.html",
    "title": "Class PageStateSecurityExtensions | cre8magic",
    "keywords": "Class PageStateSecurityExtensions Namespace ToSic.Cre8magic.Utils Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class PageStateSecurityExtensions Inheritance object PageStateSecurityExtensions"
  },
  "api/ToSic.Cre8magic.Utils.StringExtensions.html": {
    "href": "api/ToSic.Cre8magic.Utils.StringExtensions.html",
    "title": "Class StringExtensions | cre8magic",
    "keywords": "Class StringExtensions Namespace ToSic.Cre8magic.Utils Assembly ToSic.Cre8magic.Client.Oqtane.dll public static class StringExtensions Inheritance object StringExtensions"
  },
  "api/ToSic.Cre8magic.Utils.html": {
    "href": "api/ToSic.Cre8magic.Utils.html",
    "title": "Namespace ToSic.Cre8magic.Utils | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic.Utils Namespaces ToSic.Cre8magic.Utils.Logging Classes DictionaryExtensions GetKeepByPageId<T> GetKeep<TResult, TCompare> Get-or-Keep helper. Will expect a second return value when generating the value, which it will ask for comparison every time it's accessed again. PageStateSecurityExtensions StringExtensions"
  },
  "api/ToSic.Cre8magic._Imports.html": {
    "href": "api/ToSic.Cre8magic._Imports.html",
    "title": "Class _Imports | cre8magic",
    "keywords": "Class _Imports Namespace ToSic.Cre8magic Assembly ToSic.Cre8magic.Client.Oqtane.dll public class _Imports : ComponentBase Inheritance object ComponentBase _Imports Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/ToSic.Cre8magic.html": {
    "href": "api/ToSic.Cre8magic.html",
    "title": "Namespace ToSic.Cre8magic | cre8magic",
    "keywords": "Namespace ToSic.Cre8magic Namespaces ToSic.Cre8magic.Act The starting point for your code. Contains the MagicHat and more. ToSic.Cre8magic.Analytics ToSic.Cre8magic.Breadcrumbs ToSic.Cre8magic.Containers ToSic.Cre8magic.Designers ToSic.Cre8magic.Languages ToSic.Cre8magic.Links ToSic.Cre8magic.Menus ToSic.Cre8magic.PageContexts ToSic.Cre8magic.Pages ToSic.Cre8magic.Settings ToSic.Cre8magic.Themes ToSic.Cre8magic.Tokens ToSic.Cre8magic.UserLogins ToSic.Cre8magic.Users ToSic.Cre8magic.Utils Classes MagicConstants MagicTokens"
  },
  "contribute/changelog.html": {
    "href": "contribute/changelog.html",
    "title": "Change Log | cre8magic",
    "keywords": "cre8magic Change Log Version 0 2022-10-07 v0.0.2 Made menu design settings support inherit Added json schema and published to https://2sic.github.io/cre8magic/schemas/2022-10/theme.json 2022-10-05 v0.0.1 Initial release for use on blazor-cms.org Named settings for layouts, breadcrumbs, menus Named settings for the design of layouts, breadcrumbs, menus A bunch of base clases for Razor A bunch of services to make it happen MagicContext, MagicSettings, MagicConfigurations etc."
  },
  "contribute/code/architecture.html": {
    "href": "contribute/code/architecture.html",
    "title": "cre8magic Internal Architecture | cre8magic",
    "keywords": "cre8magic Internal Architecture This document should explain the internal structures of cr8magic, so that developers can understand how it works and how to extend it. Overview For the architecture there are a few things to consider: Stable external APIs Consistent internal APIs to make this fairly complex thing easy to understand Main Paradigms For the Internal Architecture Composition over Inheritance We try to avoid inheritance as much as possible, and instead use composition. This makes it easier to understand and extend the system. Plain Vanilla Blazor Components We use ComponentBase instead of ThemeBase etc. This is a consequence of Composition over Inheritance. Read-Only Record Objects We use read-only record objects for state management. For example, a MagicSettings object is a read-only record object. This has many benefits, especially that it will be immutable and not cause side-effects. Interfaces instead of Objects We prefer to use interfaces instead of objects. This makes it easier to understand and extend the system. Structure by Topic, not by Type We structure the code by topic, not by type. This makes it easier to understand and extend the system. Autocaching in the Service We use autocaching in the service to make it faster and more efficient. Things to Consider We want developers to be able to use the services without having to use the Components. In addition, the settings mechanisms should be seamless, magical but still very easy to understand. Sample Best Practice Setup by Example of the Menu IMagicMenuKit will be the object that contains everything to do with the menu. Internal.IMagicMenuService will be the service that contains the logic to get the Kit. IMagicHat is the main entry point which is usually used to call the service. MagicMenuSettingsData (record) is the data object that is used for settings which can be stored. This object is usually not used the outside, as the outside will use the MagicMenuSettings (without the Data). MagicMenuSettings (record) will be the settings object that is used to configure what the service should provide. It extends the MagicMenuSettingsData and adds some additional properties, like the PartName which would be used to retrieve named settings. This object will usually be provided to the MagicHat to get everything set up. After the setup it will also be found on the .Settings property of the MagicMenuKit. After the setup it will have more values filled (from the MagicMenuSettingsData). Design MagicMenuDesignSettings ... MagicMenuDesignSettingsPart ... TODO: NAMING NOT FINAL MagicMenuDesigner ... The /Menus/Components/MagicMenu is a primary or sample component for using the menu. It will expect a Settings parameter which is the MagicMenuSettings. It will usually use the MagicHat to prepare the MagicMenuKit It will then use the MagicMenuKit to iterate the data, and render the menu. Settings Structures IMagicSettingsService is the internal object which manages/provides the settings. IMagicSettingsSource (of which there are many) is the object that can provide settings. The MagicSettingsSourceJson is an example of this. Sources contain a Catalog(...) method to retrieve the MagicSettingsCatalog MagicSettingsCatalogsLoader will collect all the Sources and provide them to the IMagicSettingsService. ... Settings Catalog and Structure A Catalog contain all the settings which can be requested by any part of the system. It follows two important conventions: Flat Structure with Topic first (e.g. Themes, ThemeDesigns Menus, MenuDesigns, Breadcrumbs, ...) Each of these Settings Groups will have a dictionary of settings, so each section can contain multiple named settings. Everything is a record object, so it's immutable and can't cause side-effects. Everything inside the catalog should support the ICanClone<T> interface, so these records can be duplicated & modified easily. The catalog always follows the following conventions A ThemeSettings (of which there can be many) is used to configure a theme and (for example) determine which parts should be shown and where they can find their settings. Menus contains menu settings MenuDesigns contains menu design settings Settings Json ...usually theme.json Specials like = inherits Internally"
  },
  "contribute/code/index.html": {
    "href": "contribute/code/index.html",
    "title": "Contributing Code | cre8magic",
    "keywords": "Contributing Code Tip This is still a work in progress. Setup The Solution is a Visual Studio 2022 solution. It has a few special things to know: The core project is ToSic.Cre8magic.Client Most UI tests are found in the Module ToSic.Module.Cre8magicTests. Testing in the Browser Place the module on a page and select various tests. If you are logged in, you can also save the configuration so the same test will be shown when you revisit the page. The reason we're doing this is because various tests will behave differently, depending on the theme around it. So this allows us to place the module on pages with different themes and see how it behaves. Important Conventions Group by Topic Each topic should have its own folder. eg. Menus, Breadcrumbs etc. Internal as Much as Possible Anything that is really not needed for the public use should be as internal as possible. Anything internal that can be internal should be marked as internal ...to really protect the public API surface. Anything internal should be in a folder Internal in the root or any topic based folder. ...this will be filtered out by the docs. (TODO) Really internal objects should not be named Magic... it's shorter and we can spot internal stuff + spot leaks in the docs. Note that this doesn't apply to internal implementations of interfaces, which should be named after the interface."
  },
  "contribute/code/tests-test-module.html": {
    "href": "contribute/code/tests-test-module.html",
    "title": "The Test Module and How To Use It | cre8magic",
    "keywords": "The Test Module and How To Use It Part of the dev solution is a module called ToSic.Module.Cre8magicTests. This module is used to test various aspects of the system, and to ensure that everything works as expected. Basically you should compile it into your dev Oqtane an add it to pages to test various aspects of the system."
  },
  "contribute/code/tests-unit-tests.html": {
    "href": "contribute/code/tests-unit-tests.html",
    "title": "TODO: Document Unit Tests | cre8magic",
    "keywords": "TODO: Document Unit Tests"
  },
  "contribute/gh-pages.html": {
    "href": "contribute/gh-pages.html",
    "title": "Documentation is hosted with GitHub Pages | cre8magic",
    "keywords": "Documentation is hosted with GitHub Pages Public documentation: https://cre8magic.blazor-cms.org GitHub Pages are powered by docfx. cd docs docfx --serve browse http://localhost:8080/"
  },
  "get-started/how-it-works.html": {
    "href": "get-started/how-it-works.html",
    "title": "cre8magic – How It Works | cre8magic",
    "keywords": "cre8magic – How It Works Below we'll give you an example of what you would normally have, and how it would be done with cre8magic. Example Problem: Smart Module Containers Let's assume you have a container which is a bunch of div tags and a bit of CSS. In this example we have two features we are using a special ID for CSS targeting (for special cases where we wish to have CSS for a very specific module) some CSS classes which could vary depending on certain factors - such as if it's unpublished to show something is wrong Classic Solution @inherits Oqtane.Themes.ContainerBase <div id='module-@ModuleState.ModuleId' class='to-shine-background-container py-4 @(CheckIfModulePublished() ? \"\" : \"module-unpublished\") @(ModuleState.UseAdminContainer ? \"to-shine-admin-container\" : \"...\")'> <div class=\"container\"> <Oqtane.Themes.Controls.ModuleActions/> <ModuleInstance/> </div> </div> @code { public bool CheckIfModulePublished() { return UserSecurity.ContainsRole(ModuleState.Permissions, PermissionNames.View, RoleNames.Everyone); } } Based on this example you can see, that there is a mix of logic and design which is hard to read hard for a designer to develop error prone hard to maintain Simple with cre8magic Here's how it works with cre8magic: @inherits MagicContainer <div id='@Value(\"Id\")' class='@Classes(\"div\")'> <div class=\"container\"> <Oqtane.Themes.Controls.ModuleActions/> <ModuleInstance/> </div> </div> For the system to know what it should do, there are Magic Settings which are easy to manage. Below we're only showing the settings relevant to this example, there are of course more: { \"themeDesigns\": { \"Default\": { // ...a lot of settings not relevant for this example... // Container Designs determine CSS classes on containers // The default/normal container \"container\": { \"classes\": \"theme-container py-4 demo-module-[Module.Id] demo-page-[Page.Id]\", \"isPublished\": [null, \"module-unpublished\"], \"isAdmin\": \"theme-container-admin app-admin-modal\", \"id\": \"module-[Module.Id]\" }, } } } The Magic in the Background cre8magic will do a bunch of things in the background, such as: Load configuration from the DB targeting the page (WIP) the DB targeting a branch in the menu (WIP) the DB targeting the site (WIP) JSON targeting all kinds of scenarios defaults in your code (not recommended) final defaults in cre8magic Flatten configurations to match the current theme Use names to find the configuration for the theme Use further names to find the configuration for each part, such as Menus, Breadcrumbs etc. Flatten all to the current scenario Broadcast these flattened Magic Settings from the Theme to all Controls Initialize the proper settings Broadcast these settings to all controls that are somewhere within the theme object tree Provide simple accessors The MagicTheme, MagicContainer, MagicControl etc. all pick up the settings automatically ...and have special APIs such as @Classes(...) helpers to retrieve the values Process Tokens Settings can contain tokens such as [Module.Id] which will be rendered into the final result TL;DR You got this far? Let's go back to home and start designing! \uD83D\uDC49\uD83C\uDFFE Home"
  },
  "get-started/index.html": {
    "href": "get-started/index.html",
    "title": "Get Started | cre8magic",
    "keywords": "Get Started with cre8magic Install cre8magic As of 2022-10 cre8magic is still beta, so you would need to get it from github and compile. In 2022-12 we plan to release it on nuget."
  },
  "index.html": {
    "href": "index.html",
    "title": "cre8magic for Oqtane – Professional Theme Design | cre8magic",
    "keywords": "cre8magic for Oqtane – Professional Theme Design \uD83E\uDE84\uD83E\uDE84\uD83E\uDE84 Create Magic / Stunning / Amazing Designs on Oqtane \uD83E\uDE84\uD83E\uDE84\uD83E\uDE84 Oqtane is a Blazor based platform to create awesome solutions. It is heavily inspired by the Site/Page/Module model used in DNN. So it's almost ready to create awesome websites and CMS solutions. But there are two missing pieces (☮️) to create amazing websites: Real Content-Management features - which can be done with the extension 2sxc Tools to make designing themes fast and professional - enter: cre8magic cre8magic makes Oqtane Designer-Friendly As a designer, you need certain tools and workflows to be efficient, such as: the ability to make a small change and then reload the page to see the result the need to focus on the what (like the design), without wasting time on the how (like C# code to create the menu) the ability to create variations of your work, such as other layouts which are similar every tool you add (such as cre8magic) should help, but never restrict These aspects are important for the productivity of every designer. Now if you've worked with Oqtane (or Blazor for that matter) you will quickly see that this is not possible. This means you can whatever you want, but there is a lot of code involved, and a lot of time-consuming restarts. cre8magic takes care of all these problems \uD83D\uDE80 cre8magic combines very simple Razor and lets you do everything through settings. Most layouts have very similar HTML, but do vary a bit. For example, it could have different CSS classes to give it the look you need or a different logo file. imagine tweaking this at runtime (without compiling) \uD83D\uDE0F Overview This is how cre8magic enhances Oqtane so that your Theme can focus on the design: The resulting page will usually have something like this: \uD83D\uDC49\uD83C\uDFFE Discover how it works See a Working Example and Get Started Since this is a library, just reading the docs won't cut it. It's best to see this in action on a real-life example. Try the ToShine Theme Template, it will make things much easier to understand. \uD83D\uDC49\uD83C\uDFFC See 2shine Theme Template \uD83D\uDC49\uD83C\uDFFC See Get Started What's in the Magic Box Magic Settings: A Settings / Configuration System \uD83D\uDC49\uD83C\uDFFE see Magic Settings \uD83D\uDC49\uD83C\uDFFE see Settings JSON file \uD83D\uDC49\uD83C\uDFFE see JSON schema Magic Context Magic Values, Classes and more Magic Tokens Magic Languages Magic Menu Magic Razor Base Classes These are the important base classes which your Razor files will inherit. All have in common, that they know about the theme-wide Settings and provide helper methods to get things done easily and quickly, with as little code as possible. Theme / Container Level Base Classes MagicTheme - the foundation for Themes MagicContainer - the foundation for Containers Important Base Controls / Components MagicLanguages is the base for the languages menu MagicBreadcrumbs is the base for the breadcrumbs MagicMenuRoot is the base for menu entry point, loading the configuration, nodes etc. MagicMenuBase is the base for each menu type, like Horizontal, Vertical, Mobile, ... MagicLogin is the base for login/logout icons and texts Generic Base Controls / Base Components These are meant for any other custom controls that you have. MagicControl is for razor controls that has the Octane API (it inherits from ThemeControlBase) MagicComponent is for razor controls with just the basic Razor API (inherits from ComponentBase) Magic Razor Controls / Components These are standalone controls for you to use, which you will normally just use but not inherit, as they already have their HTML output or something. Anything we refer to as a Control inherits from the Oqtane ThemeControlBase, while things we refer to as a Component inherit from the .net ComponentBase. Functional Controls / Components MagicOqtaneControlPanel a control which adds the main control panel for admins MagicContextAndSettings a wrapper used in every theme to ensure MagicContext and MagicSettings work Debug and Error Handling MagicExceptions a control showing important errors to admins MagicMenuDebug a debug helper to see what configuration a menu has and why MagicLanguagesDebug a debug helper to see what configuration the languages have MagicThemeDebug debug helper to see all the current settings on this theme"
  },
  "library/guides/index.html": {
    "href": "library/guides/index.html",
    "title": "cre8magic – Guides for Special Topics | cre8magic",
    "keywords": "cre8magic – Guides for Special Topics ... History ..."
  },
  "library/guides/oqtane-cascading-parameters.html": {
    "href": "library/guides/oqtane-cascading-parameters.html",
    "title": "Oqtane Cascading Parameter and How to Use it | cre8magic",
    "keywords": "Oqtane Cascading Parameter and How to Use it Blazor uses a concept called Cascading Parameters to pass data from a parent component to a child component. Here you'll learn how this works, how Oqtane uses it, and how this affects your work with cre8magic. Cascading Parameters in Blazor In short, a parent component can prepare an object and pass it down to a child component. The parent would do something like this: // ParentComponent.razor @code { private ThemeInfo theme = new() { ButtonClass = \"btn-success\" }; private void ChangeToDarkTheme() { theme = new() { ButtonClass = \"btn-secondary\" }; } } <CascadingValue Value=\"theme\"> <ChildComponent /> </CascadingValue> And the child component would receive it like this: // ChildComponent.razor @code { [CascadingParameter] ThemeInfo Theme { get; set; } } ➡️ For in-depth understanding, read the official docs on Cascading Parameters. Oqtane and Cascading Parameters Oqtane uses this specifically to tell components about the current page, site, module and other context information. Specifically The PageState object is passed down to all components in the page The ModuleState object is passed down to all things module related - like the container or the module itself Note that SiteState is not passed down, as it's provided as a service using dependency injection. So any component which wants to know the PageState must do this: @code { [CascadingParameter] PageState PageState { get; set; } } Tip It's important to be aware that this value can change, and that it's not available before OnParametersSet is called. Oqtane and Inheritance over Composition Oqtane started with a design where components would inherit from a base class. So if you inherit from a typical Oqtane component, you'll get the PageState (and sometimes ModuleState) properties for free. This is the case for components which inherit from: ThemeBase and all derived components ModuleBase and all derived components ContainerBase and derived components such as ModuleTitle, ModuleActions, DefaultContainer etc. ThemeControlBase (inherits ThemeBase) and derived components such as ControlPanel, Login, MenuBase etc. Get PageState when Inheriting from ComponentBase Tip cre8magic ♾️ strongly believes in Composition over Inheritance as the pattern of choice. This means that you should not inherit from an Oqtane base class but instead inherit from ComponentBase. If you inherit from ComponentBase your code will look like this: // Note: this next line is not necessary, but we recommend it for clarity @inherits ComponentBase @code { [CascadingParameter] PageState PageState { get; set; } } Updated 2024-11-29 / Oqtane 6.0"
  },
  "library/guides/oqtane-page-state.html": {
    "href": "library/guides/oqtane-page-state.html",
    "title": "Oqtane PageState and How to Use it | cre8magic",
    "keywords": "Oqtane PageState and How to Use it The Oqtane PageState is an object which the platform Oqtane updates continuously and passes on to all components on the page. Here you'll learn what the PageState is, and how to use it in different scenarios. What is the Oqtane PageState Internally Oqtane creates the PageState object and updates it whenever the page changes. It contains various things such as: current-page information such as the current page, list of modules on it etc. list of all pages etc. site information to access ID, URL, etc. request information such as url parameters This object is provided by Oqtane automatically as a CascadingParameter. Tip Most operations in cre8magic will require the PageState object. There are a few ways to access it, explained below. Get the PageState If you inherit from any standard Oqtane component (not recommended), you can access the PageState object directly. This is because these components are already set up to receive the PageState object. Tip cre8magic ♾️ strongly believes in Composition over Inheritance as the pattern of choice. This means that you should not inherit from an Oqtane base class but instead inherit from ComponentBase. To access the PageState from any normal component, just add this section to your file which inherits from ComponentBase: @inherits ComponentBase @code { [CascadingParameter] PageState PageState { get; set; } } Use the PageState to get a Kit from the MagicHat Almost all operations in cre8magic require a Kit object. This is created for you by the IMagicHat service, which usually needs the PageState to figure out the context. There are two ways that the MagicHat can get the PageState: Directly in the request - there are a few ways to do this Provide it in the theme, so that all components can magically have it (less code) Pass the PageState to the MagicHat in the Call Since there will be various scenarios where you need to pass the PageState to the MagicHat, we have created a few ways to do this. The most simple one creates a new MagicMenuSettings and sets the PageState property: @{ var menuKit = MagicHat.MenuKit(new() { PageState = PageState }); } In other scenarios you may already have a MagicMenuSettings object, but want to extend it with the PageState: @code { // The PageState provided by Oqtane [CascadingParameter] PageState PageState { get; set; } // The Settings handed into this component as a required parameter (so it's never null) [Parameter, EditorRequired] MagicMenuSettings Settings { get; set; } } @{ // Extend the existing settings with the PageState using the records-with syntax var menuKit = MagicHat.MenuKit(Settings with { PageState = PageState }); } Tip The snippet above uses the with statement to create a new object with the PageState property set. This is a core feature of the newer C# languages, and records are used extensively in cre8magic. But the most common scenario is that you might have a MagicMenuSettings object. Since it could also be null, the with statement above would fail. To make things easier, we created an extension method to allow this syntax: @code { // The PageState provided by Oqtane [CascadingParameter] PageState PageState { get; set; } // The Settings handed into this component; NOT required, so it could be null [Parameter] MagicMenuSettings? Settings { get; set; } } @{ // Extend the existing settings with the PageState using the records-with syntax var menuKit = MagicHat.MenuKit(Settings.With(PageState)); } Internally this does the same as the original with statement, but also creates a new object if it's null. Provide the PageState in the Theme (less code) The above examples are the fool-proof way of doing things, but it does add some plumbing which isn't exactly magical. Since advanced setups will usually have a cre8magic-aware Theme, which has some initialization code running, you can also provide the PageState there. // In your Theme.razor file @code { /// <summary> /// Get the Magic Hat from the DI /// </summary> [Inject] public required IMagicHat MagicHat { get; set; } /// <summary> /// OnInitialized will run early (and once only). /// It also runs before OnInitializedAsync. /// </summary> protected override void OnInitialized() { base.OnInitialized(); // Provide the first PageState as early as possible. MagicHat.UsePageState(PageState); } /// <summary> /// This will run whenever any parameter changes - such as PageState. /// It also runs before OnParametersSetAsync. /// </summary> protected override void OnParametersSet() { base.OnParametersSet(); // Provide the latest PageState on every change MagicHat.UsePageState(PageState); } } The MagicHat \uD83C\uDFA9 will remember the PageState for you, so your components can now be simpler. You can now write this: @{ var menuKit = MagicHat.MenuKit(Settings); } ...instead of the fairly lengthy: @code { // The PageState provided by Oqtane [CascadingParameter] PageState PageState { get; set; } // The Settings handed into this component; NOT required, so it could be null [Parameter] MagicMenuSettings? Settings { get; set; } } @{ // Extend the existing settings with the PageState using the records-with syntax var menuKit = MagicHat.MenuKit(Settings.With(PageState)); } Tip When creating a theme which fully uses cre8magic, we recommend this approach. But when creating reusable components for others, you cannot be sure that they have configured the theme to proved the PageState, so your standalone-components should always be able to handle the PageState themselves. History ..."
  },
  "library/index.html": {
    "href": "library/index.html",
    "title": "cre8magic – Oqtane Theme System | cre8magic",
    "keywords": "cre8magic – Oqtane Theme System services, components, and utilities for Oqtane Themes explain History Added in v0.0.1 2022-10 with 80% coverage of what DDR Menu had in DNN"
  },
  "library/magic-menu/index.html": {
    "href": "library/magic-menu/index.html",
    "title": "cre8magic – Magic Menu System for Oqtane Themes | cre8magic",
    "keywords": "cre8magic – Magic Menu System for Oqtane Themes Tip Menus are really simple to build yourself - not \uD83D\uDE20! Not if you want them to be reactive, mobile-friendly, accessible, Bootstrap5 standard... and you want the footer menus to only show certain pages... ...and the side menu to use different styling... And you want to use best-practice SOLID principles and have fun maintaining changes. About Magic Menus The cre8magic Menus are a system to easily create best-practice menus in Oqtane Themes. Depending on your preferences you can use pre-built components and some configuration, or easily build your own components with the help of the MagicMenuKit. A very simple menu can be added just like this: @using ToSic.Cre8magic.OqtaneBs5 <MagicMenu Settings='new() { Start = \"/\" }'/> How it Works How it Works - Basic Setup The Magic Menu is a system to create menus in Oqtane Themes. It uses the standard conventions of cre8magic with the following setup: flowchart LR S([\"Settings ⚙️ or ...Name <br> (_all optional_)\"]) --> PC{\"Use <br> Comp. <br> ?\"} PC -- yes --> MC[\"MagicMenu \uD83C\uDF81 Component <br> uses \uD83C\uDFA9 & \uD83E\uDDF0\"] MC -- get --> MT[\"Magic Tailor \uD83E\uDDF5\"] MT -- magic \uD83E\uDE84 --> HTML[\"Blazor HTML \uD83D\uDD25\"] PC -- no --> MH(\"Magic Hat \uD83C\uDFA9 <br> (get MenuKit \uD83E\uDDF0)\") MH --> YC[\"Your Code \uD83E\uDDD1\uD83C\uDFFD‍\uD83D\uDCBB\"] YC -- magic \uD83E\uDE84 --> HTML MagicMenuSettings ⚙️ determine what pages should be shown - like \"second level only with sub-pages\" The MagicHat \uD83C\uDFA9 will take these settings and prepare a Kit for you using some internal wizardry. This MagicMenuKit \uD83E\uDDF0 contains the MagicPages and various tools to easily create any menu. Some code will then use this kit to create the desired HTML \uD83D\uDD25 Either use the pre-built MagicMenu component in OqtaneBs5 to quickly create a best-practice Bootstrap5 menu Or create your own Blazor component according to your needs How it Works - Advanced Setup with Tailor If you are using the MagicMenu component, it can also use the MagicMenuTailor \uD83E\uDDF5 to tweak the output in various scenarios without changing your code. You can also create custom components which use the MagicTailor \uD83E\uDDF5. The tailor also needs settings, so this looks a bit like this: flowchart LR subgraph s1[\"Magic Hat \uD83C\uDFA9\"] ls[\"Load Settings ⚙️\"] n1[\"Load Tailor Settings<br>&amp; Magic Tailor \uD83E\uDDF5\"] gk[\"Provide Kit \uD83E\uDDF0 with Tailor \uD83E\uDDF5\"] end YC[\"<b>Component / Code &lt; / &gt;</b><br>Using \uD83E\uDDF0 / \uD83E\uDDF5\"] -- magic \uD83E\uDE84 --> HTML[\"Blazor HTML \uD83D\uDD25\"] ls --> n1 n1 --> gk s1 --> YC S([\"Settings ⚙️ or ...Name <br> (_all optional_)\"]) --> s1 The optional MagicMenuTailor \uD83E\uDDF5 is a helper to tweak the output in various scenarios without changing your code. It is used by the MagicMenu \uD83C\uDF81 component to allow for easy customization. You can also create your own Tailors to further customize the output. The optional MagicMenuTailorSettings are used to configure the MagicMenuTailor to your needs. For example, you can specify HTML class for any tag such as <ul>, <li>, <a>, <span> ...or specify data-, title or any attributes for special cases You can also specify conditional classes to add if a node is active or not active, is in breadcrumb, etc. The optional MagicPackageSettings allows you to configure everything in a central location. This can be either in code or in a theme.json file. Intro Examples 1. Simple Top-Level Menu This bit of blazor code will create a Bootstrap5 top-level menu with the default settings, respecting user permissions and highlighting the current page: @using ToSic.Cre8magic.OqtaneBs5 ... <MagicMenu Settings='new() { Start = \"/\" }'/> ... TODO: PIC of output 2. Simple Sidebar Menu The following Oqtane component will create a sidebar menu showing the second and third levels with collapsing arrows and highlighting the current page: @using ToSic.Cre8magic.OqtaneBs5 <MagicMenu Settings='new() { Start = \".\", Level = 2, Depth = 2, Variant = \"Vertical\" }'/> TODO: PIC of output 3. Coded Menu This example assumes you want full control over the output, and still want to use the cre8magic engine to reliably get the right pages, permissions and a simpler SOLID API which is more robust than the built in Oqtane API: TODO: 4. Menu with Configuration in JSON This example shows how you can configure the menu in a theme.json file: { \"menus\": { \"sidebar\": { \"start\": \".\", \"level\": 2, \"depth\": 2 } } } @using ToSic.Cre8magic.OqtaneBs5 <MagicMenu SettingsName=\"sidebar\"/> Note that this example skips the part in the theme were the json is loaded and applied. Challenges and Goals When we designed cre8magic Menus, we wanted to be sure that we're ticking all the right boxes. So these are the real-life challenges we wanted to solve: High-Quality Output following the latest Bootstrap5, accessibility, mobile-friendly and best-practice standards. Make a simple, best-practice API which can be used in code, but can scale up to components and centralized settings. Ensure that the menus are always respecting user permissions and the current page. Allow for easy customization of the output without changing the code. Follow SOLID principles and Composition-over-Inheritance to ensure that the code is maintainable and extendable. Settings: MagicMenuSettings These are the main settings. Settings for loading the configuration elsewhere PartName - the theme part name which can reference other settings/tailor-settings TODO: link to why you would use this SettingsName - name of the settings in the full configuration under Menus (or menus in JSON) TailorName - name of the tailor to apply WIP TailorSettings - settings for the tailor in the full configuration under MenuTailorSettings (or menuTailorSettings in JSON) Settings to specify what to show Start - where to start, eg. * for root, . for current page, 42 for page 42 Level - how many levels above the start to show, eg. -1 for one above, 2 for two below Depth - how many levels below the start to show, eg. 2 for two below Children Settings to specify how to show Variant - it is up to the code do determine what do do with this. The MagicMenu currently supports Vertical for a sidebar, Horizontal for a top menu and will create different outputs like collapsing features. Design - name of the design to use WIP Settings to specify Context PageState - required IF it is not already broadcast by the theme === A core challenge with any website is creating great menus. There are actually three distinct problems to solve: Managing multiple menus on the same page the main menu possibly a side-menu with sub-pages a footer menu for disclaimer and privacy multiple menus in the footer for mega-footers with many links Configuration for selecting the pages which should appear in the menu where to start (like a menu which start at level 2) what pages to show (like all the pages on level 2 - or only their children) how deep to go (do we show submenus?) Design for styling of each node based on the context is the current node selected? add active... is the current node a parent of the selected node? add is-parent... is the current node a dropdown for pages beneath it... Manage Multiple Menus The MagicMenu gives each menu a name, such as Main, Sidebar, Footer etc. You can determine these names in the Razor files. Each of these menus can then be configured in the JSON. By default, each menu will find it's configuration and it's design based on the same name. So the Main menu would take the configuration and design called Main. But you can also reconfigure this. For example, you could say that the Theme Sidebar will use the configuration TopLevelOnly for the Main menu. This is configured in the parts of the themes section of the JSON file. Menu Configuration The menu configuration determines some important aspects such as What node to start from - eg. * is the top level, . is the current page What to do from the start - like \"children\": true means \"begin with the children\" of the start-node What level to show - so \"start\": \".\", \"level\": -1 means to start one level above the current page How deep to go, so \"depth\": 2 would show the starting level and one more All this is configured in the menus section of the JSON. Start Values These are accepted values of the node start: * root . current page 42 the page 42 5! the page 5 even if it's normally not visible in a menu 42, 5! combinations thereof The following parameters will also influece what is shown on the first level: \"start\": \".\", \"children\": true starts with children of the current page \"start\": \"42\", \"children\": true starts with children of page 42 - ideal for footer or system-menus \"start\": \".\", \"level\": 2 starts with the page on level 2 which is above the current page \"start\": \".\", \"level\": -1 starts with the page one level above the current page you can also combine start=. level=-1 and children=true for further desired effects Depth The depth must always be at least 1 and determines how many levels downwards the nodes are rendered. Menu Design This is one of the most sophisticated bits of the JSON settings. You can configure this in the menuDesigns section of the JSON. Note that this uses the Magic Classes and Magic Tokens. Example: \"menuDesigns\": { \"Mobile\": { \"ul\": { \"byLevel\": { \"1\": \"navbar-nav\", \"-1\": \"collapse theme-submenu-[Menu.Id]-[Page.Id]\" }, \"inBreadcrumb\": \"show\" }, \"li\": { \"classes\": \"nav-item nav-[Page.Id] position-relative\", \"hasChildren\": \"has-child\", \"isActive\": \"active\", \"isDisabled\": \"disabled\" }, \"a\": { \"classes\": \"nav-link mobile-navigation-link\", \"isActive\": \"active\" }, \"span\": { \"classes\": \"nav-item-sub-opener\", \"inBreadcrumb\": [ null, \"collapsed\" ] }, // Special target information (not really styling) usually on the span-tag \"data-bs-target\": \".theme-submenu-[Menu.Id]-[Page.Id]\" }, } This means a lot of things, but let's highlight some aspects: the surrounding <ul> tag will get the navbar-nav class at the first level; all others will get collapse and others the <ul> will also get a menu and page specific class because of the theme-submenu-[Menu.Id]-[Page.Id] which is useful for the collapse identification in bootstrap the <li> of each node will get some classes including an active if it's the current page, and has-child if it has children so that the bootstrap menu will do it's magic the <a> link itself will also have different classes based on active the <span> is used to show a +/- indicator using the nav-item-sub-opener ...and it will also get's collapsed if it's not in the breadcrumb (so it's only opened if a sub-page is the current page) and a special attribute used by bootstrap data-bs-target will have the same contents as the identifying class of the surrounding <ul> to ensure bootstrap will work Missing Features As of now you cannot filter out specific pages. For this you would still need to write your own code or construct your nav-tree for special cases. You cannot link to page in another language, as Oqtane doesn't really have this concept yet. History Added in v0.0.1 2022-10 with 80% coverage of what DDR Menu had in DNN"
  },
  "library/magic-meta-structure.html": {
    "href": "library/magic-meta-structure.html",
    "title": "cre8magic – Topic | cre8magic",
    "keywords": "cre8magic – Topic (teaser) About Intro Example - tabbed or boxed? A Component Example A Library Example Challenges and Goals"
  },
  "library/shared/do-inherit-from-componentbase.html": {
    "href": "library/shared/do-inherit-from-componentbase.html",
    "title": "| cre8magic",
    "keywords": "Tip cre8magic ♾️ strongly believes in Composition over Inheritance as the pattern of choice. This means that you should not inherit from an Oqtane base class but instead inherit from ComponentBase."
  },
  "oqtane-themes-guide/index.html": {
    "href": "oqtane-themes-guide/index.html",
    "title": "Oqtane Blazor Theme Creation Guide | cre8magic",
    "keywords": "Oqtane Blazor Theme Creation Guide This guide will walk you through the process of creating a new theme for Oqtane. It will explain all the basics of how themes work and how to create them, and show you a bunch of tricks to make things better. Tip This guide is for developers who want to create a new theme for Oqtane. It's general purpose for all kinds of themes, not limited to cre8magic themes."
  },
  "oqtane-themes-guide/parameters/index.html": {
    "href": "oqtane-themes-guide/parameters/index.html",
    "title": "Oqtane Blazor Theme Creation - Component Parameters Guide | cre8magic",
    "keywords": "Oqtane Blazor Theme Creation - Component Parameters Guide Blazor has a few secret tricks up its sleeve that can make your life easier when creating themes. A core challenge is passing parameters and settings around between components. Basics: 3 Ways to Pass Parameters There are 3 ways to pass parameters between components in Blazor: On a Component Attribute - the simplest way which you'll use a lot Cascade Parameters from Theme to any Control - Oqtane uses this a lot Using a Service Pass Parameters on a Component Attribute The simplest way to pass a parameter. Just add it to the attribute of the component. @* Example with a direct value *@ <MyComponent MyParameter=\"Hello World\" FavoriteNumber=\"42\" /> @* Example with a variable *@ @{ string myHello = \"Hello World\"; int myFavoriteNumber = 42; } <MyComponent MyParameter=\"@myHello\" FavoriteNumber=\"myFavoriteNumber\" /> Your component would then need to look a bit like this: @code { [Parameter] public string MyParameter { get; set; } [Parameter] public int FavoriteNumber { get; set; } } You can also tell the UI that this parameter is required, so that Visual Studio and the compiler will tell the developer that they need to provide it. @code { [Parameter, EditorRequired] public required string MyParameter { get; set; } } Tip It's not always clear (especially on strings) if the parameter should be the word myVariable or the contents of the variable myVariable. In most cases this is automatically deduced, but in cases of strings it can go wrong. When in doubt, use the @ symbol to tell Blazor to use the contents of the variable. You can also pass in larger objects, like a class or a list: @{ var myObject = new MyObject { Name = \"John\", Age = 42 }; var myListOfObjects = new List<MyObject> { myObject, myObject }; } <MyComponent MyObject=\"myObject\" MyListOfObjects=\"myListOfObjects\" /> The component would then look like this: @code { [Parameter] public MyObject MyObject { get; set; } [Parameter] public List<MyObject> MyListOfObjects { get; set; } } How Component Parameters are Used in Oqtane The Oqtane Framework won't give your components any data directly, so it won't pass in any parameters to your components like this. So this mechanism is mostly used for passing parameters between your components in your theme. Timing Issues with Component Parameters When you pass in a parameter to a component, it's not always available right away. This is because the component is initialized before the parameter is set, and sometimes the parent component is not yet ready to pass in the parameter. Some tips: always assume that the parameters could contain an empty / default value at first use the OnParametersSet or OnParametersSetAsync lifecycle methods to initialize other objects ... and to react to parameter changes when something else is initialized with this parameter, also assume that it could be empty at first Cascade Parameters from Theme to any Control Cascading parameters are a way to pass parameters down the component tree. This is useful when you have a lot of nested components and you don't want to pass the parameter through all of them. Imagine the following component tree: Theme Menu Component Menu Item Component Menu Icon Component Menu Item Menu Item This is what the Theme would look like: @{ var myObject = new IconSettings { Library = \"FontAwesome\" }; } <CascadingValue Value=\"myObject\"> <MyMenu /> </CascadingValue> And the MenuIcon Component would then look like this: @code { [CascadingParameter] public IconSettings MyIconSettings { get; set; } } This way you can pass the IconSettings object from the Theme to the MenuIcon Component without having to pass it through all the other components. Tip Cascading parameters are mapped using the Type of the object. This is why in the previous example we used a IconSettings object, even though we're just passing in as string value. How Cascading Parameters are Used in Oqtane Oqtane uses cascading parameters a lot. You will typically get the following parameters from the Theme: @code { /// <summary> /// Get the PageState from the CascadingParameter /// </summary> [CascadingParameter] public required PageState PageState { get; set; } } If your control is inside a module (eg. part of a Container) you can also get the ModuleState like this: @code { /// <summary> /// Get the ModuleState from the CascadingParameter /// </summary> [CascadingParameter] public required Module ModuleState { get; set; } } Timing Issues with Cascading Parameters Cascading parameters are set before the component is initialized, so you can be sure that they are available when the component is created. This is why you can use them to pass parameters to components that are not directly related to each other. Empty Values in Cascading Parameters Note that cascading parameters can be empty, because the parent component did not set them, or they were set to null or default by the parent component. So if you create your own cascading parameters, either mark them as required to get compiler errors, or do null/default checks in your component. Using a Service The last way to pass parameters is to use a service. This is a bit more advanced and not used as often as the other two ways. Services allow you to: pass parameters \"downwards\" in the component tree (like cascading parameters) pass parameters \"upwards\" in the component tree pass parameters \"sideways\" between components that are not directly related For this to work, a service needs to be scoped correctly, meaning that it should provide the same service instance for every component that needs it. This is done by registering the service as a scoped service in the Startup.cs file: namespace ToSic.Cre8magic; public class Startup : Oqtane.Services.IClientStartup { /// <summary> /// Register Services /// </summary> /// <param name=\"services\"></param> public void ConfigureServices(IServiceCollection services) { // All these Settings etc. should be scoped, so they don't have to reload for each click services.TryAddScoped<IMagicSettingsService, MagicSettingsService>(); } } Tip Scoped services have different behaviors depending on the RenderMode. For now, just understand that they will always give the same instance for everything that is rendered in the same page. Simple Example (Oqtane 5+) In Oqtane 5+ you can use the [Inject] attribute or @inject to inject services into your components. Tip This is the classic way of doing things, but has a few issues related to timing. Read on... Then you can use the service in your components like this: @code { [Inject] public IMagicSettingsService MagicSettingsService { get; set; } } or like this: @code @inject IMagicSettingsService MagicSettingsService In .net 9 you can also use constructor injection (new in Oqtane 6) which has some benefits: @code { private readonly IMagicSettingsService _magicSettingsService; public MyComponent(IMagicSettingsService magicSettingsService) { _magicSettingsService = magicSettingsService; } } Timing Issues with @inject and [Inject] Services Services injected with @inject or [Inject] are handled the same way, and they are not available when the component is constructed. Instead, they are available in the OnInitialized and OnInitializedAsync lifecycle method. This is important, because it's counterintuitive and different from the normal constructor injection that you might know from normal C# services. Either make sure your code expects this - or use constructor injection if you're on Oqtane 6. Constructor Injection (Oqtane 6+) In Oqtane 6+ you can use constructor injection to inject services into your components. Important Using Constructor Injection is a great way to avoid timing issues with services. It's also nicer but it has some downsides: You must separate your razor file into 2 files .razor and .razor.cs (with code behind) which is possibly not desired You can't easily inherit the component anymore (error CS7036: There is no argument given that corresponds to the required parameter...) So you can still inherit the component, but any descendant component must also use 2 razor files with code-behind, which is kind of viral... Tip Because of this tradeoff, we currently recommend against using constructor injection in Oqtane Components. How Service Injections are Used for Parameters in Oqtane This is about parameters in Oqtane, not about general Service Injection. In Oqtane, certain environment parameters are provided as a service instead of Cascading Parameters. Specifically, the SiteState is provided as a service: [Inject] protected SiteState SiteState { get; set; } This is because the SiteState will not change through the lifecycle of the page."
  },
  "oqtane-themes-guide/recommendations/blazor-debounce-strategies.html": {
    "href": "oqtane-themes-guide/recommendations/blazor-debounce-strategies.html",
    "title": "Debounce Strategies for Blazor | cre8magic",
    "keywords": "Debounce Strategies for Blazor todo: discuss options, eg. OnChange nullify OnChange set use inline variable"
  },
  "oqtane-themes-guide/recommendations/index.html": {
    "href": "oqtane-themes-guide/recommendations/index.html",
    "title": "Oqtane Theme Recommendations and Best Practices | cre8magic",
    "keywords": "Oqtane Theme Recommendations and Best Practices These are recommendations base on the cre8magic team's experience with Oqtane themes. We see these things as best practices, but they are not required, or may also be different from the official Oqtane Best Practices. Components should Inherit from ComponentBase, Not ThemeControlBase This applies to the many components you create in your theme, eg. for showing an icon, a menu, a breadcrumb, etc. It does not apply to the Theme itself, which should inherit from ThemeBase, or to Modules, which should inherit from ModuleBase. Do: Inherit from the standard ComponentBase This is in the Microsoft.AspNetCore.Components namespace. Your Component will usually require the Page-State, so you should add: @code { [CascadingParameter] public required PageState PageState { get; set; } } In some cases you may also need the Site-State or the Module-State. If you do need them, do this: @code { [Inject] public required SiteState SiteState { get; set; } [CascadingParameter] public required Module ModuleState { get; set; } } Don't: Inherit from ThemeControlBase The official way to create Components in Oqtane is to call them Controls and inherit from ThemeControlBase. Our Reasoning The ThemeControlBase is a custom class that is part of the Oqtane framework. This in turn inherits from ThemeBase which (IMHO) has various issues such as: It uses an Inheritance strategy instead of Composition, which we think is wrong. It mixes a lot of responsibilities It's huge and has a lot of APIs which we believe should not be used. In 99% of all cases all you need is the PageState, which you can get without this additional baggage. Doing this will also keep your code clean and more maintainable."
  },
  "roadmap/history.html": {
    "href": "roadmap/history.html",
    "title": "Roadmap | cre8magic",
    "keywords": "Roadmap Working on v0.02 2024-11 Here we want to make it more architecturally sound, and more modular. Goal is that some developers may only want to use certain services to make their life easier. These people may not care about the settings system, projections or even styling system. But those automations should still exist for most projects that just want to get things done. So the goal is kind of the following - based on an example of the menu system: Services We probably need some primary service which will do most of the work, To ensure that our startup logic is able to retrieve other services as well... Factories Have a service - probably called ToSic.Cre8Magic.Pages.MagicPagesService - which is used to prepare the data for various use cases such as: Menu Breadcrumbs Sitemap Single pages which are smarter etc. These services should have a simple API but be able to do \"everything\" This should either be a named-params system Or a fluent API (TBD) Samples which just use the service, and custom Razor to do everything else. More Thoughts Probably remove the \"Client\" part in the namespace Probably make a topic based namespace system, not a model/services/controls system ? or the other way around? Unit tests? Possibly make smaller DLLs?, like a Core, A pages, etc. First Beta v0.01 2022-10 This was the first version of the project. It was made to test various concepts such as: Simple Bootstrap 5 Themes which can be easily customized without recompiling. Settings-System which projects the configuration(s) to the various themes and components. Creating various \"standard\" components that just do everything right. This system had some improtant shortcomings, such as: Black box - things magically worked - or didn't We tried to compensate a lot of this with logging, but that only helped if you already knew a lot of the systems internals."
  },
  "roadmap/index.html": {
    "href": "roadmap/index.html",
    "title": "Roadmap | cre8magic",
    "keywords": "Roadmap Working on v2 2024-11 As of 2022-10 cre8magic is still beta, so you would need to get it from github and compile. In 2022-12 we plan to release it on nuget."
  },
  "roadmap/patterns.html": {
    "href": "roadmap/patterns.html",
    "title": "Patterns | cre8magic",
    "keywords": "Patterns cre8magic strives to follow the best practices of software development. This includes the use of patterns and principles that have been proven to work well in the past. Tip Some of these patterns are very different from the patterns used in Oqtane. There are good reasons for this, which are explained in the respective sections. Settings > Service > Kit > Work ... Composition over Inheritance cre8magic prefers composition over inheritance. Warning ♾️ vs. \uD83D\uDCA7 This pattern used by cre8magic is seen as a best practice by the cre8magic team and by many experts in the community. Oqtane currently uses a different pattern, which is prioritizes inheritance. Plain Vanilla Blazor Components ...ComponentBase instead of ThemeBase etc. ...consequence of Composition over Inheritance. Read-Only Record Objects cre8magic uses read-only record objects for state management. For example, a MagicSettings object is a read-only record object. This has many benefits, especially that it will be immutable and not cause side-effects. Warning ♾️ vs. \uD83D\uDCA7 This pattern used by cre8magic is seen as a best practice by the cre8magic team and by many experts in the community. Oqtane currently uses a different pattern, which has mutable classes. Example of ♾️ vs. \uD83D\uDCA7 Oqtane's Page object is mutable, and can be changed at any time. You should never do this, and it can have severe side-effects. But the API doesn't prevent you from doing it. cre8magic's MagicPage record is immutable, and can never be changed. You can create new copies of it, but the original will always stay the same. Interfaces instead of Objects ... Structure by Topic, not by Type todo: diff than Oqtane ... Auto-Caching in the service... Plural Namespaces cre8magic uses plural namespaces for all services and objects. For example, Breadcrumbs or Languages Records as Function Parameters API stability update-safe ..."
  },
  "settings/index.html": {
    "href": "settings/index.html",
    "title": "cre8magic - Magic Settings Overview | cre8magic",
    "keywords": "cre8magic - Magic Settings Overview Magic Settings are a core building block of cre8magic. Basically anything you do, will start of with some settings - or some invisible defaults. These are the things you should probably know: What settings can be used for each scenario How to provide settings in a central location How to provide settings by name or theme part name (TODO:) How to provide design settings (TODO:) How to provide PageState (TODO:) How settings work internally Settings for each Scenario Settings will differ depending on if you're creating a menu, a breadcrumb, a Magic Context, or something else. So for this you should look at the respective documentation. TODO: list all relevant parts Providing Settings Settings can be used directly in the code, like: var breadcrumbKit = MagicHat.BreadcrumbKit(new MagicBreadcrumbSettings { PageState = PageState, WithActive = true, WithHome = false, }); Or you can have settings prepared in a central location, and just use the name of the settings: var breadcrumbKit = MagicHat.BreadcrumbKit(PageState); The second way is especially useful when the identical code and components should result in different outputs depending on the scenario, since it allows you to change the settings in one place. For example, you could define that certain menus don't appear or look different within certain parts of your site. For this, see Providing Settings. Providing Named Settings TODO: Providing Settings by Theme Part Name TODO: How Settings Work Internally TODO: explain how settings are used internally Settings have a 2-level hierarchy, shown by the example of a breadcrumb: MagicBreadcrumbSettings would be the main settings which are used in your code. These settings have all the possible options, but also some properties which can only be set by code. For example, you can set a Designer which is a special object that can create some HTML. The MagicBreadcrumbSettingsData is the underlying class behind the MagicBreadcrumbSettings. It contains all the properties which can be stored externally, like in a JSON file or database. Settings vs. DesignSettings TODO: explain the difference between settings and design settings"
  },
  "settings/provide-settings.html": {
    "href": "settings/provide-settings.html",
    "title": "cre8magic - Magic Settings and Prepared Settings | cre8magic",
    "keywords": "cre8magic - Magic Settings and Prepared Settings Magic Settings are a core building block of cre8magic. There are two basic ways to work with Magic Settings: With Direct Settings, you will specify the settings in your code to get some specific data from a service. Or you can have Prepared/Provided Settings in a central location, and just use these. Or you can have Named Settings in a central location, and just use the name of the settings. Or you can have Settings by Theme Part Name in a central location, and just use the name of the part. The scenarios above each add more levels of indirection. This could be confusing to start with, but very powerful once you understand it. Before we explain the details, let's look at some examples. Example Direct Settings vs. Prepared Settings 1. Direct Settings This example assumes you want to create a Breadcrumb, with all the code directly in your Blazor component. going from the home page to the current page you want the home page to be shown as the first node and you want the current page to be shown as the last node, but not as a link @{ var breadcrumbKit = MagicHat.BreadcrumbKit(PageState, new MagicBreadcrumbSettings { WithActive = true, WithHome = false, }); } <ol class=\"breadcrumb\"> @foreach (var item in breadcrumbKit.Pages) { @* ... *@ } </ol> Or when using a MagicBreadcrumb component: <MagicBreadcrumb Settings=\"new MagicBreadcrumbSettings { WithActive = true, WithHome = false }\" /> 2. Loaded Settings This example assumes that settings have been prepare for this control to use. So the code is simply: @* Breadcrumb using the settings from the catalog *@ @{ breadcrumbKit = MagicHat.BreadcrumbKit(PageState); } <ol class=\"breadcrumb\"> @foreach (var item in breadcrumbKit.Pages) { @* ... *@ } </ol> Or when using a MagicBreadcrumb component: <MagicBreadcrumb /> 3. Loaded Settings by Name The previous example didn't specify anything when retrieving the data. Now there are cases where the Prepared Settings use names. This may not be common for breadcrumbs, but typical for menus where you would have: a main menu showing all items starting from the home page a footer menu showing only a few pre-specified items In this case, you should know that these two things are equivalent: @{ breadcrumbKit = MagicHat.BreadcrumbKit(PageState); breadcrumbKit = = MagicHat.BreadcrumbKit(PageState, new() { SettingsName = \"default\" }); } Or when using a MagicBreadcrumb component: <MagicBreadcrumb /> <MagicBreadcrumb SettingsName=\"default\" /> Preparing / Providing Default Settings The settings are prepared and provided in a central location. Tip Since each Theme can have its own settings, the central location to prepare settings is in the Theme code. There are different ways to provide settings: You could just write your own code to keep all settings in one place. The theme code can setup the MagicHat with the settings. The theme code can load settings from a JSON file into the MagicHat The theme code could load settings from a database (not supported yet). Option 1: Just Write Some Shared Code This variant is not recommended, but included just for completeness. You could just have a class which provides the settings: namespace MyCompany.MyTheme.Ui public class MySettingsProvider { public static MagicBreadcrumbSettings BreadcrumbSettings => new() { WithActive = true, WithHome = false, }; } And then use it like this: @{ breadcrumbKit = MagicHat.BreadcrumbKit(PageState, MySettingsProvider.BreadcrumbSettings); } Option 2: Broadcast from Theme This is the first recommended way to provide settings. The settings can be managed centrally, but are still part of the Theme. In terms of Separation of Concerns, we still recommend placing the code which has the settings in it's own class (similar to the previous example). This is the code you would use in your theme: /// <summary> /// OnInitialized, make ure that cre8magic knows what settings this theme wants. /// </summary> protected override void OnInitialized() { base.OnInitialized(); MagicHat.UseSettingsProvider(p => p .Breadcrumbs.SetDefault(MySettingsProvider.BreadcrumbSettings) .Menus.SetDefault(MySettingsProvider.MenuSettings) .UserLogin.SetDefault(MySettingsProvider.UserLoginSettings) ); } And then use it like this: @{ breadcrumbKit = MagicHat.BreadcrumbKit(PageState); } 3. Load Settings from JSON This is the most flexible way to provide settings. It's quite nice, because you can change settings without recompiling your theme. This provides for a much nicer developer / designer experience. The setup requires these things: A JSON file in your theme's wwwroot folder. A MagicThemePackage object in your theme. TODO:"
  },
  "system/magic-context.html": {
    "href": "system/magic-context.html",
    "title": "Magic Context | cre8magic",
    "keywords": "cre8magic – Magic Context The Magic Context adds a bunch of classes to the <body> or a wrapper <div> tag which contain information about the current state. This allows you to then write CSS rules, which change the look / feel of the page based on certain aspects. Example The wrapper <div> could look like this: <div id=\"cre8magic-root\" class=\"page-35 page-root-29 page-parent-33 site-1 nav-level-3 theme-mainnav-variation-right theme-variation-centered\"> <!-- the contents of the page--> </div> This tells you a bunch of things such as: This is page #35 - allows you to do things like special colors for exactly this page The page is in the tree of the root #29 - so you could use special colors for all the pages in this branch The pages parent is #33 - again letting you write custom CSS We are on site #1 - in case you have different styles based on the site number We are currently on the nav-level 3 - this could affect your breadcrumb or something We are in a specific layout type and navigation type How this Works Basically all this happens automatically, if your json configuration has magicContext of something like this: { \"magicContext\": [ \"page-[Page.Id]\", \"page-root-[Page.RootId]\", \"page-parent-[Page.ParentId]\", \"site-[Site.Id]\", \"nav-level-[Menu.Level]\", \"theme-mainnav-variation-right\", \"theme-variation-[Layout.Variation]\" ] } You can of course add your own rules with other placeholders to make this happen. Configuration You can determine if this will be added to a <div> or the <body> using the setting magicContextInBody If it's on the body, it will be put there using JavaScript, so there may be a minimal flash-of-unexpected-styling if you put it in the div, it will always be there You can also change the id of the <div> tag if you want to change how your CSS behaves. The id can be set on the magicContextTagId Missing Features As of 2022-10 there are no magic context classes for languages yet, as Oqtane doesn't fully support Multi-Language. We'll add it as soon as possible. History Added in v0.0.1 2022-10"
  },
  "system/magic-languages.html": {
    "href": "system/magic-languages.html",
    "title": "Magic Languages | cre8magic",
    "keywords": "cre8magic – Magic Languages The languages need three things to work as expected: They need to know if they should show They need to know what languages to show and what labels to use They need to be styled cre8magic makes this happen using these parts: The theme.json which has all the configurations The themes section determines if the menu should show using parts.languages The themes section also has a languagesMin which would hide the languages if there are less than X languages (usually it needs at least 2) The languages section has configurations for what languages to show and what labels to use The themeDesigns section determines how it should look - ATM there is only one key languages-li since the rest has sufficient automatic class names to cover all known styling cases The Magic Settings which will parse the json and provide the parts we need The base Razor MagicLanguages prepares everything so you can inherit from it and create the output as needed How to Use Best check the reference implementation on 2shine Template Theme History All created in v0.0.1 2022-10"
  },
  "system/magic-settings.html": {
    "href": "system/magic-settings.html",
    "title": "cre8magic – Magic Settings | cre8magic",
    "keywords": "cre8magic – Magic Settings Magic Settings allow you to move 95% of the theme code into some kind of configuration. Overview Everything in cre8magic will do something based on settings. These can come from various places Directly in the API call which retrieves a Kit like: var kit = MagicHat.MenuKit(PageState, new MagicMenuSettings() { ... }) Directly in the Component tag which shows the thing like <MagicMenu Settings=\"new MagicMenuSettings() { ... }\" /> Provided elsewhere and named default so it's automatically used like var kit = MagicHat.MenuKit(PageState) <MagicMenu /> Provided elsewhere and retrieved by name like var kit = MagicHat.MenuKit(PageState, settingsName: \"my-menu\") <MagicMenu SettingsName=\"my-menu\" /> Provided elsewhere and retrieved by Theme Part Name like var kit = MagicHat.MenuKit(PageState, partName: \"my-menu\") <MagicMenu PartName=\"my-menu\" /> What's also important is that there are settings related to how/what data to get, and settings related to how to display (DesignSettings) it, as well as an option how the DesignSettings will be applied (MagicDesigner). In future, there may even be more such settings. Levels of Indirection WIP Theme Variant Part in that Theme Variant Settings Design Settings Inheritance on every level Overview - old, json file... Basically the magic settings let you put a bunch of parameters in a JSON file. This file is then used by your Theme and it's Controls to determine what Blazor files to use (like what Template should be used for the menu) what to do with class=\"...\" or id=\"...\" in the HTML and much more \uD83D\uDE09 This basic principle allows you to create and tweak amazing designs without ever recompiling the Theme. It also allows you to create variations of your theme with the same Blazor files. Example JSON See settings-json to see an example file. The Configuration File The system works by creating a json file such as theme-settings.json. This is placed in your themes wwwroot folder like this: wwwroot/ToSic.Themes.BlazorCms/theme-settings.json Note that we don't use ...Client in the path, just the real namespace. Which file to use can be configured in the theme. Normally you would use the same file for all variations of your theme, but the important thing is that the theme must give some initial configuration object to the cre8magic Services. Here's how: Create the MagicPackageSettings This could be done anywhere, but I would place the code in the ThemeInfo.cs file: /// <summary> /// Default settings used in this package. /// They are defined here and given as initial values to the ThemeSettingsService in the Default Razor file. /// </summary> public static MagicPackageSettings ThemePackageDefaults = new() { // The package name is important, as it's used to find assets etc. PackageName = new ThemeInfo().Theme.PackageName, // The json file in the theme folder folder containing all kinds of settings etc. SettingsJsonFile = \"theme-settings.json\", }; Tell the Theme to Use these Settings Then in the theme, you should inherit from the MagicTheme base class and set the ThemePackageSettings like this: public override MagicPackageSettings ThemePackageSettings => ThemeInfo.ThemePackageDefaults; This would usually look a bit like this: public abstract class MyThemeBase : MagicTheme { public override List<Resource> Resources => new() { new() { ResourceType = Stylesheet, Url = $\"{ThemePath()}theme.min.css\" }, // Bootstrap generated with Sass/Webpack new() { ResourceType = Script, Url = $\"{ThemePath()}bootstrap.bundle.min.js\" }, // Bootstrap JS new() { ResourceType = Script, Url = $\"{ThemePath()}ambient.js\", }, // Ambient JS for page Up-button etc. }; /// <summary> /// The ThemePackageSettings must be set in this class, so the Settings initializer can pick it up. /// </summary> public override MagicPackageSettings ThemePackageSettings => ThemeInfo.ThemePackageDefaults; public override string Panes => string.Join(\",\", PaneNames.Default, PaneNameHeader); } that's it ✌\uD83C\uDFFD How the Settings Work Internally the MagicSettingsService will be initialized automatically by the MagicTheme base class. It will then go and pick up the JSON file, parse it, do a bunch of magic and come back with a final MagicSettings object. This MagicSettings will then contain all the important settings for the current page/theme. It will also keep a reference to other settings such as Menus for which many configurations can exist. How the Settings are Broadcast A key feature of this system is that the settings are initially loaded in the theme, and then broadcast to all controls used in that theme. To make this happen, the theme must wrap everything in a MagicContextAndSettings tag: <MagicContextAndSettings Settings=\"Settings\"> Content </MagicContextAndSettings> This will do a few things Make sure that the inner content is only shown if Settings are loaded - otherwise show a loading settings... text Broadcast the MagicSettings with the name Settings to all child controls using CascadingValue. It will also ensure that the MagicContext is set on the page TODO: EXPLAIN SETTINGS MORE Continue... Then continue back to the \uD83D\uDC49\uD83C\uDFFE Home"
  },
  "system/magic-tokens.html": {
    "href": "system/magic-tokens.html",
    "title": "Magic Tokens | cre8magic",
    "keywords": "cre8magic – Magic Tokens Most settings will be parsed through a tokens-engine which will convert all kinds of tokens such as [Page.Id] into their respective value. Note that each context is different. For example, when parsing settings at the page level, [Page...] tokens will work, but [Module...] tokens will not work. Note: The list of tokens is still work in progress Purpose of cre8magic Tokens The purpose of these tokens is for use in configurable values - such as classes on HTML tags. They are currently not going to give you all possible values, for eg. there is no [Module.Title] token since there is no good reason to use this in such scenarios. If you need those values in your HTML (eg. to create special hover-labels) you would just do that in Razor code. Site Tokens Site tokens work everythere. As of now we have these site tokens: [Site.Id] - ID of the current site Theme Tokens Assets tokens work everywhere. As of now we have these assets tokens: [Theme.Url] - the url like Themes/your-theme-name for where your files should be note: it doesn't have leading or trailing slash, so you would use [Theme.Path]/Assets/logo.svg note: it also doesn't have wwwroot as that is never in the public URL Page Tokens Page tokens work everywhere. They are especially useful in creating menus. As of now we have these page tokens: [Page.Id] - ID of the current page [Page.ParentId] - ID of the pages parent page or none [Page.RootId] - ID of the root page in the tree leading to this page or none Module Tokens Module Tokens work on Containers only. As of now we have these module tokens: [Module.Id] - ID of the current module Module Type Information [Module.Namespace] - the name like Oqtane.Modules.HtmlText of the current module ideal to add to containers where you wish to have special styling for special types of modules this uses the namespace, without the final control name [Module.Control] - the control name like Index of the current module ideal to specify even more specific styling from the namespace the final control name ~[Module.Name]~ - the name like HtmlText of the current module (from the namespace, without the final control name) impossible to implement because each module will have different namespace conventions, so finding the real name isn't possible Layout Tokens TODO: Menu Tokens Menu Tokens work on Menus only. As of now we have these menu tokens: [Menu.Id] - ID of the menu which is normally randomly generated to ensure that each menu is unique for collapse/uncollapse [Menu.Level] - level of the menu which can be different for the page level, as menus that start at level 2 still have the first items on menu level 1 How it Works As of v0.1 2022-Q3 it's still a simple search-and-replace. We plan to use a more powerfull RegEx in the near future."
  },
  "system/magic-values.html": {
    "href": "system/magic-values.html",
    "title": "Magic Values | cre8magic",
    "keywords": "cre8magic – Magic Values, Classes and More Almost all design work is done using very few changes to the HTML. The only thing we usually must do, is: set some id properties set some class properties - often based on the context (so the pane may need pane-is-empty) set some values - such as data-bs-toggle cre8magic makes this happen using these parts: The theme.json which has all the configurations The Magic Settings which will parse the json and provide the parts we need Various Desiger helpers which will do some magic and add context The Magic Tokens which will replace things such as [Page.Id] if it was used in class strings Simple helper methods such as Classes(name), Value(name) or Id(name) on all the Magic Razor base classes like the MagicMenu, MagicBreadcrumbs or MagicContainer How to Use Basically all your controls must usually do is write HTML along these lines: @inherits MagicContainer <!-- some code parts skipped for brevity --> <div id='@Id(\"container\")' class='@Classes(\"container\")'> <div class=\"container\"> <Oqtane.Themes.Controls.ModuleActions/> <ModuleInstance/> </div> </div> ...and of course make sure the values for the above mentioned container exist in the theme.json. Everything else just works magically. Razor API All the Magic* Razor controls have the following methods to make like easier: Classes(name) Value(name) Id(name) A few have some extra methods, such as these: The MagicTheme also has a PaneClasses(name) to also add something to change styling if the pane is empty History All created in v0.0.1 2022-10"
  },
  "system/theme-json.html": {
    "href": "system/theme-json.html",
    "title": "JSON Settings File | cre8magic",
    "keywords": "cre8magic – Magic Settings – JSON Settings File cre8magic uses JSON to enable fast and flexible configuration of your theme. It is used by Magic Settings to load all the initial information. This document explains the json file and everything you must know, such as: Special tricks to make work easier such as comments The general file format and sections Named configurations What can be configured in each section Special nodes which can accept string or more complex data Example JSON Here's a brief extract of such a configuration file (here's a live example): { // By specifying a schema we get intellisense in this JSON \"$schema\": \"https://2sic.github.io/cre8magic/schemas/2022-10/theme.json\", \"version\": 0.01, // Global debug settings \"debug\": { \"allowed\": true, // The most important setting - if this is false, nothing else will happen \"admin\": true, // Enable everywhere for admin \"anonymous\": true, // Enable everywhere for anonymous }, // Theme Configurations \"themes\": { // Default Theme - in most cases you'll just use this theme configuration \"Default\": { // Optional: Design Names with \"=\" mean they inherit / use the name already existing - in this case \"Default\" \"design\": \"=\", \"logo\": \"[Theme.Url]/assets/logo.svg\", \"languagesMin\": 1, \"parts\": { \"breadcrumbs\": true, // ...more stuff here... }, // Determins if we should use the body (or a div) for the magic context // As of now we feel that browser behavior is better if it's in the div-tag (false) \"magicContextInBody\": false, \"debug\": { \"admin\": true, } }, }, // ...more stuff here... } Special Tricks in the File The file will be parsed by .net, but we've activated some special features to make life easier: Comments are allowed Trailing commas are allowed Almost all node names are case insensitive, so \"Default\" and \"default\" are treated the same Make sure you add the \"$schema\" node as you see above, to get help and instructions editing the JSON General File Format and Sections Sections The theme-settings.json contains these primary nodes: version * (just version information) debug * for showing additional debug buttons on the page themes for the main settings of a specific theme such as Logo, breadcrumbs on/off, etc. themeDesigns has the configuration for CSS classes to be used in various places languages contains configuration for languages to show in the menu menus contains configuration for what menus show what nodes, like top-level with sub-level, etc. menuDesigns contains a bunch of rules for how menus should be styled, such as classes to use on the active node etc. Named Configurations All of the nodes above (except those marked with *) can have many different, named configurations. So you'll see something like this: { \"themes\": { // The default configuration is taken if no other configuration is used \"Default\": { // ...stuff... }, // Alternate configuration for theme with menu on the side \"Sidebar\": { // ...stuff... }, } } This means that there is a configuration called Default and one called Sidebar which will do something different. @inherits Does Exactly What it Says Example from the menuDesigns { \"mobile\": { \"ul\": { \"byLevel\": { \"1\": \"navbar-nav\", \"-1\": \"collapse theme-submenu-[Menu.Id]-[Page.Id]\" }, \"inBreadcrumb\": \"show\" }, \"li\": { \"classes\": \"nav-item nav-[Page.Id] position-relative\", \"hasChildren\": \"has-child\", \"isActive\": \"active\", \"isDisabled\": \"disabled\" }, \"a\": { \"classes\": \"nav-link mobile-navigation-link\", \"isActive\": \"active\" }, \"span\": { \"classes\": \"nav-item-sub-opener\", \"inBreadcrumb\": [ null, \"collapsed\" ] }, // Special target information (not really styling) usually on the span-tag \"data-bs-target\": \".theme-submenu-[Menu.Id]-[Page.Id]\" }, \"sidebar\": { \"@inherits\": \"Mobile\", \"a\": { // This is the only difference to Mobile \"classes\": \"nav-link\" } } } Short and Long Notations for True/False settings Most properties which indicate a binary true/false value like isActive or hasChildren can be configured two ways: \"isActive\": \"some-class-when-active\" \"isActive\": [\"active-class\", \"not-active-class\"] \"isActive\": [null, \"not-active-class\"] Short and Long Notations for Complex Objects Certain objects have a long notation, but can be shortened to just a string or bool if it's obvious what is meant. For example, the parts in the themes section would be: \"breadcrumbs\": { \"show\": true, \"design\": \"special-design-name\", \"configuration\": \"special-config-name\" } But this can be abbreviated to: \"breadcrumbs\": true - assumes show=true and design/configuration use the current name \"breadcrumbs\": \"name\" - assumes show=true and the design/config use the specified name This setup also works for all the design settings where you can do: \"container\": \"some string\" - in this case, classes/value get this, everyhing else is empty Intellisense using $schema To get help editing the file, add the $schema to your document. Your editor (at least VS Code) will then help you fill in everything you need. \"$schema\": \"https://2sic.github.io/cre8magic/schemas/2022-10/theme-configurations.schema.json\""
  }
}